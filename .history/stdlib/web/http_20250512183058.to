/**
 * HTTP Client Module for Tocin
 * Provides functionality for making HTTP requests
 */

module web.http {
    // HTTP method enum
    export enum Method {
        GET,
        POST,
        PUT,
        DELETE,
        HEAD,
        OPTIONS,
        PATCH
    }
    
    // HTTP status codes
    export enum Status {
        // 1xx Informational
        CONTINUE = 100,
        SWITCHING_PROTOCOLS = 101,
        PROCESSING = 102,
        
        // 2xx Success
        OK = 200,
        CREATED = 201,
        ACCEPTED = 202,
        NO_CONTENT = 204,
        RESET_CONTENT = 205,
        PARTIAL_CONTENT = 206,
        
        // 3xx Redirection
        MULTIPLE_CHOICES = 300,
        MOVED_PERMANENTLY = 301,
        FOUND = 302,
        SEE_OTHER = 303,
        NOT_MODIFIED = 304,
        TEMPORARY_REDIRECT = 307,
        PERMANENT_REDIRECT = 308,
        
        // 4xx Client Errors
        BAD_REQUEST = 400,
        UNAUTHORIZED = 401,
        PAYMENT_REQUIRED = 402,
        FORBIDDEN = 403,
        NOT_FOUND = 404,
        METHOD_NOT_ALLOWED = 405,
        NOT_ACCEPTABLE = 406,
        REQUEST_TIMEOUT = 408,
        CONFLICT = 409,
        GONE = 410,
        LENGTH_REQUIRED = 411,
        PAYLOAD_TOO_LARGE = 413,
        URI_TOO_LONG = 414,
        UNSUPPORTED_MEDIA_TYPE = 415,
        TOO_MANY_REQUESTS = 429,
        
        // 5xx Server Errors
        INTERNAL_SERVER_ERROR = 500,
        NOT_IMPLEMENTED = 501,
        BAD_GATEWAY = 502,
        SERVICE_UNAVAILABLE = 503,
        GATEWAY_TIMEOUT = 504
    }
    
    // HTTP header class
    export class Headers {
        private headers: dict<string, string>;
        
        constructor(init: dict<string, string> = {}) {
            this.headers = init;
        }
        
        def set(name: string, value: string) {
            this.headers[name] = value;
        }
        
        def get(name: string) -> string? {
            return this.headers[name];
        }
        
        def has(name: string) -> bool {
            return name in this.headers;
        }
        
        def delete(name: string) {
            if name in this.headers {
                delete this.headers[name];
            }
        }
        
        def forEach(callback: (name: string, value: string) -> void) {
            for name, value in this.headers {
                callback(name, value);
            }
        }
        
        def append(name: string, value: string) {
            if name in this.headers {
                this.headers[name] += ", " + value;
            } else {
                this.headers[name] = value;
            }
        }
        
        def toMap() -> dict<string, string> {
            return this.headers;
        }
    }
    
    // HTTP Response class
    export class Response {
        status: int;
        statusText: string;
        headers: Headers;
        body: string;
        
        constructor(status: int, statusText: string, headers: Headers, body: string) {
            this.status = status;
            this.statusText = statusText;
            this.headers = headers;
            this.body = body;
        }
        
        def isOk() -> bool {
            return this.status >= 200 && this.status < 300;
        }
        
        def isRedirect() -> bool {
            return this.status >= 300 && this.status < 400;
        }
        
        def isClientError() -> bool {
            return this.status >= 400 && this.status < 500;
        }
        
        def isServerError() -> bool {
            return this.status >= 500;
        }
        
        def json<T>() -> T {
            @extern("json", "parse")
            def _json_parse(text: string) -> T;
            
            return _json_parse(this.body);
        }
        
        def text() -> string {
            return this.body;
        }
        
        def blob() -> bytes {
            @extern("convert", "string_to_bytes")
            def _string_to_bytes(text: string) -> bytes;
            
            return _string_to_bytes(this.body);
        }
    }
    
    // Request options
    export class RequestOptions {
        method: Method = Method.GET;
        headers: Headers = new Headers();
        body: string = "";
        timeout: int = 30000; // 30 seconds in ms
        followRedirects: bool = true;
        maxRedirects: int = 10;
        
        constructor(options: dict<string, any> = {}) {
            if "method" in options {
                this.method = options["method"] as Method;
            }
            
            if "headers" in options {
                if options["headers"] is Headers {
                    this.headers = options["headers"] as Headers;
                } else if options["headers"] is dict<string, string> {
                    this.headers = new Headers(options["headers"] as dict<string, string>);
                }
            }
            
            if "body" in options {
                this.body = options["body"] as string;
            }
            
            if "timeout" in options {
                this.timeout = options["timeout"] as int;
            }
            
            if "followRedirects" in options {
                this.followRedirects = options["followRedirects"] as bool;
            }
            
            if "maxRedirects" in options {
                this.maxRedirects = options["maxRedirects"] as int;
            }
        }
    }
    
    // HTTP client class
    export class Client {
        private baseUrl: string = "";
        private defaultHeaders: Headers = new Headers();
        
        constructor(baseUrl: string = "", defaultHeaders: Headers = new Headers()) {
            this.baseUrl = baseUrl;
            this.defaultHeaders = defaultHeaders;
        }
        
        def request(url: string, options: RequestOptions = new RequestOptions()) -> Response {
            // Prepare the complete URL
            let fullUrl = url;
            if this.baseUrl != "" && !url.startsWith("http://") && !url.startsWith("https://") {
                if this.baseUrl.endsWith("/") && url.startsWith("/") {
                    fullUrl = this.baseUrl + url.substring(1);
                } else if !this.baseUrl.endsWith("/") && !url.startsWith("/") {
                    fullUrl = this.baseUrl + "/" + url;
                } else {
                    fullUrl = this.baseUrl + url;
                }
            }
            
            // Merge headers
            let mergedHeaders = new Headers();
            this.defaultHeaders.forEach((name, value) => {
                mergedHeaders.set(name, value);
            });
            
            options.headers.forEach((name, value) => {
                mergedHeaders.set(name, value);
            });
            
            // Call the extern function to make the HTTP request
            @extern("http", "request")
            def _http_request(
                url: string,
                method: int,
                headers: dict<string, string>,
                body: string,
                timeout: int,
                followRedirects: bool,
                maxRedirects: int
            ) -> dict<string, any>;
            
            let result = _http_request(
                fullUrl,
                options.method as int,
                mergedHeaders.toMap(),
                options.body,
                options.timeout,
                options.followRedirects,
                options.maxRedirects
            );
            
            // Extract response values
            let status = result["status"] as int;
            let statusText = result["statusText"] as string;
            let headers = new Headers(result["headers"] as dict<string, string>);
            let body = result["body"] as string;
            
            return new Response(status, statusText, headers, body);
        }
        
        def get(url: string, headers: Headers = new Headers()) -> Response {
            let options = new RequestOptions({
                "method": Method.GET,
                "headers": headers
            });
            
            return this.request(url, options);
        }
        
        def post(url: string, body: string, headers: Headers = new Headers()) -> Response {
            let options = new RequestOptions({
                "method": Method.POST,
                "headers": headers,
                "body": body
            });
            
            if !headers.has("Content-Type") {
                options.headers.set("Content-Type", "application/json");
            }
            
            return this.request(url, options);
        }
        
        def put(url: string, body: string, headers: Headers = new Headers()) -> Response {
            let options = new RequestOptions({
                "method": Method.PUT,
                "headers": headers,
                "body": body
            });
            
            if !headers.has("Content-Type") {
                options.headers.set("Content-Type", "application/json");
            }
            
            return this.request(url, options);
        }
        
        def delete(url: string, headers: Headers = new Headers()) -> Response {
            let options = new RequestOptions({
                "method": Method.DELETE,
                "headers": headers
            });
            
            return this.request(url, options);
        }
        
        def head(url: string, headers: Headers = new Headers()) -> Response {
            let options = new RequestOptions({
                "method": Method.HEAD,
                "headers": headers
            });
            
            return this.request(url, options);
        }
        
        def patch(url: string, body: string, headers: Headers = new Headers()) -> Response {
            let options = new RequestOptions({
                "method": Method.PATCH,
                "headers": headers,
                "body": body
            });
            
            if !headers.has("Content-Type") {
                options.headers.set("Content-Type", "application/json");
            }
            
            return this.request(url, options);
        }
    }
    
    // Helper functions
    
    // Create a JSON string from an object
    export def jsonStringify(value: any) -> string {
        @extern("json", "stringify")
        def _json_stringify(value: any) -> string;
        
        return _json_stringify(value);
    }
    
    // Parse a JSON string into an object
    export def jsonParse<T>(text: string) -> T {
        @extern("json", "parse")
        def _json_parse(text: string) -> T;
        
        return _json_parse(text);
    }
    
    // URL encode a string
    export def encodeUri(uri: string) -> string {
        @extern("url", "encode")
        def _url_encode(uri: string) -> string;
        
        return _url_encode(uri);
    }
    
    // URL decode a string
    export def decodeUri(uri: string) -> string {
        @extern("url", "decode")
        def _url_decode(uri: string) -> string;
        
        return _url_decode(uri);
    }
    
    // Create query string from parameters
    export def buildQueryString(params: dict<string, string>) -> string {
        let parts = new list<string>();
        
        for key, value in params {
            parts.push(encodeUri(key) + "=" + encodeUri(value));
        }
        
        if parts.length() == 0 {
            return "";
        }
        
        return "?" + parts.join("&");
    }
    
    // Parse query string into parameters
    export def parseQueryString(queryString: string) -> dict<string, string> {
        let result = new dict<string, string>();
        
        // Remove leading ? if present
        if queryString.startsWith("?") {
            queryString = queryString.substring(1);
        }
        
        // Empty query string
        if queryString == "" {
            return result;
        }
        
        let pairs = queryString.split("&");
        for pair in pairs {
            let keyValue = pair.split("=");
            
            if keyValue.length() == 2 {
                let key = decodeUri(keyValue[0]);
                let value = decodeUri(keyValue[1]);
                result[key] = value;
            } else if keyValue.length() == 1 {
                let key = decodeUri(keyValue[0]);
                result[key] = "";
            }
        }
        
        return result;
    }
    
    // Global HTTP client instance
    export const client = new Client();
    
    // Convenience methods using the global client
    export def get(url: string, headers: Headers = new Headers()) -> Response {
        return client.get(url, headers);
    }
    
    export def post(url: string, body: string, headers: Headers = new Headers()) -> Response {
        return client.post(url, body, headers);
    }
    
    export def put(url: string, body: string, headers: Headers = new Headers()) -> Response {
        return client.put(url, body, headers);
    }
    
    export def delete(url: string, headers: Headers = new Headers()) -> Response {
        return client.delete(url, headers);
    }
    
    export def head(url: string, headers: Headers = new Headers()) -> Response {
        return client.head(url, headers);
    }
    
    export def patch(url: string, body: string, headers: Headers = new Headers()) -> Response {
        return client.patch(url, body, headers);
    }
} 
