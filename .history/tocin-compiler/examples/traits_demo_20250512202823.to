// Example Tocin program demonstrating traits and interfaces

// Define an interface for objects that can be converted to a string
interface ToString {
    def toString() -> string;
}

// Define an interface for objects that can be compared for equality
interface Equatable {
    def equals(other: Self) -> bool;
}

// Define an interface for objects that can be ordered
interface Comparable extends Equatable {  // Comparable extends Equatable
    def lessThan(other: Self) -> bool;
    def greaterThan(other: Self) -> bool;
    
    // Default implementation using lessThan
    def lessThanOrEqual(other: Self) -> bool {
        return self.lessThan(other) || self.equals(other);
    }
    
    // Default implementation using lessThan
    def greaterThanOrEqual(other: Self) -> bool {
        return self.greaterThan(other) || self.equals(other);
    }
}

// Define a Point class
class Point implements ToString, Comparable {
    property x: int;
    property y: int;
    
    // Constructor
    def initialize(x: int, y: int) {
        self.x = x;
        self.y = y;
    }
    
    // Implement ToString interface
    def toString() -> string {
        return "(" + self.x.toString() + ", " + self.y.toString() + ")";
    }
    
    // Implement Equatable interface
    def equals(other: Point) -> bool {
        return self.x == other.x && self.y == other.y;
    }
    
    // Implement Comparable interface (Manhattan distance from origin)
    def lessThan(other: Point) -> bool {
        let selfDist = Math.abs(self.x) + Math.abs(self.y);
        let otherDist = Math.abs(other.x) + Math.abs(other.y);
        return selfDist < otherDist;
    }
    
    def greaterThan(other: Point) -> bool {
        let selfDist = Math.abs(self.x) + Math.abs(self.y);
        let otherDist = Math.abs(other.x) + Math.abs(other.y);
        return selfDist > otherDist;
    }
}

// Define a generic function that works with any ToString implementor
def printValue<T : ToString>(value: T) -> void {
    println(value.toString());
}

// Define a generic function that works with any Comparable implementor
def max<T : Comparable>(a: T, b: T) -> T {
    if (a.greaterThan(b)) {
        return a;
    } else {
        return b;
    }
}

// Generic sorting function for any type that implements Comparable
def sort<T : Comparable>(array: Array<T>) -> Array<T> {
    // Simple bubble sort implementation
    let result = array.slice(); // Create a copy
    let n = result.length;
    
    for (let i = 0; i < n; i++) {
        for (let j = 0; j < n - i - 1; j++) {
            if (result[j].greaterThan(result[j + 1])) {
                // Swap elements
                let temp = result[j];
                result[j] = result[j + 1];
                result[j + 1] = temp;
            }
        }
    }
    
    return result;
}

def main() -> int {
    // Create some points
    let p1 = new Point(3, 4);
    let p2 = new Point(1, 2);
    let p3 = new Point(5, 12);
    
    // Use the ToString implementation
    printValue(p1);  // Outputs: (3, 4)
    
    // Use the Equatable implementation
    println("p1 equals p2: " + p1.equals(p2).toString());  // Outputs: p1 equals p2: false
    
    // Use the Comparable implementation
    println("p1 less than p2: " + p1.lessThan(p2).toString());  // Based on Manhattan distance
    
    // Use the generic max function
    let furthestPoint = max(p1, p3);
    println("Furthest point: " + furthestPoint.toString());  // Should be p3 (5, 12)
    
    // Use the generic sort function
    let points = [p1, p2, p3];
    let sortedPoints = sort(points);
    
    println("Sorted points (by distance from origin):");
    for (let point of sortedPoints) {
        printValue(point);
    }
    
    return 0;
}
