// Advanced Tocin language features example

// Define a Point class
class Point {
    let x: float;
    let y: float;
    
    def init(x: float, y: float) {
        self.x = x;
        self.y = y;
    }
    
    def distance(other: Point) -> float {
        let dx: float = self.x - other.x;
        let dy: float = self.y - other.y;
        return sqrt(dx * dx + dy * dy);
    }
    
    def toString() -> string {
        return "Point(" + toString(self.x) + ", " + toString(self.y) + ")";
    }
}

// Generic function for map operation
def map<T, U>(items: list<T>, fn: lambda (T) -> U) -> list<U> {
    let result: list<U> = [];
    for item in items {
        result.append(fn(item));
    }
    return result;
}

// Define a Shape enum
enum Shape {
    Circle(Point, float),  // center, radius
    Rectangle(Point, Point)  // top-left, bottom-right
}

// Calculate area using pattern matching
def area(shape: Shape) -> float {
    match shape {
        case Shape.Circle(center, radius) {
            return 3.14159 * radius * radius;
        }
        case Shape.Rectangle(topLeft, bottomRight) {
            let width: float = bottomRight.x - topLeft.x;
            let height: float = bottomRight.y - topLeft.y;
            return width * height;
        }
    }
}

def main() -> int {
    // Create some points
    let p1: Point = Point(1.0, 2.0);
    let p2: Point = Point(4.0, 6.0);
    
    print_string("Distance between points: ");
    print_float(p1.distance(p2));
    println();
    
    // Use the map function with a lambda
    let numbers: list<int> = [1, 2, 3, 4, 5];
    let squares: list<int> = map(numbers, lambda (x: int) -> int { x * x });
    
    print_string("Squares: ");
    for n in squares {
        print_int(n);
        print_string(" ");
    }
    println();
    
    // Pattern matching with shapes
    let circle: Shape = Shape.Circle(Point(0.0, 0.0), 5.0);
    let rectangle: Shape = Shape.Rectangle(Point(0.0, 0.0), Point(4.0, 3.0));
    
    print_string("Circle area: ");
    print_float(area(circle));
    println();
    
    print_string("Rectangle area: ");
    print_float(area(rectangle));
    println();
    
    return 0;
} 
