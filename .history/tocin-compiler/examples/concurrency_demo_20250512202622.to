// Example Tocin program demonstrating concurrency with coroutines and channels

// Import necessary modules
import concurrency.channel;
import concurrency.coroutine;
import system.time;

// Simple function to be run as a coroutine
def sayHello(name: string, delayMs: int) -> void {
    // Sleep for the specified duration
    time.sleep(delayMs);
    println("Hello, " + name + "!");
}

// Function that demonstrates a producer-consumer pattern with channels
def producerConsumer() -> void {
    // Create a buffered channel with capacity 5
    let jobs = new Channel<int>(5);
    let results = new Channel<string>(5);
    
    // Start worker coroutines
    for (let i = 1; i <= 4; i++) {
        coroutine.spawn(worker, i, jobs, results);
    }
    
    // Send jobs to the workers
    for (let i = 1; i <= 10; i++) {
        println("Sending job " + i.toString());
        jobs.send(i);
    }
    
    // Close the jobs channel to signal no more jobs
    jobs.close();
    
    // Collect results from the workers
    for (let i = 1; i <= 10; i++) {
        let result = results.receive();
        println("Received result: " + result);
    }
    
    println("All jobs processed");
}

// Worker function that processes jobs from a channel
def worker(id: int, jobs: Channel<int>, results: Channel<string>) -> void {
    while (true) {
        // Try to receive a job from the jobs channel
        let job = jobs.tryReceive();
        
        if (job != null) {
            println("Worker " + id.toString() + " processing job " + job.toString());
            
            // Simulate work by sleeping
            time.sleep(job * 100);
            
            // Send the result back
            let result = "Result of job " + job.toString() + " processed by worker " + id.toString();
            results.send(result);
        } else {
            // No more jobs, exit the loop
            println("Worker " + id.toString() + " done");
            break;
        }
    }
}

// Function that demonstrates the select statement
def selectDemo() -> void {
    let c1 = new Channel<string>();
    let c2 = new Channel<string>();
    
    // Send values on the channels after a delay
    coroutine.spawn(() => {
        time.sleep(1000);
        c1.send("one");
    });
    
    coroutine.spawn(() => {
        time.sleep(2000);
        c2.send("two");
    });
    
    // Use select to wait for either channel to receive a value
    for (let i = 1; i <= 3; i++) {
        let result = Channel.select([
            c1.asReceiver(),
            c2.asReceiver(),
            time.timeout(500).asReceiver()
        ]);
        
        if (result.index == 0) {
            println("Received " + result.value + " from c1");
        } else if (result.index == 1) {
            println("Received " + result.value + " from c2");
        } else if (result.index == 2) {
            println("Timeout!");
        }
        
        time.sleep(500);
    }
}

// Fibonacci generator using channels
def fibonacci(n: int, c: Channel<int>) -> void {
    let x = 0;
    let y = 1;
    
    for (let i = 0; i < n; i++) {
        c.send(x);
        let z = x + y;
        x = y;
        y = z;
    }
    
    c.close();
}

def main() -> int {
    println("=== Coroutine Demo ===");
    
    // Start coroutines
    coroutine.spawn(sayHello, "Alice", 100);
    coroutine.spawn(sayHello, "Bob", 200);
    sayHello("Charlie", 0);  // This runs in the main coroutine
    
    // Wait for all coroutines to finish
    time.sleep(300);
    
    println("\n=== Producer-Consumer Demo ===");
    producerConsumer();
    
    println("\n=== Select Demo ===");
    selectDemo();
    
    println("\n=== Fibonacci Generator Demo ===");
    let c = new Channel<int>();
    coroutine.spawn(fibonacci, 10, c);
    
    // Receive and print values from the channel
    while (true) {
        let value = c.tryReceive();
        if (value != null) {
            println(value.toString());
        } else {
            break;
        }
    }
    
    return 0;
} 
