cmake_minimum_required(VERSION 3.16)
project(Tocin LANGUAGES C CXX)

# Set C++ standard to C++17 for better compatibility
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Enable verbose output for debugging
set(CMAKE_VERBOSE_MAKEFILE ON)

# Add compiler flags and definitions
add_definitions(-D_WIN32_WINNT=0x0601)
add_definitions(-DWIN32_LEAN_AND_MEAN)
add_definitions(-DNOMINMAX)
add_definitions(-D_CRT_SECURE_NO_WARNINGS)
add_definitions(-D__STDC_CONSTANT_MACROS)
add_definitions(-D__STDC_FORMAT_MACROS)
add_definitions(-D__STDC_LIMIT_MACROS)

# -------------------------
# ZLIB Integration
# -------------------------
find_package(ZLIB REQUIRED)
include_directories(${ZLIB_INCLUDE_DIRS})

# -------------------------
# LLVM Integration
# -------------------------
set(LLVM_DIR "C:/msys64/mingw64/lib/cmake/llvm")
find_package(LLVM REQUIRED CONFIG)

if(LLVM_FOUND)
    message(STATUS "Found LLVM version ${LLVM_PACKAGE_VERSION}")
    include_directories(${LLVM_INCLUDE_DIRS})
    add_definitions(${LLVM_DEFINITIONS})
    link_directories(${LLVM_LIBRARY_DIRS})
    
    # Add additional LLVM include directories for better header discovery
    include_directories(
        ${LLVM_INCLUDE_DIRS}/llvm
        ${LLVM_INCLUDE_DIRS}/llvm/Support
        ${LLVM_INCLUDE_DIRS}/llvm/IR
        ${LLVM_INCLUDE_DIRS}/llvm/ExecutionEngine
    )
    
    # Map LLVM components
    llvm_map_components_to_libnames(llvm_libs
        core
        support
        irreader
        codegen
        mc
        mcparser
        passes
        target
        x86codegen
        x86asmparser
        x86desc
        x86info
        asmprinter
        analysis
        transformutils
        instcombine
        scalaropts
        ExecutionEngine
        MCJIT
        OrcJIT
        RuntimeDyld
        native
    )
else()
    message(FATAL_ERROR "LLVM not found. Please ensure LLVM is installed.")
endif()

# -------------------------
# Python Integration
# -------------------------
find_package(Python COMPONENTS Interpreter Development)
if(Python_FOUND)
    include_directories(${Python_INCLUDE_DIRS})
    add_definitions(-DWITH_PYTHON)
    message(STATUS "Python found at: ${Python_EXECUTABLE}")
else()
    message(WARNING "Python not found. Python-related functionality will be disabled.")
endif()

# -------------------------
# V8 Integration
# -------------------------
find_path(V8_INCLUDE_DIR v8.h HINTS "C:/msys64/mingw64/include")
find_library(V8_LIBRARY NAMES v8 v8.dll.a libv8 libv8.dll.a HINTS "C:/msys64/mingw64/lib")

if(V8_INCLUDE_DIR AND V8_LIBRARY AND NOT V8_LIBRARY STREQUAL "V8_LIBRARY-NOTFOUND")
    set(V8_FOUND TRUE)
    message(STATUS "Found V8 headers in: ${V8_INCLUDE_DIR}")
    message(STATUS "Found V8 library: ${V8_LIBRARY}")
    include_directories(${V8_INCLUDE_DIR})
    add_definitions(-DWITH_V8)
else()
    set(V8_FOUND FALSE)
    message(WARNING "V8 not found. V8-related functionality will be disabled.")
endif()

# -------------------------
# V8 Platform Dependencies
# -------------------------
if(V8_FOUND)
    set(V8_PLATFORM_LIBRARIES
        ${V8_LIBRARY}
    )
    
    find_library(V8_PLATFORM_LIBRARY 
                NAMES v8_libplatform v8_libplatform.dll.a libv8_libplatform libv8_libplatform.dll.a 
                HINTS "C:/msys64/mingw64/lib")
    if(V8_PLATFORM_LIBRARY)
        list(APPEND V8_PLATFORM_LIBRARIES ${V8_PLATFORM_LIBRARY})
    endif()
    
    find_library(V8_BASE_LIBRARY 
                NAMES v8_libbase v8_libbase.dll.a libv8_libbase libv8_libbase.dll.a 
                HINTS "C:/msys64/mingw64/lib")
    if(V8_BASE_LIBRARY)
        list(APPEND V8_PLATFORM_LIBRARIES ${V8_BASE_LIBRARY})
    endif()
endif()

# -------------------------
# FFI (libffi) Integration
# -------------------------
find_package(PkgConfig REQUIRED)
pkg_check_modules(FFI REQUIRED libffi)
include_directories(${FFI_INCLUDE_DIRS})

# -------------------------
# zstd Integration
# -------------------------
find_package(zstd)
if(zstd_FOUND)
    include_directories(${zstd_INCLUDE_DIRS})
    add_definitions(-DWITH_ZSTD)
else()
    message(WARNING "zstd not found. zstd compression functionality will be disabled.")
endif()

# -------------------------
# LibXml2 Integration
# -------------------------
find_package(LibXml2)
if(LibXml2_FOUND)
    include_directories(${LibXml2_INCLUDE_DIRS})
    add_definitions(-DWITH_XML)
else()
    message(WARNING "LibXml2 not found. XML functionality will be disabled.")
endif()

# -------------------------
# Thread Support
# -------------------------
find_package(Threads REQUIRED)
if(THREADS_HAVE_PTHREAD_ARG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
endif()

# -------------------------
# Source Files
# -------------------------
set(SOURCES
    src/main.cpp
)

# Add source files conditionally
if(EXISTS "${CMAKE_SOURCE_DIR}/src/lexer/lexer.cpp")
    list(APPEND SOURCES src/lexer/lexer.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/lexer/token.cpp")
    list(APPEND SOURCES src/lexer/token.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/parser/parser.cpp")
    list(APPEND SOURCES src/parser/parser.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/error/error_handler.cpp")
    list(APPEND SOURCES src/error/error_handler.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/type/type_checker.cpp")
    list(APPEND SOURCES src/type/type_checker.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/codegen/ir_generator.cpp")
    list(APPEND SOURCES src/codegen/ir_generator.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/compiler/compilation_context.cpp")
    list(APPEND SOURCES src/compiler/compilation_context.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/compiler/compiler.cpp")
    list(APPEND SOURCES src/compiler/compiler.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/compiler/stdlib.cpp")
    list(APPEND SOURCES src/compiler/stdlib.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/ffi/ffi_cpp.cpp")
    list(APPEND SOURCES src/ffi/ffi_cpp.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/ffi/ffi_javascript.cpp" AND V8_FOUND)
    list(APPEND SOURCES src/ffi/ffi_javascript.cpp)
endif()

if(EXISTS "${CMAKE_SOURCE_DIR}/src/ffi/ffi_python.cpp" AND Python_FOUND)
    list(APPEND SOURCES src/ffi/ffi_python.cpp)
endif()

# Create executable
add_executable(tocin ${SOURCES})

# Include Project Headers
target_include_directories(tocin PRIVATE
    ${CMAKE_SOURCE_DIR}/src
    ${LLVM_INCLUDE_DIRS}
    ${ZLIB_INCLUDE_DIRS}
    C:/msys64/mingw64/include
    C:/msys64/mingw64/include/c++/15.1.0
    C:/msys64/mingw64/include/c++/15.1.0/x86_64-w64-mingw32
    C:/msys64/mingw64/include/c++/15.1.0/backward
    C:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/15.1.0/include
    C:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/15.1.0/include-fixed
    C:/msys64/mingw64/x86_64-w64-mingw32/include
)

# Add optional includes
if(Python_FOUND)
    target_include_directories(tocin PRIVATE ${Python_INCLUDE_DIRS})
endif()

if(V8_FOUND)
    target_include_directories(tocin PRIVATE ${V8_INCLUDE_DIR})
endif()

if(LibXml2_FOUND)
    target_include_directories(tocin PRIVATE ${LibXml2_INCLUDE_DIRS})
endif()

if(zstd_FOUND)
    target_include_directories(tocin PRIVATE ${zstd_INCLUDE_DIRS})
endif()

# -------------------------
# Linking Libraries
# -------------------------
set(LINK_LIBS
    -lmingw32
    ${llvm_libs}
    ${ZLIB_LIBRARIES}
    ${FFI_LIBRARIES}
    -lstdc++
    -lpthread
    -lws2_32
    -ladvapi32
    -lshell32
    -luser32
    -lkernel32
    ${CMAKE_THREAD_LIBS_INIT}
)

# Add optional libraries
if(Python_FOUND)
    list(APPEND LINK_LIBS ${Python_LIBRARIES})
endif()

if(V8_FOUND)
    list(APPEND LINK_LIBS ${V8_PLATFORM_LIBRARIES})
endif()

if(LibXml2_FOUND)
    list(APPEND LINK_LIBS ${LibXml2_LIBRARIES})
endif()

if(zstd_FOUND)
    list(APPEND LINK_LIBS ${zstd_LIBRARIES})
endif()

target_link_libraries(tocin PRIVATE ${LINK_LIBS})

# -------------------------
# CPack Installer Setup
# -------------------------
include(InstallRequiredSystemLibraries)
set(CPACK_PACKAGE_VERSION_MAJOR "1")
set(CPACK_PACKAGE_VERSION_MINOR "0")
set(CPACK_PACKAGE_VERSION_PATCH "0")
set(CPACK_GENERATOR "NSIS")
set(CPACK_PACKAGE_NAME "tocin")
set(CPACK_PACKAGE_VENDOR "Afolabi_Oluwatosin")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Tocin Compiler")
set(CPACK_PACKAGE_INSTALL_DIRECTORY "ToCin")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_PACKAGE_ICON "${CMAKE_CURRENT_SOURCE_DIR}\\\\Tocin_Logo.ico")

# NSIS Specific Settings
set(CPACK_NSIS_MODIFY_PATH ON)
set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
set(CPACK_NSIS_DISPLAY_NAME "Tocin Compiler")
set(CPACK_NSIS_PACKAGE_NAME "Tocin Compiler")
set(CPACK_NSIS_HELP_LINK "https://tocin-support.vercel.app/support")
set(CPACK_NSIS_URL_INFO_ABOUT "https://tocin-support.vercel.app")
set(CPACK_NSIS_MUI_ICON "${CMAKE_CURRENT_SOURCE_DIR}/Tocin_Logo.ico")
set(CPACK_NSIS_MUI_UNIICON "${CMAKE_CURRENT_SOURCE_DIR}/Tocin_Logo.ico")
set(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\tocin.exe")
set(CPACK_NSIS_EXECUTABLES_DIRECTORY "bin")

# Request Admin privileges for installation
set(CPACK_NSIS_ENABLE_UNINSTALL_BEFORE_INSTALL ON)
set(CPACK_NSIS_EXECUTABLES_DIRECTORY "bin")
set(CPACK_NSIS_MUI_FINISHPAGE_RUN "bin\\\\tocin.exe")
set(CPACK_NSIS_INSTALL_ROOT "$PROGRAMFILES")

# NSIS Extra installation commands with admin privileges
set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS
    "SetShellVarContext all\n                     # Request admin privileges
     SetOutPath \"$INSTDIR\\bin\"\n
     CreateDirectory \"$SMPROGRAMS\\tocin\"\n
     CreateShortCut \"$SMPROGRAMS\\tocin\\tocin.lnk\" \"$INSTDIR\\bin\\tocin.exe\"\n
     CreateShortCut \"$DESKTOP\\tocin.lnk\" \"$INSTDIR\\bin\\tocin.exe\"\n
     WriteRegStr HKLM \"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" \"PATH\" \"$INSTDIR\\bin;$PATH\"\n
     System::Call 'Shell32::SHChangeNotify(i 0x8000000, i 0, i 0, i 0)'\n    # Notify Windows of the PATH change
     SetRegView 64\n                                                        # For 64-bit registry view
     WriteRegExpandStr HKLM \"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" \"TOCIN_HOME\" \"$INSTDIR\"
    "
)

# NSIS Extra uninstall commands with admin privileges
set(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS
    "SetShellVarContext all\n                      # Request admin privileges
     Delete \"$DESKTOP\\tocin.lnk\"\n
     RMDir /r \"$SMPROGRAMS\\tocin\"\n
     DeleteRegValue HKLM \"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment\" \"TOCIN_HOME\"\n
     ${un.EnvVarUpdate} $0 \"PATH\" \"R\" \"HKLM\" \"$INSTDIR\\bin\"\n       # Remove from PATH
     System::Call 'Shell32::SHChangeNotify(i 0x8000000, i 0, i 0, i 0)'\n    # Notify Windows of the PATH change
    "
)

# -------------------------
# Install required DLLs
# -------------------------
install(TARGETS tocin DESTINATION bin COMPONENT Applications)

# Base system DLLs
install(FILES
    "C:/msys64/mingw64/bin/libwinpthread-1.dll"
    "C:/msys64/mingw64/bin/libstdc++-6.dll"
    "C:/msys64/mingw64/bin/libgcc_s_seh-1.dll"
    DESTINATION bin COMPONENT Applications
)

# Python DLLs (if Python is found)
if(Python_FOUND)
    if(EXISTS ${Python_EXECUTABLE})
        get_filename_component(PYTHON_DIR ${Python_EXECUTABLE} DIRECTORY)
        file(GLOB PYTHON_DLLS "${PYTHON_DIR}/python*.dll")
        install(FILES ${PYTHON_DLLS} DESTINATION bin COMPONENT Applications)
    endif()
endif()

# V8 DLLs (if V8 is found)
if(V8_FOUND)
    install(FILES
        "C:/msys64/mingw64/bin/libv8.dll"
        DESTINATION bin COMPONENT Applications
    )
    # Try to find additional V8 DLLs
    if(EXISTS "C:/msys64/mingw64/bin/libv8_libbase.dll")
        install(FILES "C:/msys64/mingw64/bin/libv8_libbase.dll" DESTINATION bin COMPONENT Applications)
    endif()
    if(EXISTS "C:/msys64/mingw64/bin/libv8_libplatform.dll")
        install(FILES "C:/msys64/mingw64/bin/libv8_libplatform.dll" DESTINATION bin COMPONENT Applications)
    endif()
endif()

# ICU DLLs (for V8)
if(EXISTS "C:/msys64/mingw64/bin/libicudt*.dll")
    file(GLOB ICU_DLLS "C:/msys64/mingw64/bin/libicudt*.dll")
    install(FILES ${ICU_DLLS} DESTINATION bin COMPONENT Applications)
endif()
if(EXISTS "C:/msys64/mingw64/bin/libicuin*.dll")
    file(GLOB ICU_DLLS "C:/msys64/mingw64/bin/libicuin*.dll")
    install(FILES ${ICU_DLLS} DESTINATION bin COMPONENT Applications)
endif()
if(EXISTS "C:/msys64/mingw64/bin/libicuuc*.dll")
    file(GLOB ICU_DLLS "C:/msys64/mingw64/bin/libicuuc*.dll")
    install(FILES ${ICU_DLLS} DESTINATION bin COMPONENT Applications)
endif()

# zlib DLLs
install(FILES "C:/msys64/mingw64/bin/libzlib.dll" DESTINATION bin COMPONENT Applications)

# zstd DLLs (if zstd is found)
if(zstd_FOUND)
    if(EXISTS "C:/msys64/mingw64/bin/libzstd.dll")
        install(FILES "C:/msys64/mingw64/bin/libzstd.dll" DESTINATION bin COMPONENT Applications)
    endif()
endif()

# LibXml2 DLLs (if LibXml2 is found)
if(LibXml2_FOUND)
    if(EXISTS "C:/msys64/mingw64/bin/libxml2-2.dll")
        install(FILES "C:/msys64/mingw64/bin/libxml2-2.dll" DESTINATION bin COMPONENT Applications)
    endif()
endif()

# FFI DLLs
if(EXISTS "C:/msys64/mingw64/bin/libffi-*.dll")
    file(GLOB FFI_DLLS "C:/msys64/mingw64/bin/libffi-*.dll")
    install(FILES ${FFI_DLLS} DESTINATION bin COMPONENT Applications)
endif()

# Additional documentation and examples
install(FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/README.md"
    DESTINATION doc COMPONENT Documentation
)

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/examples")
    install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/examples" DESTINATION . COMPONENT Examples)
endif()

# -------------------------
# CPack Final Setup
# -------------------------
set(CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME "Tocin Compiler Application")
set(CPACK_COMPONENT_DOCUMENTATION_DISPLAY_NAME "Documentation")
set(CPACK_COMPONENT_EXAMPLES_DISPLAY_NAME "Example Programs")
set(CPACK_COMPONENT_APPLICATIONS_DESCRIPTION "Main executable and required libraries")
set(CPACK_COMPONENT_DOCUMENTATION_DESCRIPTION "Documentation files")
set(CPACK_COMPONENT_EXAMPLES_DESCRIPTION "Example Tocin programs")

set(CPACK_COMPONENT_APPLICATIONS_REQUIRED TRUE)
set(CPACK_COMPONENT_EXAMPLES_DEPENDS applications)
set(CPACK_COMPONENT_DOCUMENTATION_DEPENDS applications)

include(CPack)
