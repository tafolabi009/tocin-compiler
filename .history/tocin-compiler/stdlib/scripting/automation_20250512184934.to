/**
 * Tocin Standard Library - Scripting Module (Automation)
 * Provides utilities for task automation and script execution.
 */

import fs;
import os;
import process;

/**
 * TaskRunner - Manages the execution of automated tasks.
 */
class TaskRunner {
    property tasks: Map<string, Task>;
    
    def initialize() {
        self.tasks = {};
    }
    
    /**
     * Register a new task with the runner.
     * @param name The unique name of the task
     * @param task The task to register
     */
    def register(name: string, task: Task) {
        if (self.tasks[name]) {
            console.warn(`Task '${name}' already exists. Overwriting.`);
        }
        self.tasks[name] = task;
    }
    
    /**
     * Run a registered task by name.
     * @param name The name of the task to run
     * @param args Optional arguments to pass to the task
     * @returns The task result
     */
    async def run(name: string, args: any? = null) -> any {
        let task = self.tasks[name];
        if (!task) {
            throw Error(`Task '${name}' not found.`);
        }
        
        console.log(`Running task: ${name}`);
        let startTime = Date.now();
        
        try {
            let result = await task.execute(args);
            let endTime = Date.now();
            let duration = (endTime - startTime) / 1000; // seconds
            
            console.log(`Task '${name}' completed in ${duration.toFixed(2)}s`);
            return result;
        } catch (error) {
            console.error(`Task '${name}' failed: ${error}`);
            throw error;
        }
    }
    
    /**
     * Run a sequence of tasks in order.
     * @param taskNames Array of task names to run in sequence
     * @param args Optional arguments to pass to each task
     * @returns Array of task results
     */
    async def runSequence(taskNames: Array<string>, args: any? = null) -> Array<any> {
        let results = [];
        
        for (let name of taskNames) {
            let result = await self.run(name, args);
            results.push(result);
        }
        
        return results;
    }
    
    /**
     * Run tasks in parallel.
     * @param taskNames Array of task names to run in parallel
     * @param args Optional arguments to pass to each task
     * @returns Array of task results in the same order as taskNames
     */
    async def runParallel(taskNames: Array<string>, args: any? = null) -> Array<any> {
        let tasks = taskNames.map(name => self.tasks[name]);
        
        // Check if all tasks exist
        for (let i = 0; i < taskNames.length; i++) {
            if (!tasks[i]) {
                throw Error(`Task '${taskNames[i]}' not found.`);
            }
        }
        
        console.log(`Running ${taskNames.length} tasks in parallel: ${taskNames.join(", ")}`);
        let startTime = Date.now();
        
        // Run all tasks in parallel
        let promises = tasks.map((task, index) => {
            return task.execute(args).catch(error => {
                console.error(`Task '${taskNames[index]}' failed: ${error}`);
                throw error;
            });
        });
        
        let results = await Promise.all(promises);
        let endTime = Date.now();
        let duration = (endTime - startTime) / 1000; // seconds
        
        console.log(`All parallel tasks completed in ${duration.toFixed(2)}s`);
        return results;
    }
    
    /**
     * List all registered tasks.
     * @returns Array of task names
     */
    def listTasks() -> Array<string> {
        return Object.keys(self.tasks);
    }
    
    /**
     * Get information about a specific task.
     * @param name The name of the task
     * @returns Task information
     */
    def getTaskInfo(name: string) -> Map<string, any>? {
        let task = self.tasks[name];
        if (!task) {
            return null;
        }
        
        return {
            name: name,
            description: task.description,
            dependencies: task.dependencies
        };
    }
}

/**
 * Abstract Task class that all tasks should extend.
 */
abstract class Task {
    property description: string;
    property dependencies: Array<string>;
    
    def initialize(description: string = "", dependencies: Array<string> = []) {
        self.description = description;
        self.dependencies = dependencies;
    }
    
    /**
     * Execute the task logic.
     * @param args Optional arguments for the task
     * @returns Task result
     */
    abstract async def execute(args: any? = null) -> any;
}

/**
 * CommandTask - Executes a shell command.
 */
class CommandTask extends Task {
    property command: string;
    property options: Map<string, any>;
    
    def initialize(command: string, options: Map<string, any>? = null, 
                  description: string = "", dependencies: Array<string> = []) {
        super.initialize(description, dependencies);
        self.command = command;
        self.options = options ?? {
            cwd: process.cwd(),
            env: process.env,
            shell: true
        };
    }
    
    async def execute(args: any? = null) -> {stdout: string, stderr: string, exitCode: int} {
        let cmd = self.command;
        
        // Replace placeholders in command with args
        if (args && typeof args == "object") {
            for (let key in args) {
                cmd = cmd.replace(`{${key}}`, args[key].toString());
            }
        }
        
        console.log(`Executing command: ${cmd}`);
        return await process.exec(cmd, self.options);
    }
}

/**
 * FileTask - Performs operations on files.
 */
class FileTask extends Task {
    enum Operation {
        READ,
        WRITE,
        APPEND,
        DELETE,
        COPY,
        MOVE,
        MKDIR,
        RMDIR
    }
    
    property operation: Operation;
    property source: string;
    property destination: string?;
    property content: string?;
    property options: Map<string, any>;
    
    def initialize(operation: Operation, source: string, destination: string? = null, 
                  content: string? = null, options: Map<string, any>? = null,
                  description: string = "", dependencies: Array<string> = []) {
        super.initialize(description, dependencies);
        self.operation = operation;
        self.source = source;
        self.destination = destination;
        self.content = content;
        self.options = options ?? {};
    }
    
    async def execute(args: any? = null) -> any {
        let source = self.replacePlaceholders(self.source, args);
        let destination = self.destination ? self.replacePlaceholders(self.destination, args) : null;
        let content = self.content;
        
        if (content && typeof content == "string" && args) {
            content = self.replacePlaceholders(content, args);
        }
        
        switch (self.operation) {
            case Operation.READ:
                return fs.readFile(source, self.options.encoding ?? "utf8");
                
            case Operation.WRITE:
                if (!content) {
                    throw Error("Content must be provided for WRITE operation");
                }
                await fs.writeFile(source, content, self.options);
                return true;
                
            case Operation.APPEND:
                if (!content) {
                    throw Error("Content must be provided for APPEND operation");
                }
                await fs.appendFile(source, content, self.options);
                return true;
                
            case Operation.DELETE:
                await fs.unlink(source);
                return true;
                
            case Operation.COPY:
                if (!destination) {
                    throw Error("Destination must be provided for COPY operation");
                }
                await fs.copyFile(source, destination, self.options.flags);
                return true;
                
            case Operation.MOVE:
                if (!destination) {
                    throw Error("Destination must be provided for MOVE operation");
                }
                await fs.rename(source, destination);
                return true;
                
            case Operation.MKDIR:
                await fs.mkdir(source, { recursive: self.options.recursive ?? true });
                return true;
                
            case Operation.RMDIR:
                await fs.rmdir(source, { recursive: self.options.recursive ?? false });
                return true;
                
            default:
                throw Error(`Unknown operation: ${self.operation}`);
        }
    }
    
    private def replacePlaceholders(template: string, args: any?) -> string {
        if (!args) return template;
        
        let result = template;
        if (typeof args == "object") {
            for (let key in args) {
                result = result.replace(`{${key}}`, args[key].toString());
            }
        }
        return result;
    }
}

/**
 * ScriptTask - Executes a Tocin script file.
 */
class ScriptTask extends Task {
    property scriptPath: string;
    property options: Map<string, any>;
    
    def initialize(scriptPath: string, options: Map<string, any>? = null,
                  description: string = "", dependencies: Array<string> = []) {
        super.initialize(description, dependencies);
        self.scriptPath = scriptPath;
        self.options = options ?? {};
    }
    
    async def execute(args: any? = null) -> any {
        let scriptPath = self.scriptPath;
        
        // Replace placeholders in path with args
        if (args && typeof args == "object") {
            for (let key in args) {
                scriptPath = scriptPath.replace(`{${key}}`, args[key].toString());
            }
        }
        
        if (!fs.exists(scriptPath)) {
            throw Error(`Script not found: ${scriptPath}`);
        }
        
        console.log(`Executing script: ${scriptPath}`);
        
        // Import and execute the script module
        let module = await import(scriptPath);
        
        // Execute the main function if it exists
        if (typeof module.main == "function") {
            return module.main(args);
        } else {
            throw Error(`Script does not export a main function: ${scriptPath}`);
        }
    }
}

/**
 * FunctionTask - Executes a JavaScript/Tocin function.
 */
class FunctionTask extends Task {
    property func: fn(any?) -> any;
    
    def initialize(func: fn(any?) -> any, description: string = "", dependencies: Array<string> = []) {
        super.initialize(description, dependencies);
        self.func = func;
    }
    
    async def execute(args: any? = null) -> any {
        return await self.func(args);
    }
}

/**
 * Cron - Schedule tasks to run at specific intervals.
 */
class Cron {
    property scheduler: TaskScheduler;
    property schedules: Array<{id: string, task: string, schedule: string, active: bool}>;
    
    def initialize(scheduler: TaskScheduler) {
        self.scheduler = scheduler;
        self.schedules = [];
    }
    
    /**
     * Schedule a task to run at a specific interval using cron syntax.
     * @param taskName The name of the registered task
     * @param schedule Cron expression (e.g., "0 0 * * *" for daily at midnight)
     * @param args Optional arguments to pass to the task
     * @returns Schedule ID
     */
    def schedule(taskName: string, schedule: string, args: any? = null) -> string {
        let task = self.scheduler.runner.tasks[taskName];
        if (!task) {
            throw Error(`Task '${taskName}' not found.`);
        }
        
        let id = generateId();
        let job = self.scheduler.schedule(schedule, async () => {
            await self.scheduler.runner.run(taskName, args);
        });
        
        self.schedules.push({
            id: id,
            task: taskName,
            schedule: schedule,
            active: true
        });
        
        return id;
    }
    
    /**
     * Cancel a scheduled task.
     * @param id The schedule ID to cancel
     */
    def cancel(id: string) -> bool {
        let index = self.schedules.findIndex(s => s.id == id);
        if (index >= 0) {
            let schedule = self.schedules[index];
            self.scheduler.cancel(schedule.id);
            self.schedules.splice(index, 1);
            return true;
        }
        return false;
    }
    
    /**
     * List all scheduled tasks.
     * @returns Array of scheduled tasks
     */
    def list() -> Array<{id: string, task: string, schedule: string, active: bool}> {
        return self.schedules;
    }
    
    /**
     * Generate a unique ID for schedules.
     */
    private def generateId() -> string {
        let timestamp = Date.now().toString(36);
        let randomStr = Math.random().toString(36).substring(2, 8);
        return timestamp + randomStr;
    }
}

/**
 * TaskScheduler - Schedule tasks to run at specific times or intervals.
 */
class TaskScheduler {
    property runner: TaskRunner;
    property jobs: Map<string, any>; // Map of job IDs to scheduler jobs
    
    def initialize(runner: TaskRunner) {
        self.runner = runner;
        self.jobs = {};
    }
    
    /**
     * Schedule a function to run at specified intervals using cron syntax.
     * @param cronExpression Cron expression (e.g., "0 0 * * *" for daily at midnight)
     * @param callback Function to execute
     * @returns Job ID
     */
    def schedule(cronExpression: string, callback: fn() -> void) -> string {
        // This would typically use a library like node-cron or similar
        // For this example, we'll provide a simplified implementation
        
        let id = generateId();
        let active = true;
        
        // Parse the cron expression (simplified for this example)
        let parts = cronExpression.split(" ");
        if (parts.length !== 5) {
            throw Error("Invalid cron expression. Must have 5 parts (minute hour day month weekday)");
        }
        
        // Calculate next execution time
        let nextExecutionTime = self._calculateNextExecution(parts);
        
        // Schedule the job
        let timeoutId = setTimeout(() => {
            self._executeJob(id, callback, parts);
        }, nextExecutionTime - Date.now());
        
        self.jobs[id] = {
            expression: cronExpression,
            callback,
            timeoutId,
            active
        };
        
        return id;
    }
    
    /**
     * Cancel a scheduled job.
     * @param id The job ID to cancel
     */
    def cancel(id: string) -> bool {
        let job = self.jobs[id];
        if (job) {
            clearTimeout(job.timeoutId);
            delete self.jobs[id];
            return true;
        }
        return false;
    }
    
    /**
     * Pause a scheduled job.
     * @param id The job ID to pause
     */
    def pause(id: string) -> bool {
        let job = self.jobs[id];
        if (job && job.active) {
            clearTimeout(job.timeoutId);
            job.active = false;
            return true;
        }
        return false;
    }
    
    /**
     * Resume a paused job.
     * @param id The job ID to resume
     */
    def resume(id: string) -> bool {
        let job = self.jobs[id];
        if (job && !job.active) {
            let parts = job.expression.split(" ");
            let nextExecutionTime = self._calculateNextExecution(parts);
            
            job.timeoutId = setTimeout(() => {
                self._executeJob(id, job.callback, parts);
            }, nextExecutionTime - Date.now());
            
            job.active = true;
            return true;
        }
        return false;
    }
    
    /**
     * List all scheduled jobs.
     * @returns Array of job information
     */
    def list() -> Array<{id: string, expression: string, active: bool, nextExecution: Date}> {
        let result = [];
        
        for (let id in self.jobs) {
            let job = self.jobs[id];
            let parts = job.expression.split(" ");
            let nextExecution = self._calculateNextExecution(parts);
            
            result.push({
                id,
                expression: job.expression,
                active: job.active,
                nextExecution: new Date(nextExecution)
            });
        }
        
        return result;
    }
    
    /**
     * Execute a scheduled job and reschedule it.
     */
    private def _executeJob(id: string, callback: fn() -> void, parts: Array<string>) {
        let job = self.jobs[id];
        if (!job || !job.active) return;
        
        // Execute the callback
        try {
            callback();
        } catch (error) {
            console.error(`Error executing scheduled job ${id}: ${error}`);
        }
        
        // Reschedule the job
        let nextExecutionTime = self._calculateNextExecution(parts);
        job.timeoutId = setTimeout(() => {
            self._executeJob(id, callback, parts);
        }, nextExecutionTime - Date.now());
    }
    
    /**
     * Calculate the next execution time based on cron parts.
     * This is a simplified implementation.
     */
    private def _calculateNextExecution(parts: Array<string>) -> int {
        // This is a simplified implementation
        // A real implementation would parse all cron parts and calculate the next execution time
        
        let now = new Date();
        let next = new Date(now);
        
        // For this simplified version, we'll just set the next execution to be 1 minute from now
        next.setMinutes(now.getMinutes() + 1);
        
        return next.getTime();
    }
    
    /**
     * Generate a unique ID for jobs.
     */
    private def generateId() -> string {
        let timestamp = Date.now().toString(36);
        let randomStr = Math.random().toString(36).substring(2, 8);
        return timestamp + randomStr;
    }
}

/**
 * Watcher - Watch for file system changes and run tasks.
 */
class Watcher {
    property runner: TaskRunner;
    property watches: Map<string, {
        paths: Array<string>,
        task: string,
        args: any?,
        watcher: any
    }>;
    
    def initialize(runner: TaskRunner) {
        self.runner = runner;
        self.watches = {};
    }
    
    /**
     * Watch a file or directory for changes and run a task when changes occur.
     * @param paths Files or directories to watch
     * @param taskName Task to run on changes
     * @param args Arguments to pass to the task
     * @returns Watch ID
     */
    def watch(paths: string | Array<string>, taskName: string, args: any? = null) -> string {
        let task = self.runner.tasks[taskName];
        if (!task) {
            throw Error(`Task '${taskName}' not found.`);
        }
        
        let pathArray = Array.isArray(paths) ? paths : [paths];
        let id = generateId();
        
        // This would typically use fs.watch or a library like chokidar
        // For this example, we'll provide a simplified implementation
        let watcher = {
            close: () => {
                // Close the watcher
                // In a real implementation, this would call fs.watch close
            }
        };
        
        self.watches[id] = {
            paths: pathArray,
            task: taskName,
            args,
            watcher
        };
        
        console.log(`Watching ${pathArray.join(", ")} for changes. Will run task '${taskName}'.`);
        
        // In a real implementation, this would set up fs.watch for each path
        
        return id;
    }
    
    /**
     * Stop watching a specific watch.
     * @param id Watch ID to stop
     */
    def unwatch(id: string) -> bool {
        let watch = self.watches[id];
        if (watch) {
            watch.watcher.close();
            delete self.watches[id];
            return true;
        }
        return false;
    }
    
    /**
     * Stop all watches.
     */
    def unwatchAll() {
        for (let id in self.watches) {
            self.watches[id].watcher.close();
        }
        self.watches = {};
    }
    
    /**
     * List all active watches.
     * @returns Array of watch information
     */
    def list() -> Array<{id: string, paths: Array<string>, task: string}> {
        let result = [];
        
        for (let id in self.watches) {
            let watch = self.watches[id];
            result.push({
                id,
                paths: watch.paths,
                task: watch.task
            });
        }
        
        return result;
    }
    
    /**
     * Generate a unique ID for watches.
     */
    private def generateId() -> string {
        let timestamp = Date.now().toString(36);
        let randomStr = Math.random().toString(36).substring(2, 8);
        return timestamp + randomStr;
    }
}

/**
 * Create a new TaskRunner instance.
 */
def createTaskRunner() -> TaskRunner {
    return new TaskRunner();
}

/**
 * Example usage:
 * 
 * import scripting.automation;
 * 
 * // Create a task runner
 * let runner = automation.createTaskRunner();
 * 
 * // Create and register tasks
 * let buildTask = new automation.CommandTask("npm run build", null, "Build the project");
 * let testTask = new automation.CommandTask("npm test", null, "Run tests");
 * let cleanTask = new automation.CommandTask("rimraf dist", null, "Clean build directory");
 * 
 * runner.register("build", buildTask);
 * runner.register("test", testTask);
 * runner.register("clean", cleanTask);
 * 
 * // Run a sequence of tasks
 * await runner.runSequence(["clean", "build", "test"]);
 * 
 * // Set up file watching
 * let watcher = new automation.Watcher(runner);
 * watcher.watch("src/**/*.ts", "build");
 * 
 * // Schedule tasks using cron
 * let scheduler = new automation.TaskScheduler(runner);
 * let cron = new automation.Cron(scheduler);
 * cron.schedule("test", "0 0 * * *"); // Run tests daily at midnight
 */ 
