/**
 * Tocin Standard Library - GUI Core Module
 * Provides the foundation for building graphical user interfaces.
 */

import math.basic;
import math.geometry;

/**
 * Enumeration of basic colors
 */
enum Color {
    BLACK = 0x000000,
    WHITE = 0xFFFFFF,
    RED = 0xFF0000,
    GREEN = 0x00FF00,
    BLUE = 0x0000FF,
    YELLOW = 0xFFFF00,
    CYAN = 0x00FFFF,
    MAGENTA = 0xFF00FF,
    GRAY = 0x808080,
    LIGHT_GRAY = 0xC0C0C0,
    DARK_GRAY = 0x404040,
    TRANSPARENT = 0x00000000
}

/**
 * Color class with RGBA components
 */
class ColorRGBA {
    property r: float;  // Red component (0-1)
    property g: float;  // Green component (0-1)
    property b: float;  // Blue component (0-1)
    property a: float;  // Alpha component (0-1)
    
    def initialize(r: float = 0, g: float = 0, b: float = 0, a: float = 1) {
        self.r = math.clamp(r, 0, 1);
        self.g = math.clamp(g, 0, 1);
        self.b = math.clamp(b, 0, 1);
        self.a = math.clamp(a, 0, 1);
    }
    
    /**
     * Create a color from hex value
     */
    static def fromHex(hex: int, alpha: float = 1.0) -> ColorRGBA {
        let r = ((hex >> 16) & 0xFF) / 255.0;
        let g = ((hex >> 8) & 0xFF) / 255.0;
        let b = (hex & 0xFF) / 255.0;
        return new ColorRGBA(r, g, b, alpha);
    }
    
    /**
     * Convert color to hex value
     */
    def toHex() -> int {
        let ri = math.floor(self.r * 255) & 0xFF;
        let gi = math.floor(self.g * 255) & 0xFF;
        let bi = math.floor(self.b * 255) & 0xFF;
        return (ri << 16) | (gi << 8) | bi;
    }
    
    /**
     * Create a new color with adjusted brightness
     */
    def brighten(amount: float) -> ColorRGBA {
        return new ColorRGBA(
            math.clamp(self.r + amount, 0, 1),
            math.clamp(self.g + amount, 0, 1),
            math.clamp(self.b + amount, 0, 1),
            self.a
        );
    }
    
    /**
     * Mix this color with another color
     */
    def mix(color: ColorRGBA, t: float) -> ColorRGBA {
        t = math.clamp(t, 0, 1);
        return new ColorRGBA(
            self.r * (1 - t) + color.r * t,
            self.g * (1 - t) + color.g * t,
            self.b * (1 - t) + color.b * t,
            self.a * (1 - t) + color.a * t
        );
    }
    
    /**
     * Create a copy of this color
     */
    def clone() -> ColorRGBA {
        return new ColorRGBA(self.r, self.g, self.b, self.a);
    }
    
    // Predefined colors
    static property BLACK: ColorRGBA = ColorRGBA.fromHex(Color.BLACK);
    static property WHITE: ColorRGBA = ColorRGBA.fromHex(Color.WHITE);
    static property RED: ColorRGBA = ColorRGBA.fromHex(Color.RED);
    static property GREEN: ColorRGBA = ColorRGBA.fromHex(Color.GREEN);
    static property BLUE: ColorRGBA = ColorRGBA.fromHex(Color.BLUE);
    static property YELLOW: ColorRGBA = ColorRGBA.fromHex(Color.YELLOW);
    static property CYAN: ColorRGBA = ColorRGBA.fromHex(Color.CYAN);
    static property MAGENTA: ColorRGBA = ColorRGBA.fromHex(Color.MAGENTA);
    static property GRAY: ColorRGBA = ColorRGBA.fromHex(Color.GRAY);
    static property LIGHT_GRAY: ColorRGBA = ColorRGBA.fromHex(Color.LIGHT_GRAY);
    static property DARK_GRAY: ColorRGBA = ColorRGBA.fromHex(Color.DARK_GRAY);
    static property TRANSPARENT: ColorRGBA = new ColorRGBA(0, 0, 0, 0);
}

/**
 * Font style flags
 */
enum FontStyle {
    NORMAL = 0,
    BOLD = 1,
    ITALIC = 2,
    UNDERLINE = 4
}

/**
 * Font alignment options
 */
enum TextAlign {
    LEFT,
    CENTER,
    RIGHT
}

/**
 * Font class for text rendering
 */
class Font {
    property family: string;
    property size: float;
    property style: int;
    
    def initialize(family: string = "sans-serif", size: float = 12, style: int = FontStyle.NORMAL) {
        self.family = family;
        self.size = size;
        self.style = style;
    }
    
    /**
     * Check if the font is bold
     */
    def isBold() -> bool {
        return (self.style & FontStyle.BOLD) != 0;
    }
    
    /**
     * Check if the font is italic
     */
    def isItalic() -> bool {
        return (self.style & FontStyle.ITALIC) != 0;
    }
    
    /**
     * Check if the font is underlined
     */
    def isUnderline() -> bool {
        return (self.style & FontStyle.UNDERLINE) != 0;
    }
    
    /**
     * Create a copy of this font
     */
    def clone() -> Font {
        return new Font(self.family, self.size, self.style);
    }
    
    /**
     * Create a bold version of this font
     */
    def bold() -> Font {
        let newFont = self.clone();
        newFont.style |= FontStyle.BOLD;
        return newFont;
    }
    
    /**
     * Create an italic version of this font
     */
    def italic() -> Font {
        let newFont = self.clone();
        newFont.style |= FontStyle.ITALIC;
        return newFont;
    }
    
    /**
     * Create an underlined version of this font
     */
    def underline() -> Font {
        let newFont = self.clone();
        newFont.style |= FontStyle.UNDERLINE;
        return newFont;
    }
}

/**
 * Event base class
 */
class Event {
    property type: string;
    property handled: bool;
    property timestamp: float;
    
    def initialize(type: string) {
        self.type = type;
        self.handled = false;
        self.timestamp = Date.now() / 1000.0;
    }
}

/**
 * Mouse event class
 */
class MouseEvent extends Event {
    property x: float;
    property y: float;
    property button: int;
    property buttons: int;
    property altKey: bool;
    property ctrlKey: bool;
    property shiftKey: bool;
    
    def initialize(type: string, x: float, y: float, button: int = 0, buttons: int = 0,
                  altKey: bool = false, ctrlKey: bool = false, shiftKey: bool = false) {
        super.initialize(type);
        self.x = x;
        self.y = y;
        self.button = button;
        self.buttons = buttons;
        self.altKey = altKey;
        self.ctrlKey = ctrlKey;
        self.shiftKey = shiftKey;
    }
}

/**
 * Keyboard event class
 */
class KeyEvent extends Event {
    property key: string;
    property code: string;
    property altKey: bool;
    property ctrlKey: bool;
    property shiftKey: bool;
    property repeat: bool;
    
    def initialize(type: string, key: string, code: string,
                  altKey: bool = false, ctrlKey: bool = false, shiftKey: bool = false,
                  repeat: bool = false) {
        super.initialize(type);
        self.key = key;
        self.code = code;
        self.altKey = altKey;
        self.ctrlKey = ctrlKey;
        self.shiftKey = shiftKey;
        self.repeat = repeat;
    }
}

/**
 * Touch event class
 */
class TouchEvent extends Event {
    property touches: Array<{id: int, x: float, y: float}>;
    
    def initialize(type: string, touches: Array<{id: int, x: float, y: float}>) {
        super.initialize(type);
        self.touches = touches;
    }
}

/**
 * Edge insets (margins/padding)
 */
class EdgeInsets {
    property top: float;
    property right: float;
    property bottom: float;
    property left: float;
    
    def initialize(top: float = 0, right: float = 0, bottom: float = 0, left: float = 0) {
        self.top = top;
        self.right = right;
        self.bottom = bottom;
        self.left = left;
    }
    
    /**
     * Create insets with the same value on all sides
     */
    static def all(value: float) -> EdgeInsets {
        return new EdgeInsets(value, value, value, value);
    }
    
    /**
     * Create insets with horizontal and vertical values
     */
    static def symmetric(horizontal: float = 0, vertical: float = 0) -> EdgeInsets {
        return new EdgeInsets(vertical, horizontal, vertical, horizontal);
    }
    
    /**
     * Create a copy of these insets
     */
    def clone() -> EdgeInsets {
        return new EdgeInsets(self.top, self.right, self.bottom, self.left);
    }
}

/**
 * Border class
 */
class Border {
    property color: ColorRGBA;
    property width: float;
    property radius: float;
    
    def initialize(color: ColorRGBA = ColorRGBA.BLACK, width: float = 1, radius: float = 0) {
        self.color = color;
        self.width = width;
        self.radius = radius;
    }
    
    /**
     * Create a copy of this border
     */
    def clone() -> Border {
        return new Border(self.color.clone(), self.width, self.radius);
    }
}

/**
 * Canvas rendering context interface
 */
interface RenderContext {
    def clear(color: ColorRGBA) -> void;
    def setFont(font: Font) -> void;
    def setFillColor(color: ColorRGBA) -> void;
    def setStrokeColor(color: ColorRGBA) -> void;
    def setLineWidth(width: float) -> void;
    def beginPath() -> void;
    def closePath() -> void;
    def moveTo(x: float, y: float) -> void;
    def lineTo(x: float, y: float) -> void;
    def rect(x: float, y: float, width: float, height: float) -> void;
    def roundRect(x: float, y: float, width: float, height: float, radius: float) -> void;
    def circle(x: float, y: float, radius: float) -> void;
    def ellipse(x: float, y: float, radiusX: float, radiusY: float) -> void;
    def arc(x: float, y: float, radius: float, startAngle: float, endAngle: float, anticlockwise: bool = false) -> void;
    def fill() -> void;
    def stroke() -> void;
    def fillText(text: string, x: float, y: float, maxWidth: float? = null) -> void;
    def strokeText(text: string, x: float, y: float, maxWidth: float? = null) -> void;
    def measureText(text: string) -> {width: float, height: float};
    def drawImage(image: any, dx: float, dy: float, dWidth: float? = null, dHeight: float? = null) -> void;
    def save() -> void;
    def restore() -> void;
    def translate(x: float, y: float) -> void;
    def rotate(angle: float) -> void;
    def scale(x: float, y: float) -> void;
}

/**
 * Layout constraints
 */
class LayoutConstraints {
    property minWidth: float?;
    property maxWidth: float?;
    property minHeight: float?;
    property maxHeight: float?;
    property preferredWidth: float?;
    property preferredHeight: float?;
    
    def initialize(minWidth: float? = null, maxWidth: float? = null, 
                  minHeight: float? = null, maxHeight: float? = null,
                  preferredWidth: float? = null, preferredHeight: float? = null) {
        self.minWidth = minWidth;
        self.maxWidth = maxWidth;
        self.minHeight = minHeight;
        self.maxHeight = maxHeight;
        self.preferredWidth = preferredWidth;
        self.preferredHeight = preferredHeight;
    }
    
    /**
     * Create a copy of these constraints
     */
    def clone() -> LayoutConstraints {
        return new LayoutConstraints(
            self.minWidth, self.maxWidth,
            self.minHeight, self.maxHeight,
            self.preferredWidth, self.preferredHeight
        );
    }
    
    /**
     * Apply constraints to a width value
     */
    def applyToWidth(width: float) -> float {
        let result = width;
        
        if (self.minWidth != null && result < self.minWidth) {
            result = self.minWidth;
        }
        
        if (self.maxWidth != null && result > self.maxWidth) {
            result = self.maxWidth;
        }
        
        return result;
    }
    
    /**
     * Apply constraints to a height value
     */
    def applyToHeight(height: float) -> float {
        let result = height;
        
        if (self.minHeight != null && result < self.minHeight) {
            result = self.minHeight;
        }
        
        if (self.maxHeight != null && result > self.maxHeight) {
            result = self.maxHeight;
        }
        
        return result;
    }
}

/**
 * Widget class (base class for all UI components)
 */
class Widget {
    property id: string?;
    property bounds: Rect;
    property visible: bool;
    property enabled: bool;
    property parent: Widget?;
    property children: Array<Widget>;
    property padding: EdgeInsets;
    property margin: EdgeInsets;
    property backgroundColor: ColorRGBA?;
    property border: Border?;
    property constraints: LayoutConstraints;
    property eventHandlers: Map<string, Array<fn(event: Event) -> void>>;
    
    def initialize() {
        self.id = null;
        self.bounds = new Rect();
        self.visible = true;
        self.enabled = true;
        self.parent = null;
        self.children = [];
        self.padding = new EdgeInsets();
        self.margin = new EdgeInsets();
        self.backgroundColor = null;
        self.border = null;
        self.constraints = new LayoutConstraints();
        self.eventHandlers = new Map();
    }
    
    /**
     * Add a child widget to this widget
     */
    def addChild(child: Widget) -> Widget {
        if (child.parent != null) {
            child.parent.removeChild(child);
        }
        
        child.parent = self;
        self.children.push(child);
        
        return self;
    }
    
    /**
     * Remove a child widget from this widget
     */
    def removeChild(child: Widget) -> Widget {
        let index = self.children.indexOf(child);
        
        if (index >= 0) {
            self.children.splice(index, 1);
            child.parent = null;
        }
        
        return self;
    }
    
    /**
     * Clear all child widgets
     */
    def clearChildren() -> Widget {
        for (let child of self.children) {
            child.parent = null;
        }
        
        self.children = [];
        
        return self;
    }
    
    /**
     * Find a child widget by ID
     */
    def findById(id: string) -> Widget? {
        if (self.id == id) {
            return self;
        }
        
        for (let child of self.children) {
            let result = child.findById(id);
            if (result != null) {
                return result;
            }
        }
        
        return null;
    }
    
    /**
     * Check if the widget contains a point
     */
    def containsPoint(x: float, y: float) -> bool {
        return this.bounds.contains(new Vector2(x, y));
    }
    
    /**
     * Get content area bounds (bounds minus padding)
     */
    def getContentBounds() -> Rect {
        return new Rect(
            self.bounds.x + self.padding.left,
            self.bounds.y + self.padding.top,
            self.bounds.width - self.padding.left - self.padding.right,
            self.bounds.height - self.padding.top - self.padding.bottom
        );
    }
    
    /**
     * Measure the widget's preferred size
     */
    def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        // Default implementation returns preferred size from constraints or 0,0
        let width = self.constraints.preferredWidth ?? 0;
        let height = self.constraints.preferredHeight ?? 0;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        // Add padding
        width += self.padding.left + self.padding.right;
        height += self.padding.top + self.padding.bottom;
        
        return {width, height};
    }
    
    /**
     * Layout the widget and its children
     */
    def layout(x: float, y: float, width: float, height: float) -> void {
        // Set bounds
        self.bounds = new Rect(x, y, width, height);
        
        // Layout children in default implementation does nothing
        // Subclasses should override this to position and size children
    }
    
    /**
     * Draw the widget and its children
     */
    def draw(context: RenderContext) -> void {
        if (!self.visible) {
            return;
        }
        
        // Draw background
        if (self.backgroundColor != null) {
            context.setFillColor(self.backgroundColor);
            
            if (self.border != null && self.border.radius > 0) {
                context.beginPath();
                context.roundRect(
                    self.bounds.x, 
                    self.bounds.y, 
                    self.bounds.width, 
                    self.bounds.height, 
                    self.border.radius
                );
                context.fill();
            } else {
                context.beginPath();
                context.rect(
                    self.bounds.x, 
                    self.bounds.y, 
                    self.bounds.width, 
                    self.bounds.height
                );
                context.fill();
            }
        }
        
        // Draw border
        if (self.border != null && self.border.width > 0) {
            context.setStrokeColor(self.border.color);
            context.setLineWidth(self.border.width);
            
            if (self.border.radius > 0) {
                context.beginPath();
                context.roundRect(
                    self.bounds.x, 
                    self.bounds.y, 
                    self.bounds.width, 
                    self.bounds.height, 
                    self.border.radius
                );
                context.stroke();
            } else {
                context.beginPath();
                context.rect(
                    self.bounds.x, 
                    self.bounds.y, 
                    self.bounds.width, 
                    self.bounds.height
                );
                context.stroke();
            }
        }
        
        // Draw children
        for (let child of self.children) {
            child.draw(context);
        }
    }
    
    /**
     * Handle an event
     */
    def handleEvent(event: Event) -> bool {
        if (!self.enabled) {
            return false;
        }
        
        // Call registered event handlers
        let handlers = self.eventHandlers.get(event.type);
        if (handlers != null) {
            for (let handler of handlers) {
                handler(event);
                if (event.handled) {
                    return true;
                }
            }
        }
        
        // Propagate to children in reverse order (top to bottom)
        for (let i = self.children.length - 1; i >= 0; i--) {
            if (self.children[i].handleEvent(event)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Add an event handler
     */
    def addEventListener(type: string, handler: fn(event: Event) -> void) -> Widget {
        if (!self.eventHandlers.has(type)) {
            self.eventHandlers.set(type, []);
        }
        
        self.eventHandlers.get(type).push(handler);
        
        return self;
    }
    
    /**
     * Remove an event handler
     */
    def removeEventListener(type: string, handler: fn(event: Event) -> void) -> Widget {
        if (!self.eventHandlers.has(type)) {
            return self;
        }
        
        let handlers = self.eventHandlers.get(type);
        let index = handlers.indexOf(handler);
        
        if (index >= 0) {
            handlers.splice(index, 1);
        }
        
        return self;
    }
}

/**
 * Layout direction
 */
enum Direction {
    HORIZONTAL,
    VERTICAL
}

/**
 * Layout alignment
 */
enum Alignment {
    START,
    CENTER,
    END,
    SPACE_BETWEEN,
    SPACE_AROUND,
    SPACE_EVENLY
}

/**
 * Box layout container for arranging widgets in a row or column
 */
class BoxLayout extends Widget {
    property direction: Direction;
    property mainAxisAlignment: Alignment;
    property crossAxisAlignment: Alignment;
    property spacing: float;
    
    def initialize(direction: Direction = Direction.HORIZONTAL, 
                  mainAxisAlignment: Alignment = Alignment.START,
                  crossAxisAlignment: Alignment = Alignment.START,
                  spacing: float = 0) {
        super.initialize();
        self.direction = direction;
        self.mainAxisAlignment = mainAxisAlignment;
        self.crossAxisAlignment = crossAxisAlignment;
        self.spacing = spacing;
    }
    
    /**
     * Measure the layout's preferred size
     */
    override def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        // Start with padding
        let width = self.padding.left + self.padding.right;
        let height = self.padding.top + self.padding.bottom;
        
        // Content size based on direction
        let contentWidth = 0;
        let contentHeight = 0;
        
        // Children sizes
        let childSizes = [];
        
        // Calculate available space for children
        let childAvailableWidth = availableWidth - width;
        let childAvailableHeight = availableHeight - height;
        
        // Measure children
        for (let child of self.children) {
            let childSize = child.measure(childAvailableWidth, childAvailableHeight);
            childSizes.push(childSize);
            
            if (self.direction == Direction.HORIZONTAL) {
                contentWidth += childSize.width;
                contentHeight = math.max(contentHeight, childSize.height);
            } else {
                contentWidth = math.max(contentWidth, childSize.width);
                contentHeight += childSize.height;
            }
        }
        
        // Add spacing between children
        if (self.children.length > 1) {
            let spacingCount = self.children.length - 1;
            
            if (self.direction == Direction.HORIZONTAL) {
                contentWidth += spacingCount * self.spacing;
            } else {
                contentHeight += spacingCount * self.spacing;
            }
        }
        
        // Add padding to content size
        width += contentWidth;
        height += contentHeight;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        return {width, height};
    }
    
    /**
     * Layout the box and its children
     */
    override def layout(x: float, y: float, width: float, height: float) -> void {
        super.layout(x, y, width, height);
        
        // Calculate content area
        let contentX = x + self.padding.left;
        let contentY = y + self.padding.top;
        let contentWidth = width - self.padding.left - self.padding.right;
        let contentHeight = height - self.padding.top - self.padding.bottom;
        
        // Get sizes of all children
        let childSizes = [];
        let totalMainSize = 0;
        let maxCrossSize = 0;
        
        for (let child of self.children) {
            let childSize = child.measure(contentWidth, contentHeight);
            childSizes.push(childSize);
            
            if (self.direction == Direction.HORIZONTAL) {
                totalMainSize += childSize.width;
                maxCrossSize = math.max(maxCrossSize, childSize.height);
            } else {
                totalMainSize += childSize.height;
                maxCrossSize = math.max(maxCrossSize, childSize.width);
            }
        }
        
        // Add spacing between children
        if (self.children.length > 1) {
            totalMainSize += (self.children.length - 1) * self.spacing;
        }
        
        // Calculate spacing based on alignment
        let remainingSpace = (self.direction == Direction.HORIZONTAL ? 
                             contentWidth : contentHeight) - totalMainSize;
        
        let startOffset = 0;
        let spacing = self.spacing;
        
        switch (self.mainAxisAlignment) {
            case Alignment.START:
                startOffset = 0;
                break;
            case Alignment.CENTER:
                startOffset = remainingSpace / 2;
                break;
            case Alignment.END:
                startOffset = remainingSpace;
                break;
            case Alignment.SPACE_BETWEEN:
                startOffset = 0;
                if (self.children.length > 1) {
                    spacing += remainingSpace / (self.children.length - 1);
                }
                break;
            case Alignment.SPACE_AROUND:
                if (self.children.length > 0) {
                    let spacePerChild = remainingSpace / self.children.length;
                    startOffset = spacePerChild / 2;
                    spacing += spacePerChild;
                }
                break;
            case Alignment.SPACE_EVENLY:
                if (self.children.length > 0) {
                    let spaces = self.children.length + 1;
                    let spaceSize = remainingSpace / spaces;
                    startOffset = spaceSize;
                    spacing += spaceSize;
                }
                break;
        }
        
        // Position and size children
        let mainPos = startOffset;
        
        for (let i = 0; i < self.children.length; i++) {
            let child = self.children[i];
            let childSize = childSizes[i];
            
            let childX = contentX;
            let childY = contentY;
            let childWidth = childSize.width;
            let childHeight = childSize.height;
            
            // Position based on direction
            if (self.direction == Direction.HORIZONTAL) {
                childX += mainPos;
                
                // Vertical alignment
                switch (self.crossAxisAlignment) {
                    case Alignment.START:
                        childY = contentY;
                        break;
                    case Alignment.CENTER:
                        childY = contentY + (contentHeight - childHeight) / 2;
                        break;
                    case Alignment.END:
                        childY = contentY + contentHeight - childHeight;
                        break;
                    default:
                        childY = contentY;
                }
                
                mainPos += childWidth + spacing;
            } else {
                childY += mainPos;
                
                // Horizontal alignment
                switch (self.crossAxisAlignment) {
                    case Alignment.START:
                        childX = contentX;
                        break;
                    case Alignment.CENTER:
                        childX = contentX + (contentWidth - childWidth) / 2;
                        break;
                    case Alignment.END:
                        childX = contentX + contentWidth - childWidth;
                        break;
                    default:
                        childX = contentX;
                }
                
                mainPos += childHeight + spacing;
            }
            
            // Layout child
            child.layout(childX, childY, childWidth, childHeight);
        }
    }
}

/**
 * Root container for the entire UI
 */
class UIRoot extends Widget {
    property context: RenderContext?;
    
    def initialize() {
        super.initialize();
        self.context = null;
    }
    
    /**
     * Set the rendering context
     */
    def setContext(context: RenderContext) -> void {
        self.context = context;
    }
    
    /**
     * Perform a complete layout of the UI
     */
    def performLayout(width: float, height: float) -> void {
        self.layout(0, 0, width, height);
    }
    
    /**
     * Render the entire UI
     */
    def render() -> void {
        if (self.context == null) {
            throw Error("Cannot render UI without a rendering context");
        }
        
        // Clear the context
        self.context.clear(ColorRGBA.WHITE);
        
        // Draw the UI
        self.draw(self.context);
    }
    
    /**
     * Process a mouse event
     */
    def processMouseEvent(event: MouseEvent) -> bool {
        return self.handleEvent(event);
    }
    
    /**
     * Process a key event
     */
    def processKeyEvent(event: KeyEvent) -> bool {
        return self.handleEvent(event);
    }
    
    /**
     * Process a touch event
     */
    def processTouchEvent(event: TouchEvent) -> bool {
        return self.handleEvent(event);
    }
}

// Export core classes
export {
    Color,
    ColorRGBA,
    FontStyle,
    TextAlign,
    Font,
    Event,
    MouseEvent,
    KeyEvent,
    TouchEvent,
    EdgeInsets,
    Border,
    RenderContext,
    LayoutConstraints,
    Widget,
    Direction,
    Alignment,
    BoxLayout,
    UIRoot
} 
