/**
 * Tocin Standard Library - Data Structures Module
 * Provides implementations of common data structures.
 */

/**
 * Singly Linked List implementation
 */
class LinkedListNode<T> {
    property value: T;
    property next: LinkedListNode<T>?;
    
    def initialize(value: T) {
        self.value = value;
        self.next = null;
    }
}

class LinkedList<T> {
    property head: LinkedListNode<T>?;
    property tail: LinkedListNode<T>?;
    property length: int;
    
    def initialize() {
        self.head = null;
        self.tail = null;
        self.length = 0;
    }
    
    /**
     * Add a value to the end of the list
     */
    def append(value: T) -> LinkedList<T> {
        let newNode = new LinkedListNode<T>(value);
        
        if (!self.head) {
            self.head = newNode;
            self.tail = newNode;
        } else {
            self.tail.next = newNode;
            self.tail = newNode;
        }
        
        self.length++;
        return self;
    }
    
    /**
     * Add a value to the beginning of the list
     */
    def prepend(value: T) -> LinkedList<T> {
        let newNode = new LinkedListNode<T>(value);
        
        if (!self.head) {
            self.head = newNode;
            self.tail = newNode;
        } else {
            newNode.next = self.head;
            self.head = newNode;
        }
        
        self.length++;
        return self;
    }
    
    /**
     * Insert a value at a specific position
     */
    def insertAt(index: int, value: T) -> bool {
        if (index < 0 || index > self.length) {
            return false;
        }
        
        if (index === 0) {
            self.prepend(value);
            return true;
        }
        
        if (index === self.length) {
            self.append(value);
            return true;
        }
        
        let newNode = new LinkedListNode<T>(value);
        let current = self.head;
        
        for (let i = 0; i < index - 1; i++) {
            current = current.next;
        }
        
        newNode.next = current.next;
        current.next = newNode;
        
        self.length++;
        return true;
    }
    
    /**
     * Remove a value at a specific position
     */
    def removeAt(index: int) -> T? {
        if (index < 0 || index >= self.length || !self.head) {
            return null;
        }
        
        let removedNode;
        
        if (index === 0) {
            removedNode = self.head;
            self.head = self.head.next;
            
            if (self.length === 1) {
                self.tail = null;
            }
        } else {
            let current = self.head;
            
            for (let i = 0; i < index - 1; i++) {
                current = current.next;
            }
            
            removedNode = current.next;
            current.next = removedNode.next;
            
            if (index === self.length - 1) {
                self.tail = current;
            }
        }
        
        self.length--;
        return removedNode.value;
    }
    
    /**
     * Get a value at a specific position
     */
    def get(index: int) -> T? {
        if (index < 0 || index >= self.length || !self.head) {
            return null;
        }
        
        let current = self.head;
        
        for (let i = 0; i < index; i++) {
            current = current.next;
        }
        
        return current.value;
    }
    
    /**
     * Set a value at a specific position
     */
    def set(index: int, value: T) -> bool {
        if (index < 0 || index >= self.length || !self.head) {
            return false;
        }
        
        let current = self.head;
        
        for (let i = 0; i < index; i++) {
            current = current.next;
        }
        
        current.value = value;
        return true;
    }
    
    /**
     * Find the index of a value
     */
    def indexOf(value: T, comparator: fn(a: T, b: T) -> bool = (a, b) => a === b) -> int {
        if (!self.head) {
            return -1;
        }
        
        let current = self.head;
        let index = 0;
        
        while (current) {
            if (comparator(current.value, value)) {
                return index;
            }
            
            current = current.next;
            index++;
        }
        
        return -1;
    }
    
    /**
     * Check if the list contains a value
     */
    def contains(value: T, comparator: fn(a: T, b: T) -> bool = (a, b) => a === b) -> bool {
        return self.indexOf(value, comparator) !== -1;
    }
    
    /**
     * Clear the list
     */
    def clear() -> void {
        self.head = null;
        self.tail = null;
        self.length = 0;
    }
    
    /**
     * Convert the list to an array
     */
    def toArray() -> Array<T> {
        let array = [];
        let current = self.head;
        
        while (current) {
            array.push(current.value);
            current = current.next;
        }
        
        return array;
    }
    
    /**
     * Create a linked list from an array
     */
    static def fromArray<U>(array: Array<U>) -> LinkedList<U> {
        let list = new LinkedList<U>();
        
        for (let item of array) {
            list.append(item);
        }
        
        return list;
    }
    
    /**
     * Iterate over the list
     */
    def forEach(callback: fn(value: T, index: int) -> void) -> void {
        let current = self.head;
        let index = 0;
        
        while (current) {
            callback(current.value, index);
            current = current.next;
            index++;
        }
    }
}

/**
 * Doubly Linked List implementation
 */
class DoublyLinkedListNode<T> {
    property value: T;
    property next: DoublyLinkedListNode<T>?;
    property prev: DoublyLinkedListNode<T>?;
    
    def initialize(value: T) {
        self.value = value;
        self.next = null;
        self.prev = null;
    }
}

class DoublyLinkedList<T> {
    property head: DoublyLinkedListNode<T>?;
    property tail: DoublyLinkedListNode<T>?;
    property length: int;
    
    def initialize() {
        self.head = null;
        self.tail = null;
        self.length = 0;
    }
    
    /**
     * Add a value to the end of the list
     */
    def append(value: T) -> DoublyLinkedList<T> {
        let newNode = new DoublyLinkedListNode<T>(value);
        
        if (!self.head) {
            self.head = newNode;
            self.tail = newNode;
        } else {
            newNode.prev = self.tail;
            self.tail.next = newNode;
            self.tail = newNode;
        }
        
        self.length++;
        return self;
    }
    
    /**
     * Add a value to the beginning of the list
     */
    def prepend(value: T) -> DoublyLinkedList<T> {
        let newNode = new DoublyLinkedListNode<T>(value);
        
        if (!self.head) {
            self.head = newNode;
            self.tail = newNode;
        } else {
            newNode.next = self.head;
            self.head.prev = newNode;
            self.head = newNode;
        }
        
        self.length++;
        return self;
    }
    
    /**
     * Insert a value at a specific position
     */
    def insertAt(index: int, value: T) -> bool {
        if (index < 0 || index > self.length) {
            return false;
        }
        
        if (index === 0) {
            self.prepend(value);
            return true;
        }
        
        if (index === self.length) {
            self.append(value);
            return true;
        }
        
        let newNode = new DoublyLinkedListNode<T>(value);
        
        // Determine whether to iterate from head or tail for efficiency
        if (index < self.length / 2) {
            let current = self.head;
            
            for (let i = 0; i < index; i++) {
                current = current.next;
            }
            
            newNode.prev = current.prev;
            newNode.next = current;
            current.prev.next = newNode;
            current.prev = newNode;
        } else {
            let current = self.tail;
            
            for (let i = self.length - 1; i > index; i--) {
                current = current.prev;
            }
            
            newNode.prev = current.prev;
            newNode.next = current;
            current.prev.next = newNode;
            current.prev = newNode;
        }
        
        self.length++;
        return true;
    }
    
    /**
     * Remove a value at a specific position
     */
    def removeAt(index: int) -> T? {
        if (index < 0 || index >= self.length || !self.head) {
            return null;
        }
        
        let removedNode;
        
        if (index === 0) {
            removedNode = self.head;
            self.head = self.head.next;
            
            if (self.head) {
                self.head.prev = null;
            } else {
                self.tail = null;
            }
        } else if (index === self.length - 1) {
            removedNode = self.tail;
            self.tail = self.tail.prev;
            self.tail.next = null;
        } else {
            // Determine whether to iterate from head or tail for efficiency
            if (index < self.length / 2) {
                removedNode = self.head;
                
                for (let i = 0; i < index; i++) {
                    removedNode = removedNode.next;
                }
            } else {
                removedNode = self.tail;
                
                for (let i = self.length - 1; i > index; i--) {
                    removedNode = removedNode.prev;
                }
            }
            
            removedNode.prev.next = removedNode.next;
            removedNode.next.prev = removedNode.prev;
        }
        
        self.length--;
        return removedNode.value;
    }
    
    /**
     * Get a value at a specific position
     */
    def get(index: int) -> T? {
        if (index < 0 || index >= self.length || !self.head) {
            return null;
        }
        
        let current;
        
        // Determine whether to iterate from head or tail for efficiency
        if (index < self.length / 2) {
            current = self.head;
            
            for (let i = 0; i < index; i++) {
                current = current.next;
            }
        } else {
            current = self.tail;
            
            for (let i = self.length - 1; i > index; i--) {
                current = current.prev;
            }
        }
        
        return current.value;
    }
    
    /**
     * Convert the list to an array
     */
    def toArray() -> Array<T> {
        let array = [];
        let current = self.head;
        
        while (current) {
            array.push(current.value);
            current = current.next;
        }
        
        return array;
    }
}

/**
 * Stack implementation
 */
class Stack<T> {
    property items: Array<T>;
    
    def initialize() {
        self.items = [];
    }
    
    /**
     * Push an item onto the stack
     */
    def push(item: T) -> void {
        self.items.push(item);
    }
    
    /**
     * Pop an item from the stack
     */
    def pop() -> T? {
        if (self.isEmpty()) {
            return null;
        }
        
        return self.items.pop();
    }
    
    /**
     * Peek at the top item on the stack
     */
    def peek() -> T? {
        if (self.isEmpty()) {
            return null;
        }
        
        return self.items[self.items.length - 1];
    }
    
    /**
     * Check if the stack is empty
     */
    def isEmpty() -> bool {
        return self.items.length === 0;
    }
    
    /**
     * Get the size of the stack
     */
    def size() -> int {
        return self.items.length;
    }
    
    /**
     * Clear the stack
     */
    def clear() -> void {
        self.items = [];
    }
}

/**
 * Queue implementation
 */
class Queue<T> {
    property items: Array<T>;
    
    def initialize() {
        self.items = [];
    }
    
    /**
     * Enqueue an item
     */
    def enqueue(item: T) -> void {
        self.items.push(item);
    }
    
    /**
     * Dequeue an item
     */
    def dequeue() -> T? {
        if (self.isEmpty()) {
            return null;
        }
        
        return self.items.shift();
    }
    
    /**
     * Peek at the front item
     */
    def peek() -> T? {
        if (self.isEmpty()) {
            return null;
        }
        
        return self.items[0];
    }
    
    /**
     * Check if the queue is empty
     */
    def isEmpty() -> bool {
        return self.items.length === 0;
    }
    
    /**
     * Get the size of the queue
     */
    def size() -> int {
        return self.items.length;
    }
    
    /**
     * Clear the queue
     */
    def clear() -> void {
        self.items = [];
    }
}

/**
 * Binary Tree Node
 */
class BinaryTreeNode<T> {
    property value: T;
    property left: BinaryTreeNode<T>?;
    property right: BinaryTreeNode<T>?;
    
    def initialize(value: T) {
        self.value = value;
        self.left = null;
        self.right = null;
    }
}

/**
 * Binary Search Tree implementation
 */
class BinarySearchTree<T> {
    property root: BinaryTreeNode<T>?;
    property comparator: fn(a: T, b: T) -> int;
    
    def initialize(comparator: fn(a: T, b: T) -> int = (a, b) => {
        if (a < b) return -1;
        if (a > b) return 1;
        return 0;
    }) {
        self.root = null;
        self.comparator = comparator;
    }
    
    /**
     * Insert a value into the tree
     */
    def insert(value: T) -> BinarySearchTree<T> {
        let newNode = new BinaryTreeNode<T>(value);
        
        if (!self.root) {
            self.root = newNode;
            return self;
        }
        
        function insertNode(node: BinaryTreeNode<T>, newNode: BinaryTreeNode<T>) -> void {
            let comparison = self.comparator(newNode.value, node.value);
            
            if (comparison < 0) {
                if (!node.left) {
                    node.left = newNode;
                } else {
                    insertNode(node.left, newNode);
                }
            } else {
                if (!node.right) {
                    node.right = newNode;
                } else {
                    insertNode(node.right, newNode);
                }
            }
        }
        
        insertNode(self.root, newNode);
        return self;
    }
    
    /**
     * Search for a value in the tree
     */
    def search(value: T) -> bool {
        function searchNode(node: BinaryTreeNode<T>?, value: T) -> bool {
            if (!node) {
                return false;
            }
            
            let comparison = self.comparator(value, node.value);
            
            if (comparison === 0) {
                return true;
            } else if (comparison < 0) {
                return searchNode(node.left, value);
            } else {
                return searchNode(node.right, value);
            }
        }
        
        return searchNode(self.root, value);
    }
    
    /**
     * Remove a value from the tree
     */
    def remove(value: T) -> bool {
        function findMinNode(node: BinaryTreeNode<T>) -> BinaryTreeNode<T> {
            while (node.left) {
                node = node.left;
            }
            
            return node;
        }
        
        function removeNode(node: BinaryTreeNode<T>?, value: T) -> BinaryTreeNode<T>? {
            if (!node) {
                return null;
            }
            
            let comparison = self.comparator(value, node.value);
            
            if (comparison < 0) {
                node.left = removeNode(node.left, value);
                return node;
            } else if (comparison > 0) {
                node.right = removeNode(node.right, value);
                return node;
            } else {
                // Node to remove found
                
                // Case 1: Leaf node
                if (!node.left && !node.right) {
                    return null;
                }
                
                // Case 2: Node with one child
                if (!node.left) {
                    return node.right;
                }
                
                if (!node.right) {
                    return node.left;
                }
                
                // Case 3: Node with two children
                let successor = findMinNode(node.right);
                node.value = successor.value;
                node.right = removeNode(node.right, successor.value);
                
                return node;
            }
        }
        
        let initialSize = self.size();
        self.root = removeNode(self.root, value);
        
        return initialSize > self.size();
    }
    
    /**
     * In-order traversal
     */
    def inOrderTraversal(callback: fn(value: T) -> void) -> void {
        function traverse(node: BinaryTreeNode<T>?) -> void {
            if (!node) {
                return;
            }
            
            traverse(node.left);
            callback(node.value);
            traverse(node.right);
        }
        
        traverse(self.root);
    }
    
    /**
     * Pre-order traversal
     */
    def preOrderTraversal(callback: fn(value: T) -> void) -> void {
        function traverse(node: BinaryTreeNode<T>?) -> void {
            if (!node) {
                return;
            }
            
            callback(node.value);
            traverse(node.left);
            traverse(node.right);
        }
        
        traverse(self.root);
    }
    
    /**
     * Post-order traversal
     */
    def postOrderTraversal(callback: fn(value: T) -> void) -> void {
        function traverse(node: BinaryTreeNode<T>?) -> void {
            if (!node) {
                return;
            }
            
            traverse(node.left);
            traverse(node.right);
            callback(node.value);
        }
        
        traverse(self.root);
    }
    
    /**
     * Get the size of the tree
     */
    def size() -> int {
        let count = 0;
        
        function countNodes(node: BinaryTreeNode<T>?) -> void {
            if (!node) {
                return;
            }
            
            count++;
            countNodes(node.left);
            countNodes(node.right);
        }
        
        countNodes(self.root);
        return count;
    }
    
    /**
     * Get the height of the tree
     */
    def height() -> int {
        function calculateHeight(node: BinaryTreeNode<T>?) -> int {
            if (!node) {
                return -1;
            }
            
            let leftHeight = calculateHeight(node.left);
            let rightHeight = calculateHeight(node.right);
            
            return 1 + Math.max(leftHeight, rightHeight);
        }
        
        return calculateHeight(self.root);
    }
    
    /**
     * Check if the tree is empty
     */
    def isEmpty() -> bool {
        return !self.root;
    }
    
    /**
     * Clear the tree
     */
    def clear() -> void {
        self.root = null;
    }
}

/**
 * Heap implementation (Min Heap by default)
 */
class Heap<T> {
    property items: Array<T>;
    property comparator: fn(a: T, b: T) -> bool;
    
    def initialize(comparator: fn(a: T, b: T) -> bool = (a, b) => a < b) {
        self.items = [];
        self.comparator = comparator;
    }
    
    /**
     * Get the size of the heap
     */
    def size() -> int {
        return self.items.length;
    }
    
    /**
     * Check if the heap is empty
     */
    def isEmpty() -> bool {
        return self.items.length === 0;
    }
    
    /**
     * Get the parent index for a given index
     */
    def getParentIndex(index: int) -> int {
        return Math.floor((index - 1) / 2);
    }
    
    /**
     * Get the left child index for a given index
     */
    def getLeftChildIndex(index: int) -> int {
        return 2 * index + 1;
    }
    
    /**
     * Get the right child index for a given index
     */
    def getRightChildIndex(index: int) -> int {
        return 2 * index + 2;
    }
    
    /**
     * Check if an index has a parent
     */
    def hasParent(index: int) -> bool {
        return self.getParentIndex(index) >= 0;
    }
    
    /**
     * Check if an index has a left child
     */
    def hasLeftChild(index: int) -> bool {
        return self.getLeftChildIndex(index) < self.items.length;
    }
    
    /**
     * Check if an index has a right child
     */
    def hasRightChild(index: int) -> bool {
        return self.getRightChildIndex(index) < self.items.length;
    }
    
    /**
     * Get the parent value for a given index
     */
    def parent(index: int) -> T {
        return self.items[self.getParentIndex(index)];
    }
    
    /**
     * Get the left child value for a given index
     */
    def leftChild(index: int) -> T {
        return self.items[self.getLeftChildIndex(index)];
    }
    
    /**
     * Get the right child value for a given index
     */
    def rightChild(index: int) -> T {
        return self.items[self.getRightChildIndex(index)];
    }
    
    /**
     * Swap two elements in the heap
     */
    def swap(index1: int, index2: int) -> void {
        let temp = self.items[index1];
        self.items[index1] = self.items[index2];
        self.items[index2] = temp;
    }
    
    /**
     * Heapify up (fix the heap after insertion)
     */
    def heapifyUp() -> void {
        let index = self.items.length - 1;
        
        while (self.hasParent(index) && 
               self.comparator(self.items[index], self.parent(index))) {
            self.swap(self.getParentIndex(index), index);
            index = self.getParentIndex(index);
        }
    }
    
    /**
     * Heapify down (fix the heap after extraction)
     */
    def heapifyDown() -> void {
        let index = 0;
        
        while (self.hasLeftChild(index)) {
            let smallerChildIndex = self.getLeftChildIndex(index);
            
            if (self.hasRightChild(index) && 
                self.comparator(self.rightChild(index), self.leftChild(index))) {
                smallerChildIndex = self.getRightChildIndex(index);
            }
            
            if (self.comparator(self.items[index], self.items[smallerChildIndex])) {
                break;
            } else {
                self.swap(index, smallerChildIndex);
            }
            
            index = smallerChildIndex;
        }
    }
    
    /**
     * Peek at the top of the heap without removing
     */
    def peek() -> T? {
        if (self.isEmpty()) {
            return null;
        }
        
        return self.items[0];
    }
    
    /**
     * Add an item to the heap
     */
    def add(item: T) -> void {
        self.items.push(item);
        self.heapifyUp();
    }
    
    /**
     * Remove and return the top item from the heap
     */
    def poll() -> T? {
        if (self.isEmpty()) {
            return null;
        }
        
        let item = self.items[0];
        self.items[0] = self.items[self.items.length - 1];
        self.items.pop();
        
        if (!self.isEmpty()) {
            self.heapifyDown();
        }
        
        return item;
    }
    
    /**
     * Create a min heap
     */
    static def createMinHeap<U>() -> Heap<U> {
        return new Heap<U>((a, b) => a < b);
    }
    
    /**
     * Create a max heap
     */
    static def createMaxHeap<U>() -> Heap<U> {
        return new Heap<U>((a, b) => a > b);
    }
}

/**
 * Graph implementation (Adjacency List)
 */
class Graph<T> {
    property isDirected: bool;
    property isWeighted: bool;
    property vertices: Map<T, Map<T, float>>;
    
    def initialize(isDirected: bool = false, isWeighted: bool = false) {
        self.isDirected = isDirected;
        self.isWeighted = isWeighted;
        self.vertices = new Map();
    }
    
    /**
     * Add a vertex to the graph
     */
    def addVertex(vertex: T) -> bool {
        if (self.vertices.has(vertex)) {
            return false;
        }
        
        self.vertices.set(vertex, new Map());
        return true;
    }
    
    /**
     * Remove a vertex from the graph
     */
    def removeVertex(vertex: T) -> bool {
        if (!self.vertices.has(vertex)) {
            return false;
        }
        
        // Remove all edges pointing to this vertex
        for (let [v, edges] of self.vertices) {
            edges.delete(vertex);
        }
        
        // Remove the vertex
        self.vertices.delete(vertex);
        return true;
    }
    
    /**
     * Add an edge between two vertices
     */
    def addEdge(source: T, destination: T, weight: float = 1.0) -> bool {
        if (!self.vertices.has(source) || !self.vertices.has(destination)) {
            return false;
        }
        
        // Add edge from source to destination
        self.vertices.get(source).set(destination, weight);
        
        // If undirected, add edge from destination to source
        if (!self.isDirected) {
            self.vertices.get(destination).set(source, weight);
        }
        
        return true;
    }
    
    /**
     * Remove an edge between two vertices
     */
    def removeEdge(source: T, destination: T) -> bool {
        if (!self.vertices.has(source) || !self.vertices.has(destination)) {
            return false;
        }
        
        if (!self.vertices.get(source).has(destination)) {
            return false;
        }
        
        // Remove edge from source to destination
        self.vertices.get(source).delete(destination);
        
        // If undirected, remove edge from destination to source
        if (!self.isDirected) {
            self.vertices.get(destination).delete(source);
        }
        
        return true;
    }
    
    /**
     * Check if an edge exists
     */
    def hasEdge(source: T, destination: T) -> bool {
        if (!self.vertices.has(source) || !self.vertices.has(destination)) {
            return false;
        }
        
        return self.vertices.get(source).has(destination);
    }
    
    /**
     * Get the weight of an edge
     */
    def getEdgeWeight(source: T, destination: T) -> float? {
        if (!self.hasEdge(source, destination)) {
            return null;
        }
        
        return self.vertices.get(source).get(destination);
    }
    
    /**
     * Get all vertices
     */
    def getVertices() -> Array<T> {
        return Array.from(self.vertices.keys());
    }
    
    /**
     * Get all neighbors of a vertex
     */
    def getNeighbors(vertex: T) -> Array<T> {
        if (!self.vertices.has(vertex)) {
            return [];
        }
        
        return Array.from(self.vertices.get(vertex).keys());
    }
    
    /**
     * Get the number of vertices
     */
    def getVertexCount() -> int {
        return self.vertices.size;
    }
    
    /**
     * Get the number of edges
     */
    def getEdgeCount() -> int {
        let count = 0;
        
        for (let [vertex, edges] of self.vertices) {
            count += edges.size;
        }
        
        return self.isDirected ? count : count / 2;
    }
    
    /**
     * Perform breadth-first search
     */
    def bfs(startVertex: T, callback: fn(vertex: T) -> bool = (_) => true) -> Array<T> {
        if (!self.vertices.has(startVertex)) {
            return [];
        }
        
        let visited = new Set<T>();
        let result = [];
        let queue = [startVertex];
        
        visited.add(startVertex);
        
        while (queue.length > 0) {
            let vertex = queue.shift();
            
            // Process the vertex (if callback returns false, stop early)
            if (!callback(vertex)) {
                break;
            }
            
            result.push(vertex);
            
            // Visit neighbors
            for (let neighbor of self.getNeighbors(vertex)) {
                if (!visited.has(neighbor)) {
                    visited.add(neighbor);
                    queue.push(neighbor);
                }
            }
        }
        
        return result;
    }
    
    /**
     * Perform depth-first search
     */
    def dfs(startVertex: T, callback: fn(vertex: T) -> bool = (_) => true) -> Array<T> {
        if (!self.vertices.has(startVertex)) {
            return [];
        }
        
        let visited = new Set<T>();
        let result = [];
        
        function dfsVisit(vertex: T) -> bool {
            // Process the vertex (if callback returns false, stop early)
            if (!callback(vertex)) {
                return false;
            }
            
            result.push(vertex);
            visited.add(vertex);
            
            // Visit neighbors
            for (let neighbor of self.getNeighbors(vertex)) {
                if (!visited.has(neighbor)) {
                    if (!dfsVisit(neighbor)) {
                        return false;
                    }
                }
            }
            
            return true;
        }
        
        dfsVisit(startVertex);
        return result;
    }
}

/**
 * Trie implementation for efficient string operations
 */
class TrieNode {
    property children: Map<string, TrieNode>;
    property isEndOfWord: bool;
    
    def initialize() {
        self.children = new Map();
        self.isEndOfWord = false;
    }
}

class Trie {
    property root: TrieNode;
    
    def initialize() {
        self.root = new TrieNode();
    }
    
    /**
     * Insert a word into the trie
     */
    def insert(word: string) -> void {
        let current = self.root;
        
        for (let i = 0; i < word.length; i++) {
            let char = word[i];
            
            if (!current.children.has(char)) {
                current.children.set(char, new TrieNode());
            }
            
            current = current.children.get(char);
        }
        
        current.isEndOfWord = true;
    }
    
    /**
     * Search for a word in the trie
     */
    def search(word: string) -> bool {
        let node = self._findNode(word);
        return node !== null && node.isEndOfWord;
    }
    
    /**
     * Check if there is any word in the trie that starts with the given prefix
     */
    def startsWith(prefix: string) -> bool {
        return self._findNode(prefix) !== null;
    }
    
    /**
     * Helper function to find a node by traversing the trie
     */
    private def _findNode(str: string) -> TrieNode? {
        let current = self.root;
        
        for (let i = 0; i < str.length; i++) {
            let char = str[i];
            
            if (!current.children.has(char)) {
                return null;
            }
            
            current = current.children.get(char);
        }
        
        return current;
    }
    
    /**
     * Delete a word from the trie
     */
    def delete(word: string) -> bool {
        if (word.length === 0) {
            return false;
        }
        
        function deleteHelper(node: TrieNode, word: string, index: int) -> bool {
            // Base case: end of word reached
            if (index === word.length) {
                // Word does not exist in trie
                if (!node.isEndOfWord) {
                    return false;
                }
                
                // Mark as non-end of word
                node.isEndOfWord = false;
                
                // Return true if this node has no children
                return node.children.size === 0;
            }
            
            let char = word[index];
            let childNode = node.children.get(char);
            
            // Character not found
            if (!childNode) {
                return false;
            }
            
            // Recursively delete in child
            let shouldDeleteChild = deleteHelper(childNode, word, index + 1);
            
            // If child node can be deleted
            if (shouldDeleteChild) {
                node.children.delete(char);
                
                // Current node can be deleted if it's not end of another word and has no children
                return !node.isEndOfWord && node.children.size === 0;
            }
            
            return false;
        }
        
        deleteHelper(self.root, word, 0);
        return true;
    }
    
    /**
     * Get all words in the trie with the given prefix
     */
    def getWordsWithPrefix(prefix: string) -> Array<string> {
        let result = [];
        let prefixNode = self._findNode(prefix);
        
        if (!prefixNode) {
            return result;
        }
        
        function dfs(node: TrieNode, currentWord: string) {
            if (node.isEndOfWord) {
                result.push(currentWord);
            }
            
            for (let [char, childNode] of node.children) {
                dfs(childNode, currentWord + char);
            }
        }
        
        dfs(prefixNode, prefix);
        return result;
    }
}

export {
    LinkedListNode,
    LinkedList,
    DoublyLinkedListNode,
    DoublyLinkedList,
    Stack,
    Queue,
    BinaryTreeNode,
    BinarySearchTree,
    Heap,
    Graph,
    TrieNode,
    Trie
} 
