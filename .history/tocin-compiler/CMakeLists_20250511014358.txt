cmake_minimum_required(VERSION 3.14)
project(ToCinCompiler VERSION 0.1.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Find LLVM
find_package(LLVM REQUIRED CONFIG)
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")

# Include LLVM directories
include_directories(${LLVM_INCLUDE_DIRS})
add_definitions(${LLVM_DEFINITIONS})

# Find Abseil if available
find_package(absl CONFIG)
if(absl_FOUND)
    message(STATUS "Found Abseil")
else()
    message(WARNING "Abseil not found. Using std::unordered_map as fallback.")
    add_definitions(-DUSE_STD_UNORDERED_MAP)
endif()

# Source files
file(GLOB_RECURSE SOURCES 
    "src/*.cpp"
)

# Headers
include_directories(src)

# Create executable
add_executable(tocin ${SOURCES})

# Link LLVM libraries
llvm_map_components_to_libnames(llvm_libs 
    Core 
    Support 
    IRReader 
    ExecutionEngine 
    OrcJIT 
    native
    Analysis
    BitWriter
)
target_link_libraries(tocin PRIVATE ${llvm_libs})

# Link Abseil if available
if(absl_FOUND)
    target_link_libraries(tocin PRIVATE absl::flat_hash_map)
endif()

# Enable warnings
if(MSVC)
    target_compile_options(tocin PRIVATE /W4)
else()
    target_compile_options(tocin PRIVATE -Wall -Wextra -Wpedantic)
endif()

# Installation
install(TARGETS tocin
    RUNTIME DESTINATION bin
)

# Testing (optional)
option(BUILD_TESTING "Build tests" OFF)
if(BUILD_TESTING)
    enable_testing()
    add_subdirectory(tests)
endif()
