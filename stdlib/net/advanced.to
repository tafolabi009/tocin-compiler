/**
 * Tocin Standard Library - Advanced Networking Module
 * Provides advanced networking features such as WebSockets, HTTP/2, and REST client capabilities.
 */

import net.http;

/**
 * WebSocket connection states
 */
enum WebSocketState {
    CONNECTING,
    OPEN,
    CLOSING,
    CLOSED
}

/**
 * WebSocket message types
 */
enum WebSocketMessageType {
    TEXT,
    BINARY
}

/**
 * WebSocket close codes
 */
enum WebSocketCloseCode {
    NORMAL = 1000,
    GOING_AWAY = 1001,
    PROTOCOL_ERROR = 1002,
    UNSUPPORTED_DATA = 1003,
    INVALID_FRAME_PAYLOAD_DATA = 1007,
    POLICY_VIOLATION = 1008,
    MESSAGE_TOO_BIG = 1009,
    MISSING_EXTENSION = 1010,
    INTERNAL_ERROR = 1011,
    SERVICE_RESTART = 1012,
    TRY_AGAIN_LATER = 1013
}

/**
 * WebSocket client implementation
 */
class WebSocket {
    property url: string;
    property protocols: Array<string>;
    property state: WebSocketState;
    property nativeSocket: any;
    property onopen: fn() -> void;
    property onmessage: fn(message: any, type: WebSocketMessageType) -> void;
    property onclose: fn(code: int, reason: string) -> void;
    property onerror: fn(error: Error) -> void;
    
    def initialize(url: string, protocols: Array<string> = []) {
        self.url = url;
        self.protocols = protocols;
        self.state = WebSocketState.CONNECTING;
        self.nativeSocket = null;
        self.onopen = () => {};
        self.onmessage = (_, __) => {};
        self.onclose = (_, __) => {};
        self.onerror = (_) => {};
        
        // Initialize native WebSocket
        self._createNativeSocket();
    }
    
    /**
     * Send a text message over the WebSocket
     */
    def send(message: string) -> bool {
        if (self.state !== WebSocketState.OPEN) {
            return false;
        }
        
        try {
            self.nativeSocket.send(message);
            return true;
        } catch (error) {
            self.onerror(error);
            return false;
        }
    }
    
    /**
     * Send binary data over the WebSocket
     */
    def sendBinary(data: ArrayBuffer) -> bool {
        if (self.state !== WebSocketState.OPEN) {
            return false;
        }
        
        try {
            self.nativeSocket.send(data);
            return true;
        } catch (error) {
            self.onerror(error);
            return false;
        }
    }
    
    /**
     * Close the WebSocket connection
     */
    def close(code: int = WebSocketCloseCode.NORMAL, reason: string = "") -> void {
        if (self.state === WebSocketState.CLOSED) {
            return;
        }
        
        self.state = WebSocketState.CLOSING;
        
        try {
            self.nativeSocket.close(code, reason);
        } catch (error) {
            self.onerror(error);
        }
    }
    
    /**
     * Check if the WebSocket is open
     */
    def isOpen() -> bool {
        return self.state === WebSocketState.OPEN;
    }
    
    /**
     * Check if the WebSocket is closed
     */
    def isClosed() -> bool {
        return self.state === WebSocketState.CLOSED;
    }
    
    /**
     * Create and set up the native WebSocket
     */
    private def _createNativeSocket() -> void {
        try {
            // Create native WebSocket with protocols if provided
            if (self.protocols.length > 0) {
                self.nativeSocket = new NativeWebSocket(self.url, self.protocols);
            } else {
                self.nativeSocket = new NativeWebSocket(self.url);
            }
            
            // Set up event handlers
            self.nativeSocket.onopen = () => {
                self.state = WebSocketState.OPEN;
                self.onopen();
            };
            
            self.nativeSocket.onmessage = (event) => {
                let type = typeof event.data === "string" ? 
                           WebSocketMessageType.TEXT : 
                           WebSocketMessageType.BINARY;
                
                self.onmessage(event.data, type);
            };
            
            self.nativeSocket.onclose = (event) => {
                self.state = WebSocketState.CLOSED;
                self.onclose(event.code, event.reason);
            };
            
            self.nativeSocket.onerror = (event) => {
                self.onerror(Error("WebSocket error"));
            };
        } catch (error) {
            self.state = WebSocketState.CLOSED;
            self.onerror(error);
        }
    }
}

/**
 * WebSocket server (for environments that support it)
 */
class WebSocketServer {
    property port: int;
    property host: string;
    property server: any;
    property clients: Set<any>;
    property onconnection: fn(client: any) -> void;
    property onmessage: fn(client: any, message: any, type: WebSocketMessageType) -> void;
    property onclose: fn(client: any, code: int, reason: string) -> void;
    property onerror: fn(error: Error) -> void;
    
    def initialize(port: int = 8080, host: string = "localhost") {
        self.port = port;
        self.host = host;
        self.server = null;
        self.clients = new Set();
        self.onconnection = (_) => {};
        self.onmessage = (_, __, ___) => {};
        self.onclose = (_, __, ___) => {};
        self.onerror = (_) => {};
    }
    
    /**
     * Start the WebSocket server
     */
    def start() -> Promise<void> {
        return new Promise((resolve, reject) => {
            // Check if we're in an environment that supports WebSocket servers
            if (!NativeWebSocketServer) {
                reject(Error("WebSocket server is not supported in this environment"));
                return;
            }
            
            try {
                self.server = new NativeWebSocketServer({
                    port: self.port,
                    host: self.host
                });
                
                self.server.on("connection", (client) => {
                    self.clients.add(client);
                    
                    client.on("message", (message) => {
                        let type = typeof message === "string" ? 
                                 WebSocketMessageType.TEXT : 
                                 WebSocketMessageType.BINARY;
                        
                        self.onmessage(client, message, type);
                    });
                    
                    client.on("close", (code, reason) => {
                        self.clients.delete(client);
                        self.onclose(client, code, reason);
                    });
                    
                    client.on("error", (error) => {
                        self.onerror(error);
                    });
                    
                    self.onconnection(client);
                });
                
                self.server.on("error", (error) => {
                    self.onerror(error);
                    reject(error);
                });
                
                self.server.on("listening", () => {
                    resolve();
                });
            } catch (error) {
                reject(error);
            }
        });
    }
    
    /**
     * Stop the WebSocket server
     */
    def stop() -> Promise<void> {
        return new Promise((resolve, reject) => {
            if (!self.server) {
                resolve();
                return;
            }
            
            // Close all client connections
            for (let client of self.clients) {
                client.close(WebSocketCloseCode.GOING_AWAY);
            }
            
            self.clients.clear();
            
            // Close the server
            self.server.close((error) => {
                if (error) {
                    reject(error);
                } else {
                    self.server = null;
                    resolve();
                }
            });
        });
    }
    
    /**
     * Broadcast a message to all connected clients
     */
    def broadcast(message: string) -> void {
        for (let client of self.clients) {
            try {
                client.send(message);
            } catch (error) {
                self.onerror(error);
            }
        }
    }
    
    /**
     * Broadcast binary data to all connected clients
     */
    def broadcastBinary(data: ArrayBuffer) -> void {
        for (let client of self.clients) {
            try {
                client.send(data);
            } catch (error) {
                self.onerror(error);
            }
        }
    }
}

/**
 * REST client for simplified API interactions
 */
class RESTClient {
    property baseUrl: string;
    property defaultHeaders: Map<string, string>;
    property timeout: int;
    
    def initialize(baseUrl: string, defaultHeaders: Map<string, string> = new Map(), timeout: int = 30000) {
        self.baseUrl = baseUrl.endsWith("/") ? baseUrl.slice(0, -1) : baseUrl;
        self.defaultHeaders = defaultHeaders;
        self.timeout = timeout;
        
        // Set default content type if not specified
        if (!self.defaultHeaders.has("Content-Type")) {
            self.defaultHeaders.set("Content-Type", "application/json");
        }
    }
    
    /**
     * Make a GET request
     */
    async def get(path: string, headers: Map<string, string> = new Map()) -> any {
        return self._request("GET", path, null, headers);
    }
    
    /**
     * Make a POST request
     */
    async def post(path: string, data: any, headers: Map<string, string> = new Map()) -> any {
        return self._request("POST", path, data, headers);
    }
    
    /**
     * Make a PUT request
     */
    async def put(path: string, data: any, headers: Map<string, string> = new Map()) -> any {
        return self._request("PUT", path, data, headers);
    }
    
    /**
     * Make a PATCH request
     */
    async def patch(path: string, data: any, headers: Map<string, string> = new Map()) -> any {
        return self._request("PATCH", path, data, headers);
    }
    
    /**
     * Make a DELETE request
     */
    async def delete(path: string, headers: Map<string, string> = new Map()) -> any {
        return self._request("DELETE", path, null, headers);
    }
    
    /**
     * Helper function to make HTTP requests
     */
    private async def _request(method: string, path: string, data: any?, headers: Map<string, string>) -> any {
        let url = path.startsWith("/") ? `${self.baseUrl}${path}` : `${self.baseUrl}/${path}`;
        
        // Combine default headers with request-specific headers
        let combinedHeaders = {};
        
        for (let [key, value] of self.defaultHeaders) {
            combinedHeaders[key] = value;
        }
        
        for (let [key, value] of headers) {
            combinedHeaders[key] = value;
        }
        
        // Prepare request options
        let options = {
            method,
            headers: combinedHeaders,
            timeout: self.timeout
        };
        
        // Add body for methods that support it
        if (data !== null && ["POST", "PUT", "PATCH"].includes(method)) {
            // If Content-Type is application/json, stringify the data
            if (combinedHeaders["Content-Type"] === "application/json") {
                options.body = JSON.stringify(data);
            } else {
                options.body = data;
            }
        }
        
        // Make the request
        try {
            let response = await http.fetch(url, options);
            
            // Check if response is successful
            if (!response.ok) {
                throw Error(`HTTP request failed with status ${response.status}: ${response.statusText}`);
            }
            
            // Parse response based on content type
            let contentType = response.headers.get("content-type");
            
            if (contentType && contentType.includes("application/json")) {
                return await response.json();
            } else {
                return await response.text();
            }
        } catch (error) {
            throw error;
        }
    }
}

/**
 * HTTP/2 client for high-performance HTTP requests
 */
class HTTP2Client {
    property authority: string;
    property client: any;
    property isSecure: bool;
    property defaultHeaders: Map<string, string>;
    property isConnected: bool;
    
    def initialize(authority: string, isSecure: bool = true, defaultHeaders: Map<string, string> = new Map()) {
        self.authority = authority;
        self.isSecure = isSecure;
        self.defaultHeaders = defaultHeaders;
        self.client = null;
        self.isConnected = false;
    }
    
    /**
     * Connect to the HTTP/2 server
     */
    async def connect() -> void {
        if (self.isConnected) {
            return;
        }
        
        try {
            if (self.isSecure) {
                self.client = NativeHTTP2.connect(`https://${self.authority}`);
            } else {
                self.client = NativeHTTP2.connect(`http://${self.authority}`);
            }
            
            self.isConnected = true;
            
            // Handle disconnection
            self.client.on("close", () => {
                self.isConnected = false;
                self.client = null;
            });
            
            self.client.on("error", (error) => {
                self.isConnected = false;
                self.client = null;
                throw error;
            });
        } catch (error) {
            throw Error(`Failed to connect to HTTP/2 server: ${error.message}`);
        }
    }
    
    /**
     * Make an HTTP/2 request
     */
    async def request(path: string, method: string = "GET", headers: Map<string, string> = new Map(), data: any? = null) -> {
        status: int,
        headers: Map<string, string>,
        body: string
    } {
        if (!self.isConnected) {
            await self.connect();
        }
        
        // Combine default headers with request-specific headers
        let combinedHeaders = {
            ":method": method,
            ":path": path,
            ":authority": self.authority,
            ":scheme": self.isSecure ? "https" : "http"
        };
        
        for (let [key, value] of self.defaultHeaders) {
            combinedHeaders[key] = value;
        }
        
        for (let [key, value] of headers) {
            combinedHeaders[key] = value;
        }
        
        // Make the request
        return new Promise((resolve, reject) => {
            try {
                let stream = self.client.request(combinedHeaders);
                let responseData = [];
                let responseHeaders = new Map();
                let status = 0;
                
                stream.on("response", (headers, flags) => {
                    status = parseInt(headers[":status"]);
                    
                    // Store response headers
                    for (let [key, value] of Object.entries(headers)) {
                        if (!key.startsWith(":")) {
                            responseHeaders.set(key, value);
                        }
                    }
                });
                
                stream.on("data", (chunk) => {
                    responseData.push(chunk);
                });
                
                stream.on("end", () => {
                    let body = Buffer.concat(responseData).toString();
                    
                    resolve({
                        status,
                        headers: responseHeaders,
                        body
                    });
                });
                
                stream.on("error", (error) => {
                    reject(Error(`HTTP/2 request error: ${error.message}`));
                });
                
                // Send request body if provided
                if (data !== null) {
                    if (typeof data === "string") {
                        stream.write(data);
                    } else if (data instanceof Buffer || data instanceof ArrayBuffer) {
                        stream.write(data);
                    } else {
                        stream.write(JSON.stringify(data));
                    }
                }
                
                stream.end();
            } catch (error) {
                reject(Error(`HTTP/2 request error: ${error.message}`));
            }
        });
    }
    
    /**
     * Make a GET request
     */
    async def get(path: string, headers: Map<string, string> = new Map()) -> {
        status: int,
        headers: Map<string, string>,
        body: string
    } {
        return self.request(path, "GET", headers);
    }
    
    /**
     * Make a POST request
     */
    async def post(path: string, data: any, headers: Map<string, string> = new Map()) -> {
        status: int,
        headers: Map<string, string>,
        body: string
    } {
        return self.request(path, "POST", headers, data);
    }
    
    /**
     * Close the HTTP/2 connection
     */
    def close() -> void {
        if (self.client) {
            self.client.close();
            self.client = null;
            self.isConnected = false;
        }
    }
}

/**
 * MQTT Client for IoT communication
 */
class MQTTClient {
    property broker: string;
    property clientId: string;
    property port: int;
    property username: string?;
    property password: string?;
    property useSSL: bool;
    property client: any;
    property isConnected: bool;
    property onConnect: fn() -> void;
    property onMessage: fn(topic: string, message: string) -> void;
    property onDisconnect: fn() -> void;
    property onError: fn(error: Error) -> void;
    
    def initialize(broker: string, clientId: string = "", options: {
        port?: int,
        username?: string,
        password?: string,
        useSSL?: bool
    } = {}) {
        self.broker = broker;
        self.clientId = clientId || `tocin_mqtt_${Math.floor(Math.random() * 1000000)}`;
        self.port = options.port || (options.useSSL ? 8883 : 1883);
        self.username = options.username;
        self.password = options.password;
        self.useSSL = options.useSSL || false;
        self.client = null;
        self.isConnected = false;
        self.onConnect = () => {};
        self.onMessage = (_, __) => {};
        self.onDisconnect = () => {};
        self.onError = (_) => {};
    }
    
    /**
     * Connect to the MQTT broker
     */
    async def connect() -> Promise<void> {
        if (self.isConnected) {
            return Promise.resolve();
        }
        
        return new Promise((resolve, reject) => {
            // Ensure MQTT client is available
            if (!NativeMQTT) {
                reject(Error("MQTT client is not supported in this environment"));
                return;
            }
            
            try {
                let options = {
                    clientId: self.clientId,
                    clean: true,
                    port: self.port,
                    protocol: self.useSSL ? "mqtts" : "mqtt"
                };
                
                if (self.username) {
                    options.username = self.username;
                }
                
                if (self.password) {
                    options.password = self.password;
                }
                
                self.client = NativeMQTT.connect(`${options.protocol}://${self.broker}`, options);
                
                self.client.on("connect", () => {
                    self.isConnected = true;
                    self.onConnect();
                    resolve();
                });
                
                self.client.on("message", (topic, message) => {
                    self.onMessage(topic, message.toString());
                });
                
                self.client.on("disconnect", () => {
                    self.isConnected = false;
                    self.onDisconnect();
                });
                
                self.client.on("error", (error) => {
                    self.onError(error);
                    reject(error);
                });
            } catch (error) {
                reject(error);
            }
        });
    }
    
    /**
     * Subscribe to a topic
     */
    def subscribe(topic: string, qos: int = 0) -> Promise<void> {
        if (!self.isConnected) {
            return Promise.reject(Error("Not connected to MQTT broker"));
        }
        
        return new Promise((resolve, reject) => {
            self.client.subscribe(topic, { qos }, (error) => {
                if (error) {
                    reject(error);
                } else {
                    resolve();
                }
            });
        });
    }
    
    /**
     * Unsubscribe from a topic
     */
    def unsubscribe(topic: string) -> Promise<void> {
        if (!self.isConnected) {
            return Promise.reject(Error("Not connected to MQTT broker"));
        }
        
        return new Promise((resolve, reject) => {
            self.client.unsubscribe(topic, (error) => {
                if (error) {
                    reject(error);
                } else {
                    resolve();
                }
            });
        });
    }
    
    /**
     * Publish a message to a topic
     */
    def publish(topic: string, message: string, qos: int = 0, retain: bool = false) -> Promise<void> {
        if (!self.isConnected) {
            return Promise.reject(Error("Not connected to MQTT broker"));
        }
        
        return new Promise((resolve, reject) => {
            self.client.publish(topic, message, { qos, retain }, (error) => {
                if (error) {
                    reject(error);
                } else {
                    resolve();
                }
            });
        });
    }
    
    /**
     * Disconnect from the MQTT broker
     */
    def disconnect() -> Promise<void> {
        if (!self.isConnected) {
            return Promise.resolve();
        }
        
        return new Promise((resolve, reject) => {
            self.client.end(false, () => {
                self.isConnected = false;
                self.onDisconnect();
                resolve();
            });
        });
    }
}

/**
 * WebRTC Peer Connection for P2P communication
 */
class RTCPeerConnection {
    property configuration: any;
    property nativeConnection: any;
    property localDescription: any?;
    property remoteDescription: any?;
    property onicecandidate: fn(candidate: any) -> void;
    property ontrack: fn(track: any) -> void;
    property ondatachannel: fn(channel: RTCDataChannel) -> void;
    
    def initialize(configuration: any = {}) {
        self.configuration = configuration;
        self.localDescription = null;
        self.remoteDescription = null;
        self.onicecandidate = (_) => {};
        self.ontrack = (_) => {};
        self.ondatachannel = (_) => {};
        
        // Check if WebRTC is supported
        if (!NativeRTCPeerConnection) {
            throw Error("WebRTC is not supported in this environment");
        }
        
        self.nativeConnection = new NativeRTCPeerConnection(configuration);
        
        // Set up event handlers
        self.nativeConnection.onicecandidate = (event) => {
            if (event.candidate) {
                self.onicecandidate(event.candidate);
            }
        };
        
        self.nativeConnection.ontrack = (event) => {
            self.ontrack(event.track);
        };
        
        self.nativeConnection.ondatachannel = (event) => {
            let dataChannel = new RTCDataChannel(event.channel);
            self.ondatachannel(dataChannel);
        };
    }
    
    /**
     * Create an offer
     */
    async def createOffer() -> any {
        try {
            let offer = await self.nativeConnection.createOffer();
            await self.nativeConnection.setLocalDescription(offer);
            self.localDescription = offer;
            return offer;
        } catch (error) {
            throw error;
        }
    }
    
    /**
     * Create an answer
     */
    async def createAnswer() -> any {
        try {
            let answer = await self.nativeConnection.createAnswer();
            await self.nativeConnection.setLocalDescription(answer);
            self.localDescription = answer;
            return answer;
        } catch (error) {
            throw error;
        }
    }
    
    /**
     * Set the remote description
     */
    async def setRemoteDescription(description: any) -> void {
        try {
            await self.nativeConnection.setRemoteDescription(description);
            self.remoteDescription = description;
        } catch (error) {
            throw error;
        }
    }
    
    /**
     * Add an ICE candidate
     */
    async def addIceCandidate(candidate: any) -> void {
        try {
            await self.nativeConnection.addIceCandidate(candidate);
        } catch (error) {
            throw error;
        }
    }
    
    /**
     * Create a data channel
     */
    def createDataChannel(label: string, options: any = {}) -> RTCDataChannel {
        let nativeChannel = self.nativeConnection.createDataChannel(label, options);
        return new RTCDataChannel(nativeChannel);
    }
    
    /**
     * Close the connection
     */
    def close() -> void {
        self.nativeConnection.close();
    }
}

/**
 * WebRTC Data Channel for P2P data transfer
 */
class RTCDataChannel {
    property nativeChannel: any;
    property label: string;
    property onopen: fn() -> void;
    property onmessage: fn(message: any) -> void;
    property onclose: fn() -> void;
    property onerror: fn(error: Error) -> void;
    
    def initialize(nativeChannel: any) {
        self.nativeChannel = nativeChannel;
        self.label = nativeChannel.label;
        self.onopen = () => {};
        self.onmessage = (_) => {};
        self.onclose = () => {};
        self.onerror = (_) => {};
        
        // Set up event handlers
        self.nativeChannel.onopen = () => {
            self.onopen();
        };
        
        self.nativeChannel.onmessage = (event) => {
            self.onmessage(event.data);
        };
        
        self.nativeChannel.onclose = () => {
            self.onclose();
        };
        
        self.nativeChannel.onerror = (error) => {
            self.onerror(error);
        };
    }
    
    /**
     * Send a message over the data channel
     */
    def send(message: string | ArrayBuffer) -> bool {
        try {
            self.nativeChannel.send(message);
            return true;
        } catch (error) {
            self.onerror(error);
            return false;
        }
    }
    
    /**
     * Close the data channel
     */
    def close() -> void {
        self.nativeChannel.close();
    }
    
    /**
     * Check if the data channel is open
     */
    def isOpen() -> bool {
        return self.nativeChannel.readyState === "open";
    }
}

export {
    WebSocketState,
    WebSocketMessageType,
    WebSocketCloseCode,
    WebSocket,
    WebSocketServer,
    RESTClient,
    HTTP2Client,
    MQTTClient,
    RTCPeerConnection,
    RTCDataChannel
} 
