// Comprehensive Tocin Compiler Integration Test
// This test exercises all major language features

// Basic types and variables
let x: int = 42;
let y: float = 3.14;
let z: string = "Hello, Tocin!";
let flag: bool = true;
let nullable: string? = null;

// Arrays and collections
let numbers: list<int> = [1, 2, 3, 4, 5];
let names: list<string> = ["Alice", "Bob", "Charlie"];
let matrix: list<list<int>> = [[1, 2], [3, 4]];

// Dictionaries
let scores: dict<string, int> = {"Alice": 95, "Bob": 87, "Charlie": 92};

// Functions
def add(a: int, b: int): int {
    return a + b;
}

def greet(name: string): string {
    return "Hello, " + name + "!";
}

def factorial(n: int): int {
    if n <= 1 {
        return 1;
    }
    return n * factorial(n - 1);
}

// Lambda expressions
let square = (x: int) => x * x;
let isEven = (x: int) => x % 2 == 0;

// Control flow
def testControlFlow(): int {
    let result = 0;
    
    // If-else
    if x > 40 {
        result = result + 1;
    } else {
        result = result - 1;
    }
    
    // While loop
    let i = 0;
    while i < 5 {
        result = result + i;
        i = i + 1;
    }
    
    // For loop
    for num in numbers {
        result = result + num;
    }
    
    return result;
}

// Classes and objects
class Point {
    let x: int;
    let y: int;
    
    def constructor(x: int, y: int) {
        this.x = x;
        this.y = y;
    }
    
    def distance(other: Point): float {
        let dx = this.x - other.x;
        let dy = this.y - other.y;
        return sqrt(dx * dx + dy * dy);
    }
    
    def toString(): string {
        return "Point(" + this.x + ", " + this.y + ")";
    }
}

// Traits
trait Printable {
    def print(): void;
}

trait Comparable<T> {
    def compare(other: T): int;
}

impl Printable for Point {
    def print(): void {
        println(this.toString());
    }
}

impl Comparable<Point> for Point {
    def compare(other: Point): int {
        if this.x < other.x {
            return -1;
        } else if this.x > other.x {
            return 1;
        } else {
            return this.y - other.y;
        }
    }
}

// Generics
class Stack<T> {
    let items: list<T>;
    
    def constructor() {
        this.items = [];
    }
    
    def push(item: T): void {
        this.items = [item] + this.items;
    }
    
    def pop(): T? {
        if this.items.isEmpty() {
            return null;
        }
        let item = this.items[0];
        this.items = this.items.skip(1);
        return item;
    }
    
    def isEmpty(): bool {
        return this.items.isEmpty();
    }
}

// Error handling with Option/Result
def safeDivide(a: int, b: int): option<int> {
    if b == 0 {
        return none<int>();
    }
    return some<int>(a / b);
}

def parseNumber(str: string): result<int, string> {
    // Simulate parsing
    if str == "42" {
        return ok<int, string>(42);
    }
    return err<int, string>("Invalid number: " + str);
}

// Null safety
def processName(name: string?): string {
    return name ?: "Unknown";
}

def getLength(str: string?): int {
    return str?.length ?: 0;
}

// LINQ-style operations
def testLinq(): list<int> {
    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    
    // Filter and transform
    let evens = numbers.where(x => x % 2 == 0);
    let squares = evens.select(x => x * x);
    let sum = squares.sum();
    
    // Ordering
    let sorted = numbers.orderBy(x => x);
    let reversed = sorted.reverse();
    
    // Aggregation
    let count = numbers.count();
    let average = numbers.average();
    let max = numbers.max();
    let min = numbers.min();
    
    return squares.toList();
}

// Concurrency
def testConcurrency(): void {
    let ch: channel<int> = new channel<int>();
    
    // Launch goroutines
    go(sendNumbers(ch));
    go(receiveNumbers(ch));
    
    // Async/await
    let future = async(computeAsync());
    let result = await(future);
}

def sendNumbers(ch: channel<int>): void {
    for i in range(1, 10) {
        ch <- i;
    }
    ch.close();
}

def receiveNumbers(ch: channel<int>): void {
    while true {
        let value = <-ch;
        if value == null {
            break;
        }
        println("Received: " + value);
    }
}

def computeAsync(): int {
    // Simulate async computation
    return 42;
}

// FFI (Foreign Function Interface)
def testFFI(): void {
    // Python FFI
    let pyResult = ffi.python.call("len", [["a", "b", "c"]]);
    let pyEval = ffi.python.eval("2 + 2");
    
    // JavaScript FFI
    let jsResult = ffi.javascript.call("eval", ["1 + 2 + 3"]);
    let jsEval = ffi.javascript.eval("Math.max(1, 2, 3)");
    
    // C++ FFI
    let cppResult = ffi.cpp.call("add", [10, 20]);
}

// Pattern matching
def testPatternMatching(value: option<int>): string {
    match value {
        case some(x) => return "Got: " + x;
        case none() => return "Nothing";
    }
}

def testListPatternMatching(list: list<int>): string {
    match list {
        case [] => return "Empty";
        case [x] => return "Single: " + x;
        case [x, y] => return "Pair: " + x + ", " + y;
        case [x, ...rest] => return "Head: " + x + ", Rest: " + rest.length;
    }
}

// Extension methods
extension String {
    def repeat(times: int): string {
        let result = "";
        for i in range(0, times) {
            result = result + this;
        }
        return result;
    }
    
    def reverse(): string {
        let chars = this.toCharArray();
        let reversed = "";
        for i in range(chars.length - 1, -1, -1) {
            reversed = reversed + chars[i];
        }
        return reversed;
    }
}

// Main function to run all tests
def main(): int {
    println("=== Tocin Compiler Integration Test ===");
    
    // Test basic operations
    let sum = add(10, 20);
    println("Sum: " + sum);
    
    let message = greet("Tocin");
    println(message);
    
    let fact = factorial(5);
    println("Factorial of 5: " + fact);
    
    // Test classes
    let p1 = new Point(0, 0);
    let p2 = new Point(3, 4);
    let dist = p1.distance(p2);
    println("Distance: " + dist);
    
    // Test generics
    let stack = new Stack<int>();
    stack.push(1);
    stack.push(2);
    stack.push(3);
    
    while !stack.isEmpty() {
        let item = stack.pop();
        if item != null {
            println("Popped: " + item);
        }
    }
    
    // Test error handling
    let divResult = safeDivide(10, 2);
    match divResult {
        case some(result) => println("Division result: " + result);
        case none() => println("Division failed");
    }
    
    let parseResult = parseNumber("42");
    match parseResult {
        case ok(value) => println("Parsed: " + value);
        case err(message) => println("Parse error: " + message);
    }
    
    // Test null safety
    let name: string? = "Alice";
    let processed = processName(name);
    println("Processed name: " + processed);
    
    let nullName: string? = null;
    let processedNull = processName(nullName);
    println("Processed null name: " + processedNull);
    
    // Test LINQ
    let linqResult = testLinq();
    println("LINQ result length: " + linqResult.length);
    
    // Test pattern matching
    let optValue = some<int>(42);
    let matchResult = testPatternMatching(optValue);
    println("Pattern match result: " + matchResult);
    
    let listMatch = testListPatternMatching([1, 2, 3]);
    println("List pattern match: " + listMatch);
    
    // Test extension methods
    let repeated = "Hello ".repeat(3);
    println("Repeated: " + repeated);
    
    let reversed = "Hello".reverse();
    println("Reversed: " + reversed);
    
    // Test FFI (if available)
    try {
        testFFI();
        println("FFI tests completed");
    } catch {
        println("FFI not available");
    }
    
    println("=== All tests completed successfully ===");
    return 0;
}

// Run the main function
main(); 