// Comprehensive test for all Tocin features
// This test demonstrates the complete functionality of the enhanced compiler

// Import standard library modules
import std.math;
import std.string;
import std.collections;
import std.concurrency;

// Test macro system
macro debug_log(message) {
    println("[" + __FILE__ + ":" + __LINE__ + "] " + message);
}

macro assert(condition, message) {
    if (!condition) {
        throw Error("Assertion failed: " + message);
    }
}

macro measure_time(operation) {
    let start = Date.now();
    operation();
    let end = Date.now();
    println("Operation took " + (end - start) + "ms");
}

// Test async/await functionality
async def fetchData(url: string) -> string {
    // Simulate network request
    await delay(1000);
    return "Data from " + url;
}

async def processData(data: string) -> string {
    // Simulate data processing
    await delay(500);
    return data.toUpperCase();
}

async def mainAsync() -> void {
    println("Starting async operations...");
    
    // Create multiple async tasks
    let future1 = fetchData("https://api.example.com/users");
    let future2 = fetchData("https://api.example.com/posts");
    
    // Wait for both to complete
    let userData = await future1;
    let postData = await future2;
    
    // Process the data
    let processedUserData = await processData(userData);
    let processedPostData = await processData(postData);
    
    println("User data: " + processedUserData);
    println("Post data: " + processedPostData);
}

// Test concurrency with channels
def producer(ch: channel<int>) -> void {
    for i in range(1, 11) {
        ch <- i;
        delay(100);
    }
    ch.close();
}

def consumer(ch: channel<int>) -> void {
    while true {
        let value = <-ch;
        if value == null {
            break;
        }
        println("Consumed: " + value);
    }
}

// Test ownership and move semantics
def testOwnership() -> void {
    let owned = new Owned<string>("Hello");
    let borrowed = new Borrowed<string>(owned);
    
    // Move ownership
    let moved = move(owned);
    println("Moved value: " + moved.value);
    
    // This would cause an error: println(owned.value);
}

// Test null safety
def testNullSafety() -> void {
    let nullable: string? = "Hello";
    let nonNull: string = "World";
    
    // Safe call operator
    let length = nullable?.length() ?? 0;
    println("Length: " + length);
    
    // Null check
    if (nullable != null) {
        println("Value: " + nullable);
    }
}

// Test pattern matching
def testPatternMatching(value: any) -> string {
    match value {
        case string(s) => return "String: " + s;
        case int(i) => return "Integer: " + i;
        case bool(b) => return "Boolean: " + b;
        case list(l) => return "List with " + l.length + " items";
        case map(m) => return "Map with " + m.size + " entries";
        case null => return "Null value";
        default => return "Unknown type";
    }
}

// Test traits and generics
trait Printable<T> {
    def print() -> void;
    def toString() -> string;
}

trait Comparable<T> {
    def compare(other: T) -> int;
}

class Person implements Printable<Person>, Comparable<Person> {
    property name: string;
    property age: int;
    
    def initialize(name: string, age: int) {
        self.name = name;
        self.age = age;
    }
    
    def print() -> void {
        println(self.toString());
    }
    
    def toString() -> string {
        return "Person{name=" + self.name + ", age=" + self.age + "}";
    }
    
    def compare(other: Person) -> int {
        return self.age - other.age;
    }
}

// Test LINQ-style operations
def testLINQ() -> void {
    let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
    
    let result = numbers
        .where(x => x % 2 == 0)
        .map(x => x * x)
        .reduce((acc, x) => acc + x, 0);
    
    println("Sum of squares of even numbers: " + result);
}

// Test error handling with Result type
def divide(a: int, b: int) -> Result<int, string> {
    if (b == 0) {
        return Err("Division by zero");
    }
    return Ok(a / b);
}

def testErrorHandling() -> void {
    let result1 = divide(10, 2);
    let result2 = divide(10, 0);
    
    match result1 {
        case Ok(value) => println("Result 1: " + value);
        case Err(error) => println("Error 1: " + error);
    }
    
    match result2 {
        case Ok(value) => println("Result 2: " + value);
        case Err(error) => println("Error 2: " + error);
    }
}

// Test FFI (Foreign Function Interface)
def testFFI() -> void {
    // Python FFI
    let pyResult = ffi.python.call("len", [["a", "b", "c"]]);
    println("Python result: " + pyResult);
    
    // JavaScript FFI
    let jsResult = ffi.javascript.call("eval", ["Math.max(1, 2, 3)"]);
    println("JavaScript result: " + jsResult);
    
    // C++ FFI
    let cppResult = ffi.cpp.call("add", [10, 20]);
    println("C++ result: " + cppResult);
}

// Test extension methods
extension string {
    def reverse() -> string {
        let chars = self.split("");
        return chars.reverse().join("");
    }
    
    def isPalindrome() -> bool {
        return self == self.reverse();
    }
}

def testExtensions() -> void {
    let text = "racecar";
    println("Is palindrome: " + text.isPalindrome());
    println("Reversed: " + text.reverse());
}

// Test package manager functionality
def testPackageManager() -> void {
    // This would be called by the package manager
    println("Package manager test - would install dependencies");
}

// Test WebAssembly target
def testWASM() -> void {
    // This code can be compiled to WebAssembly
    let result = 0;
    for i in range(1, 1001) {
        result += i;
    }
    println("WASM test result: " + result);
}

// Test debugger functionality
def testDebugger() -> void {
    let x = 10;
    let y = 20;
    let z = x + y; // Breakpoint here
    
    println("Debugger test: x=" + x + ", y=" + y + ", z=" + z);
}

// Main function that tests everything
def main() -> void {
    println("=== Tocin Complete Feature Test ===");
    
    // Test macros
    debug_log("Testing macro system");
    assert(2 + 2 == 4, "Basic arithmetic");
    
    // Test async/await
    println("\n=== Testing Async/Await ===");
    mainAsync();
    
    // Test concurrency
    println("\n=== Testing Concurrency ===");
    let ch = new channel<int>();
    go(producer(ch));
    go(consumer(ch));
    
    // Test ownership
    println("\n=== Testing Ownership ===");
    testOwnership();
    
    // Test null safety
    println("\n=== Testing Null Safety ===");
    testNullSafety();
    
    // Test pattern matching
    println("\n=== Testing Pattern Matching ===");
    println(testPatternMatching("Hello"));
    println(testPatternMatching(42));
    println(testPatternMatching(true));
    println(testPatternMatching([1, 2, 3]));
    
    // Test traits and generics
    println("\n=== Testing Traits and Generics ===");
    let person1 = new Person("Alice", 30);
    let person2 = new Person("Bob", 25);
    person1.print();
    println("Comparison: " + person1.compare(person2));
    
    // Test LINQ
    println("\n=== Testing LINQ ===");
    testLINQ();
    
    // Test error handling
    println("\n=== Testing Error Handling ===");
    testErrorHandling();
    
    // Test FFI
    println("\n=== Testing FFI ===");
    testFFI();
    
    // Test extensions
    println("\n=== Testing Extensions ===");
    testExtensions();
    
    // Test package manager
    println("\n=== Testing Package Manager ===");
    testPackageManager();
    
    // Test WebAssembly
    println("\n=== Testing WebAssembly ===");
    testWASM();
    
    // Test debugger
    println("\n=== Testing Debugger ===");
    testDebugger();
    
    println("\n=== All Tests Completed ===");
}

// Run the main function
main(); 