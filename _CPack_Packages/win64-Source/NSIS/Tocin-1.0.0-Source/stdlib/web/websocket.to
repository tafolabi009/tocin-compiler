/**
 * Tocin Standard Library - Web Module (WebSocket)
 * Provides WebSocket client and server functionality.
 */

import net.socket;
import net.tls;
import crypto.sha1;
import crypto.base64;

/**
 * WebSocket message types
 */
enum WebSocketOpCode {
    CONTINUATION = 0x0,
    TEXT = 0x1,
    BINARY = 0x2,
    CLOSE = 0x8,
    PING = 0x9,
    PONG = 0xA
}

/**
 * WebSocket connection status
 */
enum WebSocketState {
    CONNECTING,
    OPEN,
    CLOSING,
    CLOSED
}

/**
 * WebSocket frame structure
 */
class WebSocketFrame {
    property fin: bool;
    property rsv1: bool;
    property rsv2: bool;
    property rsv3: bool;
    property opcode: WebSocketOpCode;
    property mask: bool;
    property payload: Buffer;
    property maskingKey: Buffer?;
    
    def initialize(opcode: WebSocketOpCode, payload: Buffer, fin: bool = true, mask: bool = false, 
                   maskingKey: Buffer? = null, rsv1: bool = false, rsv2: bool = false, rsv3: bool = false) {
        self.fin = fin;
        self.rsv1 = rsv1;
        self.rsv2 = rsv2;
        self.rsv3 = rsv3;
        self.opcode = opcode;
        self.mask = mask;
        self.payload = payload;
        self.maskingKey = maskingKey;
    }
    
    // Encode the frame to a buffer to send over the wire
    def encode() -> Buffer {
        let payloadLength = self.payload.length;
        let headerSize = 2;
        
        if (payloadLength > 65535) {
            headerSize += 8;
        } else if (payloadLength > 125) {
            headerSize += 2;
        }
        
        if (self.mask) {
            headerSize += 4;
        }
        
        let frame = Buffer.alloc(headerSize + payloadLength);
        
        // Set FIN, RSV1-3, and opcode
        frame[0] = (self.fin ? 0x80 : 0x00) | 
                  (self.rsv1 ? 0x40 : 0x00) | 
                  (self.rsv2 ? 0x20 : 0x00) | 
                  (self.rsv3 ? 0x10 : 0x00) | 
                  (self.opcode & 0x0F);
        
        // Set mask bit and payload length
        if (payloadLength <= 125) {
            frame[1] = (self.mask ? 0x80 : 0x00) | payloadLength;
        } else if (payloadLength <= 65535) {
            frame[1] = (self.mask ? 0x80 : 0x00) | 126;
            frame[2] = (payloadLength >> 8) & 0xFF;
            frame[3] = payloadLength & 0xFF;
        } else {
            frame[1] = (self.mask ? 0x80 : 0x00) | 127;
            // Set extended payload length (64 bits)
            for (let i = 0; i < 8; i++) {
                frame[2 + i] = (payloadLength >> ((7 - i) * 8)) & 0xFF;
            }
        }
        
        // Add masking key if the frame is masked
        let dataOffset = headerSize - (self.mask ? 4 : 0);
        
        if (self.mask && self.maskingKey) {
            for (let i = 0; i < 4; i++) {
                frame[dataOffset - 4 + i] = self.maskingKey[i];
            }
            
            // Apply mask to payload
            for (let i = 0; i < payloadLength; i++) {
                frame[dataOffset + i] = self.payload[i] ^ self.maskingKey[i % 4];
            }
        } else {
            // Copy payload without masking
            for (let i = 0; i < payloadLength; i++) {
                frame[dataOffset + i] = self.payload[i];
            }
        }
        
        return frame;
    }
    
    // Decode a frame from a buffer
    static def decode(buffer: Buffer, offset: int = 0) -> { frame: WebSocketFrame, bytesRead: int } {
        if (buffer.length < offset + 2) {
            throw ValueError("Buffer too small to contain a WebSocket frame");
        }
        
        let fin = (buffer[offset] & 0x80) != 0;
        let rsv1 = (buffer[offset] & 0x40) != 0;
        let rsv2 = (buffer[offset] & 0x20) != 0;
        let rsv3 = (buffer[offset] & 0x10) != 0;
        let opcode = buffer[offset] & 0x0F;
        
        let mask = (buffer[offset + 1] & 0x80) != 0;
        let payloadLength = buffer[offset + 1] & 0x7F;
        
        let headerSize = 2;
        
        // Handle extended payload length
        if (payloadLength == 126) {
            if (buffer.length < offset + headerSize + 2) {
                throw ValueError("Buffer too small to contain extended payload length");
            }
            
            payloadLength = (buffer[offset + 2] << 8) | buffer[offset + 3];
            headerSize += 2;
        } else if (payloadLength == 127) {
            if (buffer.length < offset + headerSize + 8) {
                throw ValueError("Buffer too small to contain extended payload length");
            }
            
            // Read 64-bit payload length
            payloadLength = 0;
            for (let i = 0; i < 8; i++) {
                payloadLength = (payloadLength << 8) | buffer[offset + 2 + i];
            }
            
            headerSize += 8;
        }
        
        // Read masking key if present
        let maskingKey = null;
        if (mask) {
            if (buffer.length < offset + headerSize + 4) {
                throw ValueError("Buffer too small to contain masking key");
            }
            
            maskingKey = Buffer.alloc(4);
            for (let i = 0; i < 4; i++) {
                maskingKey[i] = buffer[offset + headerSize + i];
            }
            
            headerSize += 4;
        }
        
        // Check if enough data for payload
        if (buffer.length < offset + headerSize + payloadLength) {
            throw ValueError("Buffer too small to contain payload");
        }
        
        // Extract payload
        let payload = Buffer.alloc(payloadLength);
        if (mask && maskingKey) {
            // Unmask the payload
            for (let i = 0; i < payloadLength; i++) {
                payload[i] = buffer[offset + headerSize + i] ^ maskingKey[i % 4];
            }
        } else {
            // Copy payload without unmasking
            for (let i = 0; i < payloadLength; i++) {
                payload[i] = buffer[offset + headerSize + i];
            }
        }
        
        let frame = WebSocketFrame(opcode, payload, fin, mask, maskingKey, rsv1, rsv2, rsv3);
        return { frame, bytesRead: headerSize + payloadLength };
    }
}

/**
 * WebSocket client implementation
 */
class WebSocketClient {
    property url: string;
    property socket: Socket?;
    property state: WebSocketState;
    property onOpen: fn() -> void;
    property onMessage: fn(string | Buffer) -> void;
    property onClose: fn(int, string) -> void;
    property onError: fn(Error) -> void;
    property headers: Map<string, string>;
    property buffer: Buffer;
    
    def initialize(url: string, headers: Map<string, string>? = null) {
        self.url = url;
        self.socket = null;
        self.state = WebSocketState.CLOSED;
        self.onOpen = () => {};
        self.onMessage = (data) => {};
        self.onClose = (code, reason) => {};
        self.onError = (err) => {};
        self.headers = headers ?? {};
        self.buffer = Buffer.alloc(0);
    }
    
    // Connect to the WebSocket server
    async def connect() {
        try {
            self.state = WebSocketState.CONNECTING;
            
            // Parse URL
            let urlObj = URL.parse(self.url);
            let isSecure = urlObj.protocol == "wss:";
            let host = urlObj.hostname;
            let port = urlObj.port ? int.parse(urlObj.port) : (isSecure ? 443 : 80);
            let path = urlObj.pathname + (urlObj.search || "");
            
            // Generate a random key for the WebSocket handshake
            let key = "";
            for (let i = 0; i < 16; i++) {
                key += String.fromCharCode(math.floor(math.random() * 256));
            }
            let base64Key = crypto.base64.encode(key);
            
            // Create socket
            if (isSecure) {
                self.socket = await TLSSocket.connect(host, port);
            } else {
                self.socket = await Socket.connect(host, port);
            }
            
            // Build and send handshake request
            let handshake = "GET " + path + " HTTP/1.1\r\n" +
                           "Host: " + host + ":" + port + "\r\n" +
                           "Upgrade: websocket\r\n" +
                           "Connection: Upgrade\r\n" +
                           "Sec-WebSocket-Key: " + base64Key + "\r\n" +
                           "Sec-WebSocket-Version: 13\r\n";
            
            // Add custom headers
            for (let name in self.headers) {
                handshake += name + ": " + self.headers[name] + "\r\n";
            }
            
            handshake += "\r\n";
            
            await self.socket!.write(handshake);
            
            // Read handshake response
            let response = await self.socket!.readUntil("\r\n\r\n");
            let lines = response.split("\r\n");
            
            // Verify the response
            if (!lines[0].includes("101")) {
                self.close(1002, "Invalid handshake response");
                throw Error("WebSocket handshake failed: " + lines[0]);
            }
            
            // Check for Upgrade header
            let upgradeHeader = false;
            let connectionHeader = false;
            let acceptHeader = "";
            
            for (let i = 1; i < lines.length; i++) {
                if (lines[i] == "") continue;
                
                let colonIndex = lines[i].indexOf(":");
                if (colonIndex < 0) continue;
                
                let name = lines[i].substring(0, colonIndex).trim().toLowerCase();
                let value = lines[i].substring(colonIndex + 1).trim();
                
                if (name == "upgrade" && value.toLowerCase() == "websocket") {
                    upgradeHeader = true;
                } else if (name == "connection" && value.toLowerCase().includes("upgrade")) {
                    connectionHeader = true;
                } else if (name == "sec-websocket-accept") {
                    acceptHeader = value;
                }
            }
            
            if (!upgradeHeader || !connectionHeader) {
                self.close(1002, "Invalid handshake response");
                throw Error("WebSocket handshake failed: missing required headers");
            }
            
            // Calculate expected accept header
            let expectedAccept = crypto.base64.encode(
                crypto.sha1.hash(base64Key + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11")
            );
            
            if (acceptHeader != expectedAccept) {
                self.close(1002, "Invalid Sec-WebSocket-Accept header");
                throw Error("WebSocket handshake failed: invalid accept header");
            }
            
            // Handshake successful
            self.state = WebSocketState.OPEN;
            self.onOpen();
            
            // Start reading frames
            self._startReading();
        } catch (err) {
            self.state = WebSocketState.CLOSED;
            self.onError(err);
        }
    }
    
    // Close the WebSocket connection
    def close(code: int = 1000, reason: string = "") {
        if (self.state == WebSocketState.CLOSING || self.state == WebSocketState.CLOSED) {
            return;
        }
        
        self.state = WebSocketState.CLOSING;
        
        // Send close frame if socket is connected
        if (self.socket && self.socket.isConnected()) {
            let payload;
            if (reason) {
                payload = Buffer.alloc(2 + reason.length);
                payload[0] = (code >> 8) & 0xFF;
                payload[1] = code & 0xFF;
                
                for (let i = 0; i < reason.length; i++) {
                    payload[2 + i] = reason.charCodeAt(i);
                }
            } else {
                payload = Buffer.alloc(2);
                payload[0] = (code >> 8) & 0xFF;
                payload[1] = code & 0xFF;
            }
            
            let frame = WebSocketFrame(WebSocketOpCode.CLOSE, payload, true, true, self._generateMaskingKey());
            self._sendFrame(frame);
        }
        
        // Clean up
        if (self.socket) {
            self.socket.close();
            self.socket = null;
        }
        
        self.state = WebSocketState.CLOSED;
        self.onClose(code, reason);
    }
    
    // Send a text message
    def send(message: string) {
        if (self.state != WebSocketState.OPEN) {
            throw Error("WebSocket is not open");
        }
        
        let payload = Buffer.from(message);
        let frame = WebSocketFrame(WebSocketOpCode.TEXT, payload, true, true, self._generateMaskingKey());
        self._sendFrame(frame);
    }
    
    // Send a binary message
    def sendBinary(data: Buffer) {
        if (self.state != WebSocketState.OPEN) {
            throw Error("WebSocket is not open");
        }
        
        let frame = WebSocketFrame(WebSocketOpCode.BINARY, data, true, true, self._generateMaskingKey());
        self._sendFrame(frame);
    }
    
    // Send a ping message
    def ping(data: string? = null) {
        if (self.state != WebSocketState.OPEN) {
            throw Error("WebSocket is not open");
        }
        
        let payload = data ? Buffer.from(data) : Buffer.alloc(0);
        let frame = WebSocketFrame(WebSocketOpCode.PING, payload, true, true, self._generateMaskingKey());
        self._sendFrame(frame);
    }
    
    // Generate a random masking key
    private def _generateMaskingKey() -> Buffer {
        let key = Buffer.alloc(4);
        for (let i = 0; i < 4; i++) {
            key[i] = math.floor(math.random() * 256);
        }
        return key;
    }
    
    // Send a WebSocket frame
    private def _sendFrame(frame: WebSocketFrame) {
        if (!self.socket || !self.socket.isConnected()) {
            return;
        }
        
        let data = frame.encode();
        self.socket.write(data);
    }
    
    // Start reading frames from the socket
    private async def _startReading() {
        try {
            while (self.socket && self.socket.isConnected() && self.state == WebSocketState.OPEN) {
                let chunk = await self.socket.read();
                if (!chunk || chunk.length == 0) {
                    break;
                }
                
                // Append to buffer
                let newBuffer = Buffer.alloc(self.buffer.length + chunk.length);
                newBuffer.copy(self.buffer, 0, 0, self.buffer.length);
                newBuffer.copy(chunk, self.buffer.length, 0, chunk.length);
                self.buffer = newBuffer;
                
                // Process all complete frames in the buffer
                self._processBuffer();
            }
        } catch (err) {
            self.onError(err);
        }
        
        // If we got here, the connection was closed
        if (self.state != WebSocketState.CLOSED) {
            self.close(1006, "Connection closed abnormally");
        }
    }
    
    // Process all complete frames in the buffer
    private def _processBuffer() {
        while (self.buffer.length >= 2) {
            try {
                let result = WebSocketFrame.decode(self.buffer);
                let frame = result.frame;
                let bytesRead = result.bytesRead;
                
                // Remove the processed frame from the buffer
                let newBuffer = Buffer.alloc(self.buffer.length - bytesRead);
                newBuffer.copy(self.buffer, bytesRead, 0, self.buffer.length - bytesRead);
                self.buffer = newBuffer;
                
                // Handle the frame
                self._handleFrame(frame);
            } catch (err) {
                // Not enough data for a complete frame
                break;
            }
        }
    }
    
    // Handle a received WebSocket frame
    private def _handleFrame(frame: WebSocketFrame) {
        switch (frame.opcode) {
            case WebSocketOpCode.TEXT:
                let message = frame.payload.toString("utf8");
                self.onMessage(message);
                break;
                
            case WebSocketOpCode.BINARY:
                self.onMessage(frame.payload);
                break;
                
            case WebSocketOpCode.CLOSE:
                let code = 1005; // No status code present
                let reason = "";
                
                if (frame.payload.length >= 2) {
                    code = (frame.payload[0] << 8) | frame.payload[1];
                    
                    if (frame.payload.length > 2) {
                        reason = frame.payload.toString("utf8", 2);
                    }
                }
                
                self.close(code, reason);
                break;
                
            case WebSocketOpCode.PING:
                // Respond with a pong containing the same payload
                let pongFrame = WebSocketFrame(WebSocketOpCode.PONG, frame.payload, true, true, self._generateMaskingKey());
                self._sendFrame(pongFrame);
                break;
                
            case WebSocketOpCode.PONG:
                // Pong received (no action needed)
                break;
                
            case WebSocketOpCode.CONTINUATION:
                // Continuation frames not implemented in this simple example
                break;
        }
    }
}

/**
 * WebSocket server implementation
 */
class WebSocketServer {
    property port: int;
    property host: string;
    property server: net.Server?;
    property clients: Set<WebSocketConnection>;
    property onConnection: fn(WebSocketConnection) -> void;
    property onError: fn(Error) -> void;
    
    def initialize(port: int = 8080, host: string = "127.0.0.1") {
        self.port = port;
        self.host = host;
        self.server = null;
        self.clients = new Set();
        self.onConnection = (client) => {};
        self.onError = (err) => {};
    }
    
    // Start the WebSocket server
    async def listen() {
        self.server = net.createServer(async (socket) => {
            try {
                // Wait for HTTP upgrade request
                let request = await socket.readUntil("\r\n\r\n");
                let lines = request.split("\r\n");
                
                // Parse request
                let upgradeHeader = false;
                let connectionHeader = false;
                let key = "";
                let headers = {};
                
                for (let i = 1; i < lines.length; i++) {
                    if (lines[i] == "") continue;
                    
                    let colonIndex = lines[i].indexOf(":");
                    if (colonIndex < 0) continue;
                    
                    let name = lines[i].substring(0, colonIndex).trim().toLowerCase();
                    let value = lines[i].substring(colonIndex + 1).trim();
                    headers[name] = value;
                    
                    if (name == "upgrade" && value.toLowerCase() == "websocket") {
                        upgradeHeader = true;
                    } else if (name == "connection" && value.toLowerCase().includes("upgrade")) {
                        connectionHeader = true;
                    } else if (name == "sec-websocket-key") {
                        key = value;
                    }
                }
                
                // Check if it's a valid WebSocket upgrade request
                if (!upgradeHeader || !connectionHeader || !key) {
                    await socket.write("HTTP/1.1 400 Bad Request\r\n\r\n");
                    socket.close();
                    return;
                }
                
                // Calculate the accept key
                let acceptKey = crypto.base64.encode(
                    crypto.sha1.hash(key + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11")
                );
                
                // Send handshake response
                let response = "HTTP/1.1 101 Switching Protocols\r\n" +
                              "Upgrade: websocket\r\n" +
                              "Connection: Upgrade\r\n" +
                              "Sec-WebSocket-Accept: " + acceptKey + "\r\n\r\n";
                
                await socket.write(response);
                
                // Create WebSocket connection
                let connection = WebSocketConnection(socket);
                self.clients.add(connection);
                
                // Set up event listeners
                connection.onClose = () => {
                    self.clients.delete(connection);
                };
                
                // Start processing frames
                connection._startReading();
                
                // Notify about the new connection
                self.onConnection(connection);
            } catch (err) {
                self.onError(err);
                socket.close();
            }
        });
        
        await self.server!.listen(self.port, self.host);
        console.log("WebSocket server listening on ws://" + self.host + ":" + self.port);
        
        return self.server;
    }
    
    // Close the server
    def close() {
        if (self.server) {
            self.server.close();
            self.server = null;
        }
        
        // Close all client connections
        for (let client of self.clients) {
            client.close(1001, "Server shutting down");
        }
        
        self.clients.clear();
    }
    
    // Broadcast a message to all connected clients
    def broadcast(message: string) {
        for (let client of self.clients) {
            if (client.state == WebSocketState.OPEN) {
                client.send(message);
            }
        }
    }
    
    // Broadcast binary data to all connected clients
    def broadcastBinary(data: Buffer) {
        for (let client of self.clients) {
            if (client.state == WebSocketState.OPEN) {
                client.sendBinary(data);
            }
        }
    }
}

/**
 * WebSocket connection (server-side)
 */
class WebSocketConnection {
    property socket: Socket;
    property state: WebSocketState;
    property onMessage: fn(string | Buffer) -> void;
    property onClose: fn(int, string) -> void;
    property onError: fn(Error) -> void;
    property buffer: Buffer;
    
    def initialize(socket: Socket) {
        self.socket = socket;
        self.state = WebSocketState.OPEN;
        self.onMessage = (data) => {};
        self.onClose = (code, reason) => {};
        self.onError = (err) => {};
        self.buffer = Buffer.alloc(0);
    }
    
    // Close the WebSocket connection
    def close(code: int = 1000, reason: string = "") {
        if (self.state == WebSocketState.CLOSING || self.state == WebSocketState.CLOSED) {
            return;
        }
        
        self.state = WebSocketState.CLOSING;
        
        // Send close frame
        let payload;
        if (reason) {
            payload = Buffer.alloc(2 + reason.length);
            payload[0] = (code >> 8) & 0xFF;
            payload[1] = code & 0xFF;
            
            for (let i = 0; i < reason.length; i++) {
                payload[2 + i] = reason.charCodeAt(i);
            }
        } else {
            payload = Buffer.alloc(2);
            payload[0] = (code >> 8) & 0xFF;
            payload[1] = code & 0xFF;
        }
        
        let frame = WebSocketFrame(WebSocketOpCode.CLOSE, payload);
        self._sendFrame(frame);
        
        // Clean up
        self.socket.close();
        self.state = WebSocketState.CLOSED;
        self.onClose(code, reason);
    }
    
    // Send a text message
    def send(message: string) {
        if (self.state != WebSocketState.OPEN) {
            throw Error("WebSocket is not open");
        }
        
        let payload = Buffer.from(message);
        let frame = WebSocketFrame(WebSocketOpCode.TEXT, payload);
        self._sendFrame(frame);
    }
    
    // Send a binary message
    def sendBinary(data: Buffer) {
        if (self.state != WebSocketState.OPEN) {
            throw Error("WebSocket is not open");
        }
        
        let frame = WebSocketFrame(WebSocketOpCode.BINARY, data);
        self._sendFrame(frame);
    }
    
    // Send a ping message
    def ping(data: string? = null) {
        if (self.state != WebSocketState.OPEN) {
            throw Error("WebSocket is not open");
        }
        
        let payload = data ? Buffer.from(data) : Buffer.alloc(0);
        let frame = WebSocketFrame(WebSocketOpCode.PING, payload);
        self._sendFrame(frame);
    }
    
    // Send a WebSocket frame
    private def _sendFrame(frame: WebSocketFrame) {
        if (!self.socket.isConnected()) {
            return;
        }
        
        let data = frame.encode();
        self.socket.write(data);
    }
    
    // Start reading frames from the socket
    private async def _startReading() {
        try {
            while (self.socket.isConnected() && self.state == WebSocketState.OPEN) {
                let chunk = await self.socket.read();
                if (!chunk || chunk.length == 0) {
                    break;
                }
                
                // Append to buffer
                let newBuffer = Buffer.alloc(self.buffer.length + chunk.length);
                newBuffer.copy(self.buffer, 0, 0, self.buffer.length);
                newBuffer.copy(chunk, self.buffer.length, 0, chunk.length);
                self.buffer = newBuffer;
                
                // Process all complete frames in the buffer
                self._processBuffer();
            }
        } catch (err) {
            self.onError(err);
        }
        
        // If we got here, the connection was closed
        if (self.state != WebSocketState.CLOSED) {
            self.close(1006, "Connection closed abnormally");
        }
    }
    
    // Process all complete frames in the buffer
    private def _processBuffer() {
        while (self.buffer.length >= 2) {
            try {
                let result = WebSocketFrame.decode(self.buffer);
                let frame = result.frame;
                let bytesRead = result.bytesRead;
                
                // Remove the processed frame from the buffer
                let newBuffer = Buffer.alloc(self.buffer.length - bytesRead);
                newBuffer.copy(self.buffer, bytesRead, 0, self.buffer.length - bytesRead);
                self.buffer = newBuffer;
                
                // Handle the frame
                self._handleFrame(frame);
            } catch (err) {
                // Not enough data for a complete frame
                break;
            }
        }
    }
    
    // Handle a received WebSocket frame
    private def _handleFrame(frame: WebSocketFrame) {
        switch (frame.opcode) {
            case WebSocketOpCode.TEXT:
                let message = frame.payload.toString("utf8");
                self.onMessage(message);
                break;
                
            case WebSocketOpCode.BINARY:
                self.onMessage(frame.payload);
                break;
                
            case WebSocketOpCode.CLOSE:
                let code = 1005; // No status code present
                let reason = "";
                
                if (frame.payload.length >= 2) {
                    code = (frame.payload[0] << 8) | frame.payload[1];
                    
                    if (frame.payload.length > 2) {
                        reason = frame.payload.toString("utf8", 2);
                    }
                }
                
                self.close(code, reason);
                break;
                
            case WebSocketOpCode.PING:
                // Respond with a pong containing the same payload
                let pongFrame = WebSocketFrame(WebSocketOpCode.PONG, frame.payload);
                self._sendFrame(pongFrame);
                break;
                
            case WebSocketOpCode.PONG:
                // Pong received (no action needed)
                break;
                
            case WebSocketOpCode.CONTINUATION:
                // Continuation frames not implemented in this simple example
                break;
        }
    }
} 
