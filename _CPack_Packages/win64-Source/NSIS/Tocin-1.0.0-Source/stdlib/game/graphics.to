/**
 * Tocin Standard Library - Game Graphics Module
 * Provides graphics primitives and rendering capabilities for the game engine.
 */

import math.basic;
import math.geometry;
import math.linear;
import game.engine;
import game.shader;

/**
 * Texture wrapping modes
 */
enum TextureWrap {
    REPEAT,
    CLAMP_TO_EDGE,
    MIRRORED_REPEAT
}

/**
 * Texture filtering modes
 */
enum TextureFilter {
    NEAREST,
    LINEAR,
    MIPMAP_NEAREST,
    MIPMAP_LINEAR
}

/**
 * Blend modes for combining pixels
 */
enum BlendMode {
    NONE,       // No blending, source overwrites destination
    NORMAL,     // Standard alpha blending (source * srcAlpha + dest * (1-srcAlpha))
    ADD,        // Additive blending (source + dest)
    MULTIPLY,   // Multiply colors (source * dest)
    SCREEN      // Screen blend mode (1 - (1 - source) * (1 - dest))
}

/**
 * Texture class for graphics rendering
 */
class Texture {
    property id: any;
    property width: int;
    property height: int;
    property format: int;
    property wrapS: TextureWrap;
    property wrapT: TextureWrap;
    property filterMin: TextureFilter;
    property filterMag: TextureFilter;
    property isLoaded: bool;
    
    def initialize(width: int = 0, height: int = 0) {
        self.id = null;
        self.width = width;
        self.height = height;
        self.format = 0;  // Will be set correctly when loaded
        self.wrapS = TextureWrap.CLAMP_TO_EDGE;
        self.wrapT = TextureWrap.CLAMP_TO_EDGE;
        self.filterMin = TextureFilter.LINEAR;
        self.filterMag = TextureFilter.LINEAR;
        self.isLoaded = false;
    }
    
    /**
     * Load texture from an image file
     */
    static async def fromFile(filename: string) -> Texture {
        let texture = new Texture();
        await texture.load(filename);
        return texture;
    }
    
    /**
     * Load texture from raw pixel data
     */
    static def fromPixels(
        data: ArrayBuffer,
        width: int,
        height: int,
        format: int = 0  // Default format, e.g., RGBA
    ) -> Texture {
        let texture = new Texture(width, height);
        texture.loadFromPixels(data, width, height, format);
        return texture;
    }
    
    /**
     * Create an empty texture with specified dimensions
     */
    static def createEmpty(width: int, height: int) -> Texture {
        return new Texture(width, height);
    }
    
    /**
     * Load texture from a file
     */
    async def load(filename: string) -> bool {
        try {
            // This would use the platform's image loading capability
            let image = await loadImageFile(filename);
            return self.loadFromPixels(image.data, image.width, image.height, image.format);
        } catch (error) {
            console.error(`Failed to load texture from ${filename}: ${error.message}`);
            return false;
        }
    }
    
    /**
     * Load texture from pixel data
     */
    def loadFromPixels(data: ArrayBuffer, width: int, height: int, format: int = 0) -> bool {
        try {
            self.width = width;
            self.height = height;
            self.format = format;
            
            // Create texture in GPU memory using a graphics API
            // This is a placeholder - actual implementation would depend on 
            // the underlying graphics API (WebGL, OpenGL, etc.)
            
            const gl = getGraphicsContext();
            
            if (!self.id) {
                self.id = gl.createTexture();
            }
            
            gl.bindTexture(gl.TEXTURE_2D, self.id);
            
            // Upload pixel data to GPU
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, 
                          gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(data));
            
            // Apply texture settings
            self._applyTextureSettings(gl);
            
            gl.bindTexture(gl.TEXTURE_2D, null);
            
            self.isLoaded = true;
            return true;
        } catch (error) {
            console.error(`Failed to load texture from pixels: ${error.message}`);
            return false;
        }
    }
    
    /**
     * Set texture wrapping mode
     */
    def setWrapping(wrapS: TextureWrap, wrapT: TextureWrap) -> void {
        self.wrapS = wrapS;
        self.wrapT = wrapT;
        
        if (self.id) {
            const gl = getGraphicsContext();
            gl.bindTexture(gl.TEXTURE_2D, self.id);
            self._applyTextureSettings(gl);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
    }
    
    /**
     * Set texture filtering mode
     */
    def setFiltering(min: TextureFilter, mag: TextureFilter) -> void {
        self.filterMin = min;
        self.filterMag = mag;
        
        if (self.id) {
            const gl = getGraphicsContext();
            gl.bindTexture(gl.TEXTURE_2D, self.id);
            self._applyTextureSettings(gl);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
    }
    
    /**
     * Bind texture for rendering
     */
    def bind(unit: int = 0) -> void {
        if (self.id) {
            const gl = getGraphicsContext();
            gl.activeTexture(gl.TEXTURE0 + unit);
            gl.bindTexture(gl.TEXTURE_2D, self.id);
        }
    }
    
    /**
     * Unbind texture
     */
    def unbind() -> void {
        const gl = getGraphicsContext();
        gl.bindTexture(gl.TEXTURE_2D, null);
    }
    
    /**
     * Update a region of the texture with new pixel data
     */
    def updateRegion(
        data: ArrayBuffer, 
        x: int, 
        y: int, 
        width: int, 
        height: int
    ) -> bool {
        try {
            if (!self.id || !self.isLoaded) {
                return false;
            }
            
            const gl = getGraphicsContext();
            gl.bindTexture(gl.TEXTURE_2D, self.id);
            
            gl.texSubImage2D(gl.TEXTURE_2D, 0, x, y, width, height, 
                            gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(data));
            
            gl.bindTexture(gl.TEXTURE_2D, null);
            return true;
        } catch (error) {
            console.error(`Failed to update texture region: ${error.message}`);
            return false;
        }
    }
    
    /**
     * Generate mipmaps for the texture
     */
    def generateMipmaps() -> void {
        if (self.id && self.isLoaded) {
            const gl = getGraphicsContext();
            gl.bindTexture(gl.TEXTURE_2D, self.id);
            gl.generateMipmap(gl.TEXTURE_2D);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
    }
    
    /**
     * Dispose texture resources
     */
    def dispose() -> void {
        if (self.id) {
            const gl = getGraphicsContext();
            gl.deleteTexture(self.id);
            self.id = null;
            self.isLoaded = false;
        }
    }
    
    /**
     * Apply texture settings to the currently bound texture
     */
    private def _applyTextureSettings(gl: any) -> void {
        // Apply wrapping modes
        let glWrapS, glWrapT;
        
        switch (self.wrapS) {
            case TextureWrap.REPEAT:
                glWrapS = gl.REPEAT;
                break;
            case TextureWrap.CLAMP_TO_EDGE:
                glWrapS = gl.CLAMP_TO_EDGE;
                break;
            case TextureWrap.MIRRORED_REPEAT:
                glWrapS = gl.MIRRORED_REPEAT;
                break;
        }
        
        switch (self.wrapT) {
            case TextureWrap.REPEAT:
                glWrapT = gl.REPEAT;
                break;
            case TextureWrap.CLAMP_TO_EDGE:
                glWrapT = gl.CLAMP_TO_EDGE;
                break;
            case TextureWrap.MIRRORED_REPEAT:
                glWrapT = gl.MIRRORED_REPEAT;
                break;
        }
        
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, glWrapS);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, glWrapT);
        
        // Apply filtering modes
        let glFilterMin, glFilterMag;
        
        switch (self.filterMin) {
            case TextureFilter.NEAREST:
                glFilterMin = gl.NEAREST;
                break;
            case TextureFilter.LINEAR:
                glFilterMin = gl.LINEAR;
                break;
            case TextureFilter.MIPMAP_NEAREST:
                glFilterMin = gl.NEAREST_MIPMAP_NEAREST;
                break;
            case TextureFilter.MIPMAP_LINEAR:
                glFilterMin = gl.LINEAR_MIPMAP_LINEAR;
                break;
        }
        
        switch (self.filterMag) {
            case TextureFilter.NEAREST:
                glFilterMag = gl.NEAREST;
                break;
            case TextureFilter.LINEAR:
                glFilterMag = gl.LINEAR;
                break;
            default:
                // Mag filter cannot use mipmaps
                glFilterMag = gl.LINEAR;
                break;
        }
        
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, glFilterMin);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, glFilterMag);
    }
}

/**
 * Sprite represents a renderable image with position, scale, rotation, etc.
 */
class Sprite {
    property texture: Texture?;
    property position: Vector2;
    property scale: Vector2;
    property rotation: float;
    property origin: Vector2;
    property color: ColorRGBA;
    property visible: bool;
    property sourceRect: {x: int, y: int, width: int, height: int}?;
    
    def initialize(texture: Texture? = null) {
        self.texture = texture;
        self.position = new Vector2(0, 0);
        self.scale = new Vector2(1, 1);
        self.rotation = 0;
        self.origin = new Vector2(0, 0);
        self.color = new ColorRGBA(1, 1, 1, 1);
        self.visible = true;
        self.sourceRect = null;
    }
    
    /**
     * Get the width of the sprite
     */
    def getWidth() -> float {
        if (!self.texture) {
            return 0;
        }
        
        return self.sourceRect ? 
               self.sourceRect.width * self.scale.x : 
               self.texture.width * self.scale.x;
    }
    
    /**
     * Get the height of the sprite
     */
    def getHeight() -> float {
        if (!self.texture) {
            return 0;
        }
        
        return self.sourceRect ? 
               self.sourceRect.height * self.scale.y : 
               self.texture.height * self.scale.y;
    }
    
    /**
     * Check if this sprite contains a point
     */
    def contains(x: float, y: float) -> bool {
        // Convert point to local space
        let dx = x - self.position.x;
        let dy = y - self.position.y;
        
        // If rotated, transform the point
        if (self.rotation !== 0) {
            let cos = Math.cos(-self.rotation);
            let sin = Math.sin(-self.rotation);
            
            let tempX = dx;
            dx = tempX * cos - dy * sin;
            dy = tempX * sin + dy * cos;
        }
        
        // Adjust for origin
        dx += self.origin.x;
        dy += self.origin.y;
        
        // Check if the point is within the sprite's bounds
        let width = self.getWidth();
        let height = self.getHeight();
        
        return dx >= 0 && dx < width && dy >= 0 && dy < height;
    }
    
    /**
     * Set the source rectangle for rendering a sub-region of the texture
     */
    def setSourceRect(x: int, y: int, width: int, height: int) -> void {
        self.sourceRect = { x, y, width, height };
    }
    
    /**
     * Reset the source rectangle to render the entire texture
     */
    def resetSourceRect() -> void {
        self.sourceRect = null;
    }
    
    /**
     * Set the center of the sprite as the origin
     */
    def centerOrigin() -> void {
        if (!self.texture) {
            return;
        }
        
        let width = self.sourceRect ? self.sourceRect.width : self.texture.width;
        let height = self.sourceRect ? self.sourceRect.height : self.texture.height;
        
        self.origin.x = width / 2;
        self.origin.y = height / 2;
    }
    
    /**
     * Calculate the sprite's transformation matrix
     */
    def getTransformMatrix() -> Matrix3 {
        let translateX = self.position.x;
        let translateY = self.position.y;
        
        if (self.origin.x !== 0 || self.origin.y !== 0) {
            translateX -= self.origin.x * self.scale.x;
            translateY -= self.origin.y * self.scale.y;
        }
        
        let matrix = Matrix3.identity();
        
        // Apply transformations in order: scale, rotate, translate
        matrix = Matrix3.translate(matrix, translateX, translateY);
        
        if (self.rotation !== 0) {
            // If origin is not zero, rotate around it
            if (self.origin.x !== 0 || self.origin.y !== 0) {
                let originX = self.origin.x * self.scale.x;
                let originY = self.origin.y * self.scale.y;
                
                matrix = Matrix3.translate(matrix, originX, originY);
                matrix = Matrix3.rotate(matrix, self.rotation);
                matrix = Matrix3.translate(matrix, -originX, -originY);
            } else {
                matrix = Matrix3.rotate(matrix, self.rotation);
            }
        }
        
        matrix = Matrix3.scale(matrix, self.scale.x, self.scale.y);
        
        return matrix;
    }
}

/**
 * SpriteBatch for efficient rendering of multiple sprites
 */
class SpriteBatch {
    property shader: shader.Shader;
    property defaultTexture: Texture;
    property currentTexture: Texture?;
    property blendMode: BlendMode;
    property vertices: Array<float>;
    property vertexBuffer: any;
    property indexBuffer: any;
    property indices: Array<int>;
    property projection: Matrix4;
    property batchSize: int;
    property maxBatchSize: int;
    property isDrawing: bool;
    
    def initialize(batchSize: int = 1000) {
        self.shader = null;
        self.defaultTexture = null;
        self.currentTexture = null;
        self.blendMode = BlendMode.NORMAL;
        self.vertices = [];
        self.indices = [];
        self.vertexBuffer = null;
        self.indexBuffer = null;
        self.projection = Matrix4.identity();
        self.batchSize = 0;
        self.maxBatchSize = batchSize;
        self.isDrawing = false;
        
        self._initialize();
    }
    
    /**
     * Initialize the sprite batch resources
     */
    private def _initialize() -> void {
        // Create shader
        let vertexShader = shader.ShaderLibrary.basicVertexShader();
        let fragmentShader = shader.ShaderLibrary.basicFragmentShader();
        
        self.shader = new shader.Shader(vertexShader, fragmentShader);
        self.shader.compile(getGraphicsContext());
        
        // Create default white texture
        self._createDefaultTexture();
        
        // Initialize buffers
        self._createBuffers();
    }
    
    /**
     * Create a default white texture
     */
    private def _createDefaultTexture() -> void {
        // Create a 1x1 white texture
        let data = new Uint8Array([255, 255, 255, 255]);
        self.defaultTexture = Texture.fromPixels(data.buffer, 1, 1);
    }
    
    /**
     * Create vertex and index buffers
     */
    private def _createBuffers() -> void {
        const gl = getGraphicsContext();
        
        // Create vertex buffer
        self.vertexBuffer = gl.createBuffer();
        
        // Create index buffer
        self.indexBuffer = gl.createBuffer();
        
        // Generate indices for quads
        self.indices = [];
        
        for (let i = 0; i < self.maxBatchSize; i++) {
            let offset = i * 4;
            
            // Triangle 1
            self.indices.push(offset);
            self.indices.push(offset + 1);
            self.indices.push(offset + 2);
            
            // Triangle 2
            self.indices.push(offset);
            self.indices.push(offset + 2);
            self.indices.push(offset + 3);
        }
        
        // Upload indices to GPU
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(self.indices), gl.STATIC_DRAW);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
    }
    
    /**
     * Begin a new sprite batch
     */
    def begin(
        projectionMatrix: Matrix4? = null,
        blendMode: BlendMode = BlendMode.NORMAL
    ) -> void {
        if (self.isDrawing) {
            throw Error("SpriteBatch.end() must be called before begin()");
        }
        
        self.isDrawing = true;
        self.batchSize = 0;
        self.vertices = [];
        self.blendMode = blendMode;
        
        if (projectionMatrix) {
            self.projection = projectionMatrix;
        } else {
            // Create default orthographic projection
            const gl = getGraphicsContext();
            const width = gl.canvas.width;
            const height = gl.canvas.height;
            
            self.projection = Matrix4.orthographic(0, width, height, 0, -1, 1);
        }
    }
    
    /**
     * End the current sprite batch and render
     */
    def end() -> void {
        if (!self.isDrawing) {
            throw Error("SpriteBatch.begin() must be called before end()");
        }
        
        self._flush();
        self.isDrawing = false;
    }
    
    /**
     * Draw a sprite
     */
    def drawSprite(sprite: Sprite) -> void {
        if (!self.isDrawing) {
            throw Error("SpriteBatch.begin() must be called before drawSprite()");
        }
        
        if (!sprite.visible) {
            return;
        }
        
        let texture = sprite.texture || self.defaultTexture;
        
        // If the texture changes or the batch is full, flush
        if (self.currentTexture !== texture || self.batchSize >= self.maxBatchSize) {
            self._flush();
            self.currentTexture = texture;
        }
        
        // Get sprite dimensions
        let sourceX = 0;
        let sourceY = 0;
        let sourceWidth = texture.width;
        let sourceHeight = texture.height;
        
        if (sprite.sourceRect) {
            sourceX = sprite.sourceRect.x;
            sourceY = sprite.sourceRect.y;
            sourceWidth = sprite.sourceRect.width;
            sourceHeight = sprite.sourceRect.height;
        }
        
        // Calculate texture coordinates
        let u1 = sourceX / texture.width;
        let v1 = sourceY / texture.height;
        let u2 = (sourceX + sourceWidth) / texture.width;
        let v2 = (sourceY + sourceHeight) / texture.height;
        
        // Get transformation matrix
        let matrix = sprite.getTransformMatrix();
        
        // Define the four corners of the sprite
        let x1 = 0;
        let y1 = 0;
        let x2 = sourceWidth;
        let y2 = 0;
        let x3 = sourceWidth;
        let y3 = sourceHeight;
        let x4 = 0;
        let y4 = sourceHeight;
        
        // Transform vertices
        let transformedX1 = matrix.a * x1 + matrix.b * y1 + matrix.c;
        let transformedY1 = matrix.d * x1 + matrix.e * y1 + matrix.f;
        
        let transformedX2 = matrix.a * x2 + matrix.b * y2 + matrix.c;
        let transformedY2 = matrix.d * x2 + matrix.e * y2 + matrix.f;
        
        let transformedX3 = matrix.a * x3 + matrix.b * y3 + matrix.c;
        let transformedY3 = matrix.d * x3 + matrix.e * y3 + matrix.f;
        
        let transformedX4 = matrix.a * x4 + matrix.b * y4 + matrix.c;
        let transformedY4 = matrix.d * x4 + matrix.e * y4 + matrix.f;
        
        // Add vertices to batch
        // Format: x, y, u, v, r, g, b, a
        
        // Vertex 1 (top-left)
        self.vertices.push(transformedX1);
        self.vertices.push(transformedY1);
        self.vertices.push(u1);
        self.vertices.push(v1);
        self.vertices.push(sprite.color.r);
        self.vertices.push(sprite.color.g);
        self.vertices.push(sprite.color.b);
        self.vertices.push(sprite.color.a);
        
        // Vertex 2 (top-right)
        self.vertices.push(transformedX2);
        self.vertices.push(transformedY2);
        self.vertices.push(u2);
        self.vertices.push(v1);
        self.vertices.push(sprite.color.r);
        self.vertices.push(sprite.color.g);
        self.vertices.push(sprite.color.b);
        self.vertices.push(sprite.color.a);
        
        // Vertex 3 (bottom-right)
        self.vertices.push(transformedX3);
        self.vertices.push(transformedY3);
        self.vertices.push(u2);
        self.vertices.push(v2);
        self.vertices.push(sprite.color.r);
        self.vertices.push(sprite.color.g);
        self.vertices.push(sprite.color.b);
        self.vertices.push(sprite.color.a);
        
        // Vertex 4 (bottom-left)
        self.vertices.push(transformedX4);
        self.vertices.push(transformedY4);
        self.vertices.push(u1);
        self.vertices.push(v2);
        self.vertices.push(sprite.color.r);
        self.vertices.push(sprite.color.g);
        self.vertices.push(sprite.color.b);
        self.vertices.push(sprite.color.a);
        
        self.batchSize++;
    }
    
    /**
     * Draw a texture directly
     */
    def drawTexture(
        texture: Texture,
        x: float,
        y: float,
        width: float? = null,
        height: float? = null,
        sourceX: int = 0,
        sourceY: int = 0,
        sourceWidth: int? = null,
        sourceHeight: int? = null,
        color: ColorRGBA = new ColorRGBA(1, 1, 1, 1),
        rotation: float = 0,
        originX: float = 0,
        originY: float = 0,
        scaleX: float = 1,
        scaleY: float = 1
    ) -> void {
        if (!self.isDrawing) {
            throw Error("SpriteBatch.begin() must be called before drawTexture()");
        }
        
        // Set up a temporary sprite
        let sprite = new Sprite(texture);
        sprite.position.x = x;
        sprite.position.y = y;
        
        // Set source rectangle if specified
        if (sourceWidth !== null || sourceHeight !== null) {
            sprite.setSourceRect(
                sourceX,
                sourceY,
                sourceWidth !== null ? sourceWidth : texture.width - sourceX,
                sourceHeight !== null ? sourceHeight : texture.height - sourceY
            );
        }
        
        // Set scale
        if (width !== null || height !== null) {
            // Calculate scale to fit desired dimensions
            let actualWidth = sprite.sourceRect ? sprite.sourceRect.width : texture.width;
            let actualHeight = sprite.sourceRect ? sprite.sourceRect.height : texture.height;
            
            if (width !== null) {
                sprite.scale.x = width / actualWidth;
            }
            
            if (height !== null) {
                sprite.scale.y = height / actualHeight;
            }
        } else {
            sprite.scale.x = scaleX;
            sprite.scale.y = scaleY;
        }
        
        // Set rotation and origin
        sprite.rotation = rotation;
        sprite.origin.x = originX;
        sprite.origin.y = originY;
        
        // Set color
        sprite.color = color;
        
        // Draw the sprite
        self.drawSprite(sprite);
    }
    
    /**
     * Flush the current batch to the GPU
     */
    private def _flush() -> void {
        if (self.batchSize === 0) {
            return;
        }
        
        const gl = getGraphicsContext();
        
        // Bind shader
        self.shader.use(gl);
        
        // Set projection matrix
        let projectionLocation = gl.getUniformLocation(self.shader.programId, "uProjection");
        gl.uniformMatrix4fv(projectionLocation, false, self.projection.values);
        
        // Set model matrix (identity for sprite batch - transformations are per-vertex)
        let modelLocation = gl.getUniformLocation(self.shader.programId, "uModel");
        gl.uniformMatrix4fv(modelLocation, false, Matrix4.identity().values);
        
        // Set texture
        let textureLocation = gl.getUniformLocation(self.shader.programId, "uTexture");
        gl.uniform1i(textureLocation, 0);
        
        // Bind texture
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, self.currentTexture.id);
        
        // Set blend mode
        switch (self.blendMode) {
            case BlendMode.NONE:
                gl.disable(gl.BLEND);
                break;
            case BlendMode.NORMAL:
                gl.enable(gl.BLEND);
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
                break;
            case BlendMode.ADD:
                gl.enable(gl.BLEND);
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
                break;
            case BlendMode.MULTIPLY:
                gl.enable(gl.BLEND);
                gl.blendFunc(gl.DST_COLOR, gl.ZERO);
                break;
            case BlendMode.SCREEN:
                gl.enable(gl.BLEND);
                gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_COLOR);
                break;
        }
        
        // Bind vertex buffer and upload data
        gl.bindBuffer(gl.ARRAY_BUFFER, self.vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(self.vertices), gl.DYNAMIC_DRAW);
        
        // Set up vertex attributes
        let posAttr = gl.getAttribLocation(self.shader.programId, "aPosition");
        let texAttr = gl.getAttribLocation(self.shader.programId, "aTexCoord");
        let colorAttr = gl.getAttribLocation(self.shader.programId, "aColor");
        
        gl.enableVertexAttribArray(posAttr);
        gl.enableVertexAttribArray(texAttr);
        gl.enableVertexAttribArray(colorAttr);
        
        // Define vertex format - 8 floats per vertex (x, y, u, v, r, g, b, a)
        let stride = 8 * 4; // 8 floats × 4 bytes
        gl.vertexAttribPointer(posAttr, 2, gl.FLOAT, false, stride, 0);
        gl.vertexAttribPointer(texAttr, 2, gl.FLOAT, false, stride, 2 * 4);
        gl.vertexAttribPointer(colorAttr, 4, gl.FLOAT, false, stride, 4 * 4);
        
        // Bind index buffer
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, self.indexBuffer);
        
        // Draw sprites
        gl.drawElements(
            gl.TRIANGLES,
            self.batchSize * 6, // 6 indices per sprite (2 triangles)
            gl.UNSIGNED_SHORT,
            0
        );
        
        // Clean up
        gl.disableVertexAttribArray(posAttr);
        gl.disableVertexAttribArray(texAttr);
        gl.disableVertexAttribArray(colorAttr);
        
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        
        // Reset batch
        self.batchSize = 0;
        self.vertices = [];
    }
    
    /**
     * Dispose resources
     */
    def dispose() -> void {
        const gl = getGraphicsContext();
        
        if (self.vertexBuffer) {
            gl.deleteBuffer(self.vertexBuffer);
            self.vertexBuffer = null;
        }
        
        if (self.indexBuffer) {
            gl.deleteBuffer(self.indexBuffer);
            self.indexBuffer = null;
        }
        
        if (self.shader) {
            self.shader.dispose(gl);
            self.shader = null;
        }
        
        if (self.defaultTexture) {
            self.defaultTexture.dispose();
            self.defaultTexture = null;
        }
    }
}

/**
 * Helper function to get the graphics context (WebGL, etc.)
 * This would be implemented by the platform-specific code
 */
function getGraphicsContext() -> any {
    // In a real implementation, this would return the active graphics context
    // For now, we return a mock object for code completion
    return getCurrentGraphicsContext();
}

/**
 * Helper function to load an image file
 * This would be implemented by the platform-specific code
 */
async function loadImageFile(filename: string) -> {
    data: ArrayBuffer,
    width: int,
    height: int,
    format: int
} {
    // In a real implementation, this would load an image from the filesystem
    // For now, we return a mock implementation
    return await loadImage(filename);
}

export {
    TextureWrap,
    TextureFilter,
    BlendMode,
    Texture,
    Sprite,
    SpriteBatch
} 
