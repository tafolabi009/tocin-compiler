/**
 * Tocin Standard Library - Math Basic Module
 * Provides fundamental mathematical operations, constants, and functions.
 */

/**
 * Mathematical constants
 */
const PI: float = 3.14159265358979323846;
const E: float = 2.71828182845904523536;
const SQRT2: float = 1.41421356237309504880;
const SQRT1_2: float = 0.70710678118654752440;
const LN2: float = 0.69314718055994530942;
const LN10: float = 2.30258509299404568402;
const LOG2E: float = 1.44269504088896340736;
const LOG10E: float = 0.43429448190325182765;
const INFINITY: float = 1.0 / 0.0;
const NAN: float = 0.0 / 0.0;

/**
 * Basic arithmetic functions
 */

/**
 * Returns the absolute value of a number
 */
def abs(x: number) -> number {
    return x < 0 ? -x : x;
}

/**
 * Returns the sign of a number
 */
def sign(x: number) -> int {
    if (x > 0) return 1;
    if (x < 0) return -1;
    return 0;
}

/**
 * Returns the largest integer less than or equal to a number
 */
def floor(x: float) -> int {
    let int_part = x | 0;
    return x < 0 && x != int_part ? int_part - 1 : int_part;
}

/**
 * Returns the smallest integer greater than or equal to a number
 */
def ceil(x: float) -> int {
    let int_part = x | 0;
    return x > 0 && x != int_part ? int_part + 1 : int_part;
}

/**
 * Rounds a number to the nearest integer
 */
def round(x: float) -> int {
    return x >= 0 ? floor(x + 0.5) : ceil(x - 0.5);
}

/**
 * Truncates a number by removing its fractional part
 */
def trunc(x: float) -> int {
    return x | 0;
}

/**
 * Returns the fractional part of a number
 */
def fract(x: float) -> float {
    return x - floor(x);
}

/**
 * Returns the minimum of two or more numbers
 */
def min(...args: Array<number>) -> number {
    if (args.length == 0) {
        throw Error("min() requires at least one argument");
    }
    
    let result = args[0];
    for (let i = 1; i < args.length; i++) {
        if (args[i] < result) {
            result = args[i];
        }
    }
    
    return result;
}

/**
 * Returns the maximum of two or more numbers
 */
def max(...args: Array<number>) -> number {
    if (args.length == 0) {
        throw Error("max() requires at least one argument");
    }
    
    let result = args[0];
    for (let i = 1; i < args.length; i++) {
        if (args[i] > result) {
            result = args[i];
        }
    }
    
    return result;
}

/**
 * Clamps a number between a minimum and maximum value
 */
def clamp(x: number, min_val: number, max_val: number) -> number {
    return min(max(x, min_val), max_val);
}

/**
 * Linear interpolation between two values
 */
def lerp(a: number, b: number, t: float) -> number {
    return a + t * (b - a);
}

/**
 * Power and logarithmic functions
 */

/**
 * Returns the square root of a number
 */
def sqrt(x: number) -> float {
    if (x < 0) {
        throw Error("Cannot compute square root of negative number");
    }
    
    // Use a native implementation if available
    // This would typically be provided by the runtime
    return __native_sqrt(x);
}

/**
 * Returns a number raised to a power
 */
def pow(x: number, y: number) -> number {
    // Use a native implementation if available
    return __native_pow(x, y);
}

/**
 * Returns the natural logarithm (base e) of a number
 */
def log(x: number) -> float {
    if (x <= 0) {
        throw Error("Cannot compute logarithm of non-positive number");
    }
    
    // Use a native implementation if available
    return __native_log(x);
}

/**
 * Returns the base 10 logarithm of a number
 */
def log10(x: number) -> float {
    return log(x) / LN10;
}

/**
 * Returns the base 2 logarithm of a number
 */
def log2(x: number) -> float {
    return log(x) / LN2;
}

/**
 * Exponential function (e^x)
 */
def exp(x: number) -> float {
    // Use a native implementation if available
    return __native_exp(x);
}

/**
 * Returns the cubic root of a number
 */
def cbrt(x: number) -> float {
    return x < 0 ? -pow(-x, 1.0/3.0) : pow(x, 1.0/3.0);
}

/**
 * Returns the hypotenuse of a right triangle (sqrt(x^2 + y^2))
 */
def hypot(x: number, y: number) -> float {
    // Avoid overflow and underflow
    x = abs(x);
    y = abs(y);
    
    let max, min;
    if (x > y) {
        max = x;
        min = y;
    } else {
        max = y;
        min = x;
    }
    
    if (max == 0) {
        return 0;
    }
    
    min = min / max;
    return max * sqrt(1 + min * min);
}

/**
 * Trigonometric functions
 */

/**
 * Returns the sine of an angle (in radians)
 */
def sin(x: number) -> float {
    // Use a native implementation if available
    return __native_sin(x);
}

/**
 * Returns the cosine of an angle (in radians)
 */
def cos(x: number) -> float {
    // Use a native implementation if available
    return __native_cos(x);
}

/**
 * Returns the tangent of an angle (in radians)
 */
def tan(x: number) -> float {
    // Use a native implementation if available
    return __native_tan(x);
}

/**
 * Returns the arcsine of a number (in radians)
 */
def asin(x: number) -> float {
    if (x < -1 || x > 1) {
        throw Error("asin argument out of range");
    }
    
    // Use a native implementation if available
    return __native_asin(x);
}

/**
 * Returns the arccosine of a number (in radians)
 */
def acos(x: number) -> float {
    if (x < -1 || x > 1) {
        throw Error("acos argument out of range");
    }
    
    // Use a native implementation if available
    return __native_acos(x);
}

/**
 * Returns the arctangent of a number (in radians)
 */
def atan(x: number) -> float {
    // Use a native implementation if available
    return __native_atan(x);
}

/**
 * Returns the arctangent of the quotient of its arguments (in radians)
 */
def atan2(y: number, x: number) -> float {
    // Use a native implementation if available
    return __native_atan2(y, x);
}

/**
 * Converts an angle from radians to degrees
 */
def radToDeg(rad: number) -> float {
    return rad * 180.0 / PI;
}

/**
 * Converts an angle from degrees to radians
 */
def degToRad(deg: number) -> float {
    return deg * PI / 180.0;
}

/**
 * Hyperbolic functions
 */

/**
 * Returns the hyperbolic sine of a number
 */
def sinh(x: number) -> float {
    let exp_x = exp(x);
    let exp_neg_x = exp(-x);
    return (exp_x - exp_neg_x) / 2;
}

/**
 * Returns the hyperbolic cosine of a number
 */
def cosh(x: number) -> float {
    let exp_x = exp(x);
    let exp_neg_x = exp(-x);
    return (exp_x + exp_neg_x) / 2;
}

/**
 * Returns the hyperbolic tangent of a number
 */
def tanh(x: number) -> float {
    if (x > 20) return 1.0;
    if (x < -20) return -1.0;
    
    let exp_x = exp(x);
    let exp_neg_x = exp(-x);
    return (exp_x - exp_neg_x) / (exp_x + exp_neg_x);
}

/**
 * Other useful functions
 */

/**
 * Returns the floating-point remainder of the division of x by y
 */
def fmod(x: number, y: number) -> float {
    if (y == 0) {
        throw Error("Cannot compute fmod with zero divisor");
    }
    
    return x - y * floor(x / y);
}

/**
 * Checks if a number is finite
 */
def isFinite(x: number) -> bool {
    return x != INFINITY && x != -INFINITY && x == x;
}

/**
 * Checks if a number is NaN (Not a Number)
 */
def isNaN(x: number) -> bool {
    return x != x;
}

/**
 * Checks if a number is an integer
 */
def isInteger(x: number) -> bool {
    return isFinite(x) && abs(x - floor(x)) < 1e-10;
} 
