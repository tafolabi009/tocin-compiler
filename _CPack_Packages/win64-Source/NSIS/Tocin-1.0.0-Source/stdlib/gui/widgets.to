/**
 * Tocin Standard Library - GUI Widgets Module
 * Provides common UI widgets for building graphical user interfaces.
 */

import gui.core;
import math.basic;
import math.geometry;

/**
 * Button widget
 */
class Button extends Widget {
    property text: string;
    property textColor: ColorRGBA;
    property font: Font;
    property pressedColor: ColorRGBA?;
    property hoverColor: ColorRGBA?;
    property isPressed: bool;
    property isHovered: bool;
    
    def initialize(text: string = "Button") {
        super.initialize();
        self.text = text;
        self.textColor = ColorRGBA.BLACK;
        self.font = new Font("sans-serif", 14);
        self.backgroundColor = ColorRGBA.LIGHT_GRAY;
        self.pressedColor = null;
        self.hoverColor = null;
        self.isPressed = false;
        self.isHovered = false;
        self.border = new Border(ColorRGBA.GRAY, 1, 4);
        self.padding = EdgeInsets.all(8);
        
        // Set up event handlers
        self.addEventListener("mousemove", self._onMouseMove.bind(self));
        self.addEventListener("mousedown", self._onMouseDown.bind(self));
        self.addEventListener("mouseup", self._onMouseUp.bind(self));
        self.addEventListener("click", self._onClick.bind(self));
    }
    
    override def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        // Measure text size
        let context = null; // Would be set in a real implementation
        let textSize = {width: self.text.length * 7, height: 20}; // Simple approximation
        
        // Add padding
        let width = textSize.width + self.padding.left + self.padding.right;
        let height = textSize.height + self.padding.top + self.padding.bottom;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        return {width, height};
    }
    
    override def draw(context: RenderContext) {
        if (!self.visible) {
            return;
        }
        
        // Determine background color based on state
        let bgColor = self.backgroundColor;
        
        if (self.isPressed && self.pressedColor) {
            bgColor = self.pressedColor;
        } else if (self.isHovered && self.hoverColor) {
            bgColor = self.hoverColor;
        }
        
        // Draw background
        if (bgColor) {
            context.setFillColor(bgColor);
            
            if (self.border && self.border.radius > 0) {
                context.beginPath();
                context.roundRect(
                    self.bounds.x, 
                    self.bounds.y, 
                    self.bounds.width, 
                    self.bounds.height, 
                    self.border.radius
                );
                context.fill();
            } else {
                context.beginPath();
                context.rect(
                    self.bounds.x, 
                    self.bounds.y, 
                    self.bounds.width, 
                    self.bounds.height
                );
                context.fill();
            }
        }
        
        // Draw border
        if (self.border && self.border.width > 0) {
            context.setStrokeColor(self.border.color);
            context.setLineWidth(self.border.width);
            
            if (self.border.radius > 0) {
                context.beginPath();
                context.roundRect(
                    self.bounds.x, 
                    self.bounds.y, 
                    self.bounds.width, 
                    self.bounds.height, 
                    self.border.radius
                );
                context.stroke();
            } else {
                context.beginPath();
                context.rect(
                    self.bounds.x, 
                    self.bounds.y, 
                    self.bounds.width, 
                    self.bounds.height
                );
                context.stroke();
            }
        }
        
        // Draw text
        context.setFillColor(self.textColor);
        context.setFont(self.font);
        
        let textSize = context.measureText(self.text);
        let textX = self.bounds.x + (self.bounds.width - textSize.width) / 2;
        let textY = self.bounds.y + (self.bounds.height - textSize.height) / 2 + textSize.height;
        
        context.fillText(self.text, textX, textY);
    }
    
    private def _onMouseMove(event: MouseEvent) {
        self.isHovered = true;
    }
    
    private def _onMouseDown(event: MouseEvent) {
        self.isPressed = true;
    }
    
    private def _onMouseUp(event: MouseEvent) {
        self.isPressed = false;
    }
    
    private def _onClick(event: MouseEvent) {
        // Click event will be handled by external listeners
        event.handled = true;
    }
}

/**
 * Text Label widget
 */
class Label extends Widget {
    property text: string;
    property textColor: ColorRGBA;
    property font: Font;
    property textAlign: TextAlign;
    
    def initialize(text: string = "") {
        super.initialize();
        self.text = text;
        self.textColor = ColorRGBA.BLACK;
        self.font = new Font("sans-serif", 14);
        self.textAlign = TextAlign.LEFT;
        self.padding = EdgeInsets.all(2);
    }
    
    override def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        // Measure text size
        let context = null; // Would be set in a real implementation
        let textSize = {width: self.text.length * 7, height: 20}; // Simple approximation
        
        // Add padding
        let width = textSize.width + self.padding.left + self.padding.right;
        let height = textSize.height + self.padding.top + self.padding.bottom;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        return {width, height};
    }
    
    override def draw(context: RenderContext) {
        if (!self.visible) {
            return;
        }
        
        // Draw background if specified
        super.draw(context);
        
        // Draw text
        let contentBounds = self.getContentBounds();
        context.setFillColor(self.textColor);
        context.setFont(self.font);
        
        let textSize = context.measureText(self.text);
        let textX = contentBounds.x;
        let textY = contentBounds.y + textSize.height;
        
        if (self.textAlign == TextAlign.CENTER) {
            textX = contentBounds.x + (contentBounds.width - textSize.width) / 2;
        } else if (self.textAlign == TextAlign.RIGHT) {
            textX = contentBounds.x + contentBounds.width - textSize.width;
        }
        
        context.fillText(self.text, textX, textY);
    }
}

/**
 * Text input field
 */
class TextField extends Widget {
    property text: string;
    property placeholder: string;
    property textColor: ColorRGBA;
    property placeholderColor: ColorRGBA;
    property selectionColor: ColorRGBA;
    property font: Font;
    property isFocused: bool;
    property selection: {start: int, end: int};
    property cursorPosition: int;
    property isPasswordField: bool;
    property maxLength: int?;
    
    def initialize(placeholder: string = "") {
        super.initialize();
        self.text = "";
        self.placeholder = placeholder;
        self.textColor = ColorRGBA.BLACK;
        self.placeholderColor = ColorRGBA.GRAY;
        self.selectionColor = new ColorRGBA(0.2, 0.4, 0.9, 0.3);  // Light blue
        self.backgroundColor = ColorRGBA.WHITE;
        self.font = new Font("sans-serif", 14);
        self.border = new Border(ColorRGBA.GRAY, 1, 4);
        self.padding = EdgeInsets.symmetric(8, 4);
        self.isFocused = false;
        self.selection = {start: 0, end: 0};
        self.cursorPosition = 0;
        self.isPasswordField = false;
        self.maxLength = null;
        
        // Set up event handlers
        self.addEventListener("mousedown", self._onMouseDown.bind(self));
        self.addEventListener("keydown", self._onKeyDown.bind(self));
    }
    
    override def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        // Measure text size
        let context = null; // Would be set in a real implementation
        let textHeight = 20; // Simple approximation
        
        // Default width if no constraint
        let width = self.constraints.preferredWidth ?? 200;
        
        // Add padding
        let height = textHeight + self.padding.top + self.padding.bottom;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        return {width, height};
    }
    
    override def draw(context: RenderContext) {
        if (!self.visible) {
            return;
        }
        
        // Draw background
        super.draw(context);
        
        let contentBounds = self.getContentBounds();
        context.setFont(self.font);
        
        // Draw selection if any
        if (self.isFocused && self.selection.start !== self.selection.end) {
            let displayText = self.isPasswordField ? "â€¢".repeat(self.text.length) : self.text;
            
            let startText = displayText.substring(0, self.selection.start);
            let startX = contentBounds.x + context.measureText(startText).width;
            
            let selectionText = displayText.substring(self.selection.start, self.selection.end);
            let selectionWidth = context.measureText(selectionText).width;
            
            context.setFillColor(self.selectionColor);
            context.beginPath();
            context.rect(startX, contentBounds.y, selectionWidth, contentBounds.height);
            context.fill();
        }
        
        // Draw text or placeholder
        if (self.text.length > 0) {
            // Draw actual text
            context.setFillColor(self.textColor);
            
            let displayText = self.isPasswordField ? "â€¢".repeat(self.text.length) : self.text;
            let textY = contentBounds.y + contentBounds.height / 2 + 7; // Approximation for text centering
            
            context.fillText(displayText, contentBounds.x, textY);
        } else if (self.placeholder.length > 0) {
            // Draw placeholder text
            context.setFillColor(self.placeholderColor);
            let textY = contentBounds.y + contentBounds.height / 2 + 7; // Approximation for text centering
            
            context.fillText(self.placeholder, contentBounds.x, textY);
        }
        
        // Draw cursor if focused
        if (self.isFocused) {
            let displayText = self.isPasswordField ? "â€¢".repeat(self.text.length) : self.text;
            let cursorText = displayText.substring(0, self.cursorPosition);
            let cursorX = contentBounds.x + context.measureText(cursorText).width;
            
            // Blinking cursor (assume there's a timer for this)
            context.setStrokeColor(self.textColor);
            context.setLineWidth(1);
            context.beginPath();
            context.moveTo(cursorX, contentBounds.y + 2);
            context.lineTo(cursorX, contentBounds.y + contentBounds.height - 2);
            context.stroke();
        }
    }
    
    private def _onMouseDown(event: MouseEvent) {
        self.isFocused = true;
        
        // Simple cursor positioning (would need refinement in real implementation)
        let contentBounds = self.getContentBounds();
        let relativeX = event.x - contentBounds.x;
        
        // Approximate cursor position based on character width
        let charWidth = 8; // Simple approximation
        let displayText = self.isPasswordField ? "â€¢".repeat(self.text.length) : self.text;
        
        self.cursorPosition = math.min(
            math.round(relativeX / charWidth),
            displayText.length
        );
        
        self.selection = {start: self.cursorPosition, end: self.cursorPosition};
        
        event.handled = true;
    }
    
    private def _onKeyDown(event: KeyEvent) {
        if (!self.isFocused) return;
        
        // Handle character input
        if (event.key.length === 1 && !event.ctrlKey) {
            // Check max length
            if (self.maxLength !== null && self.text.length >= self.maxLength) {
                return;
            }
            
            // Delete any selected text
            if (self.selection.start !== self.selection.end) {
                self.text = self.text.substring(0, self.selection.start) + 
                           self.text.substring(self.selection.end);
                self.cursorPosition = self.selection.start;
            }
            
            // Insert character
            self.text = self.text.substring(0, self.cursorPosition) + 
                       event.key + 
                       self.text.substring(self.cursorPosition);
            
            // Move cursor
            self.cursorPosition++;
            self.selection = {start: self.cursorPosition, end: self.cursorPosition};
            
            event.handled = true;
        } 
        // Handle special keys
        else if (event.key === "Backspace") {
            if (self.selection.start !== self.selection.end) {
                // Delete selection
                self.text = self.text.substring(0, self.selection.start) + 
                           self.text.substring(self.selection.end);
                self.cursorPosition = self.selection.start;
            } else if (self.cursorPosition > 0) {
                // Delete character before cursor
                self.text = self.text.substring(0, self.cursorPosition - 1) + 
                           self.text.substring(self.cursorPosition);
                self.cursorPosition--;
            }
            
            self.selection = {start: self.cursorPosition, end: self.cursorPosition};
            event.handled = true;
        }
        else if (event.key === "Delete") {
            if (self.selection.start !== self.selection.end) {
                // Delete selection
                self.text = self.text.substring(0, self.selection.start) + 
                           self.text.substring(self.selection.end);
                self.cursorPosition = self.selection.start;
            } else if (self.cursorPosition < self.text.length) {
                // Delete character after cursor
                self.text = self.text.substring(0, self.cursorPosition) + 
                           self.text.substring(self.cursorPosition + 1);
            }
            
            self.selection = {start: self.cursorPosition, end: self.cursorPosition};
            event.handled = true;
        }
        else if (event.key === "ArrowLeft") {
            if (event.shiftKey) {
                // Extend selection
                if (self.cursorPosition > 0) {
                    self.cursorPosition--;
                    self.selection.start = self.cursorPosition;
                }
            } else {
                // Move cursor left
                if (self.selection.start !== self.selection.end) {
                    self.cursorPosition = self.selection.start;
                } else if (self.cursorPosition > 0) {
                    self.cursorPosition--;
                }
                
                self.selection = {start: self.cursorPosition, end: self.cursorPosition};
            }
            
            event.handled = true;
        }
        else if (event.key === "ArrowRight") {
            if (event.shiftKey) {
                // Extend selection
                if (self.cursorPosition < self.text.length) {
                    self.cursorPosition++;
                    self.selection.end = self.cursorPosition;
                }
            } else {
                // Move cursor right
                if (self.selection.start !== self.selection.end) {
                    self.cursorPosition = self.selection.end;
                } else if (self.cursorPosition < self.text.length) {
                    self.cursorPosition++;
                }
                
                self.selection = {start: self.cursorPosition, end: self.cursorPosition};
            }
            
            event.handled = true;
        }
    }
}

/**
 * Checkbox widget
 */
class Checkbox extends Widget {
    property checked: bool;
    property label: string;
    property textColor: ColorRGBA;
    property checkColor: ColorRGBA;
    property boxColor: ColorRGBA;
    property font: Font;
    
    def initialize(label: string = "", checked: bool = false) {
        super.initialize();
        self.checked = checked;
        self.label = label;
        self.textColor = ColorRGBA.BLACK;
        self.checkColor = ColorRGBA.BLACK;
        self.boxColor = ColorRGBA.WHITE;
        self.font = new Font("sans-serif", 14);
        self.border = new Border(ColorRGBA.GRAY, 1, 2);
        self.padding = EdgeInsets.symmetric(4, 2);
        
        // Set up event handlers
        self.addEventListener("click", self._onClick.bind(self));
    }
    
    override def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        let checkboxSize = 20;
        let context = null; // Would be set in a real implementation
        
        // Measure label if present
        let labelWidth = 0;
        if (self.label.length > 0) {
            labelWidth = self.label.length * 7 + 6; // Simple approximation with spacing
        }
        
        // Calculate size
        let width = checkboxSize + labelWidth + self.padding.left + self.padding.right;
        let height = checkboxSize + self.padding.top + self.padding.bottom;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        return {width, height};
    }
    
    override def draw(context: RenderContext) {
        if (!self.visible) {
            return;
        }
        
        let contentBounds = self.getContentBounds();
        let checkboxSize = 18;
        
        // Draw checkbox
        context.setFillColor(self.boxColor);
        context.beginPath();
        context.rect(
            contentBounds.x, 
            contentBounds.y + (contentBounds.height - checkboxSize) / 2, 
            checkboxSize, 
            checkboxSize
        );
        context.fill();
        
        context.setStrokeColor(ColorRGBA.GRAY);
        context.setLineWidth(1);
        context.beginPath();
        context.rect(
            contentBounds.x, 
            contentBounds.y + (contentBounds.height - checkboxSize) / 2, 
            checkboxSize, 
            checkboxSize
        );
        context.stroke();
        
        // Draw checkmark if checked
        if (self.checked) {
            context.setStrokeColor(self.checkColor);
            context.setLineWidth(2);
            context.beginPath();
            
            // Checkmark
            let x1 = contentBounds.x + 4;
            let y1 = contentBounds.y + (contentBounds.height - checkboxSize) / 2 + 9;
            let x2 = contentBounds.x + 8;
            let y2 = contentBounds.y + (contentBounds.height - checkboxSize) / 2 + 14;
            let x3 = contentBounds.x + 15;
            let y3 = contentBounds.y + (contentBounds.height - checkboxSize) / 2 + 5;
            
            context.moveTo(x1, y1);
            context.lineTo(x2, y2);
            context.lineTo(x3, y3);
            
            context.stroke();
        }
        
        // Draw label if present
        if (self.label.length > 0) {
            context.setFillColor(self.textColor);
            context.setFont(self.font);
            
            let textX = contentBounds.x + checkboxSize + 6;
            let textY = contentBounds.y + contentBounds.height / 2 + 5;
            
            context.fillText(self.label, textX, textY);
        }
    }
    
    private def _onClick(event: MouseEvent) {
        self.checked = !self.checked;
        event.handled = true;
    }
}

/**
 * Radio button widget
 */
class RadioButton extends Widget {
    property checked: bool;
    property label: string;
    property textColor: ColorRGBA;
    property radioColor: ColorRGBA;
    property fillColor: ColorRGBA;
    property font: Font;
    property group: string?;
    
    def initialize(label: string = "", checked: bool = false, group: string? = null) {
        super.initialize();
        self.checked = checked;
        self.label = label;
        self.textColor = ColorRGBA.BLACK;
        self.radioColor = ColorRGBA.GRAY;
        self.fillColor = ColorRGBA.BLACK;
        self.font = new Font("sans-serif", 14);
        self.padding = EdgeInsets.symmetric(4, 2);
        self.group = group;
        
        // Set up event handlers
        self.addEventListener("click", self._onClick.bind(self));
    }
    
    override def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        let radioSize = 20;
        let context = null; // Would be set in a real implementation
        
        // Measure label if present
        let labelWidth = 0;
        if (self.label.length > 0) {
            labelWidth = self.label.length * 7 + 6; // Simple approximation with spacing
        }
        
        // Calculate size
        let width = radioSize + labelWidth + self.padding.left + self.padding.right;
        let height = radioSize + self.padding.top + self.padding.bottom;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        return {width, height};
    }
    
    override def draw(context: RenderContext) {
        if (!self.visible) {
            return;
        }
        
        let contentBounds = self.getContentBounds();
        let radioSize = 18;
        let radius = radioSize / 2;
        
        // Draw radio button
        context.setFillColor(ColorRGBA.WHITE);
        context.beginPath();
        context.circle(
            contentBounds.x + radius, 
            contentBounds.y + contentBounds.height / 2, 
            radius
        );
        context.fill();
        
        context.setStrokeColor(self.radioColor);
        context.setLineWidth(1);
        context.beginPath();
        context.circle(
            contentBounds.x + radius, 
            contentBounds.y + contentBounds.height / 2, 
            radius
        );
        context.stroke();
        
        // Draw fill if checked
        if (self.checked) {
            context.setFillColor(self.fillColor);
            context.beginPath();
            context.circle(
                contentBounds.x + radius, 
                contentBounds.y + contentBounds.height / 2, 
                radius - 4
            );
            context.fill();
        }
        
        // Draw label if present
        if (self.label.length > 0) {
            context.setFillColor(self.textColor);
            context.setFont(self.font);
            
            let textX = contentBounds.x + radioSize + 6;
            let textY = contentBounds.y + contentBounds.height / 2 + 5;
            
            context.fillText(self.label, textX, textY);
        }
    }
    
    private def _onClick(event: MouseEvent) {
        if (self.group) {
            // Find other radio buttons in the same group and uncheck them
            let root = self;
            while (root.parent) {
                root = root.parent;
            }
            
            function uncheckOthers(widget: Widget) {
                if (widget instanceof RadioButton && 
                    widget.group === self.group && 
                    widget !== self) {
                    widget.checked = false;
                }
                
                for (let child of widget.children) {
                    uncheckOthers(child);
                }
            }
            
            uncheckOthers(root);
        }
        
        self.checked = true;
        event.handled = true;
    }
}

/**
 * Slider widget
 */
class Slider extends Widget {
    property value: float;
    property min: float;
    property max: float;
    property step: float;
    property orientation: Direction;
    property trackColor: ColorRGBA;
    property thumbColor: ColorRGBA;
    property isDragging: bool;
    
    def initialize(min: float = 0, max: float = 100, value: float = 50) {
        super.initialize();
        self.value = math.clamp(value, min, max);
        self.min = min;
        self.max = max;
        self.step = 1;
        self.orientation = Direction.HORIZONTAL;
        self.trackColor = ColorRGBA.LIGHT_GRAY;
        self.thumbColor = ColorRGBA.DARK_GRAY;
        self.isDragging = false;
        self.padding = EdgeInsets.all(2);
        
        // Set up event handlers
        self.addEventListener("mousedown", self._onMouseDown.bind(self));
        self.addEventListener("mousemove", self._onMouseMove.bind(self));
        self.addEventListener("mouseup", self._onMouseUp.bind(self));
    }
    
    override def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        let width, height;
        
        if (self.orientation === Direction.HORIZONTAL) {
            width = self.constraints.preferredWidth ?? 200;
            height = 20;
        } else {
            width = 20;
            height = self.constraints.preferredHeight ?? 200;
        }
        
        // Add padding
        width += self.padding.left + self.padding.right;
        height += self.padding.top + self.padding.bottom;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        return {width, height};
    }
    
    override def draw(context: RenderContext) {
        if (!self.visible) {
            return;
        }
        
        let contentBounds = self.getContentBounds();
        let thumbRadius = 8;
        
        if (self.orientation === Direction.HORIZONTAL) {
            // Draw track
            let trackY = contentBounds.y + contentBounds.height / 2;
            let trackHeight = 4;
            
            context.setFillColor(self.trackColor);
            context.beginPath();
            context.rect(
                contentBounds.x, 
                trackY - trackHeight / 2, 
                contentBounds.width, 
                trackHeight
            );
            context.fill();
            
            // Calculate thumb position
            let range = self.max - self.min;
            let percentage = (self.value - self.min) / range;
            let thumbX = contentBounds.x + percentage * contentBounds.width;
            
            // Draw thumb
            context.setFillColor(self.thumbColor);
            context.beginPath();
            context.circle(thumbX, trackY, thumbRadius);
            context.fill();
        } else {
            // Draw track
            let trackX = contentBounds.x + contentBounds.width / 2;
            let trackWidth = 4;
            
            context.setFillColor(self.trackColor);
            context.beginPath();
            context.rect(
                trackX - trackWidth / 2, 
                contentBounds.y, 
                trackWidth, 
                contentBounds.height
            );
            context.fill();
            
            // Calculate thumb position
            let range = self.max - self.min;
            let percentage = 1 - (self.value - self.min) / range; // Inverted for Y axis
            let thumbY = contentBounds.y + percentage * contentBounds.height;
            
            // Draw thumb
            context.setFillColor(self.thumbColor);
            context.beginPath();
            context.circle(trackX, thumbY, thumbRadius);
            context.fill();
        }
    }
    
    private def _onMouseDown(event: MouseEvent) {
        self.isDragging = true;
        self._updateValueFromMouseEvent(event);
        event.handled = true;
    }
    
    private def _onMouseMove(event: MouseEvent) {
        if (self.isDragging) {
            self._updateValueFromMouseEvent(event);
            event.handled = true;
        }
    }
    
    private def _onMouseUp(event: MouseEvent) {
        self.isDragging = false;
        event.handled = true;
    }
    
    private def _updateValueFromMouseEvent(event: MouseEvent) {
        let contentBounds = self.getContentBounds();
        let range = self.max - self.min;
        let percentage;
        
        if (self.orientation === Direction.HORIZONTAL) {
            percentage = math.clamp(
                (event.x - contentBounds.x) / contentBounds.width,
                0, 1
            );
        } else {
            percentage = 1 - math.clamp(
                (event.y - contentBounds.y) / contentBounds.height,
                0, 1
            );
        }
        
        // Apply step if needed
        let rawValue = self.min + percentage * range;
        
        if (self.step > 0) {
            rawValue = math.round(rawValue / self.step) * self.step;
        }
        
        self.value = math.clamp(rawValue, self.min, self.max);
    }
}

/**
 * Progress bar widget
 */
class ProgressBar extends Widget {
    property value: float;
    property min: float;
    property max: float;
    property trackColor: ColorRGBA;
    property fillColor: ColorRGBA;
    property showText: bool;
    property textColor: ColorRGBA;
    property font: Font;
    
    def initialize(min: float = 0, max: float = 100, value: float = 0) {
        super.initialize();
        self.value = math.clamp(value, min, max);
        self.min = min;
        self.max = max;
        self.trackColor = ColorRGBA.LIGHT_GRAY;
        self.fillColor = new ColorRGBA(0.2, 0.6, 1.0);
        self.showText = true;
        self.textColor = ColorRGBA.BLACK;
        self.font = new Font("sans-serif", 12);
        self.border = new Border(ColorRGBA.GRAY, 1, 4);
        self.padding = EdgeInsets.all(2);
    }
    
    override def measure(availableWidth: float, availableHeight: float) -> {width: float, height: float} {
        let width = self.constraints.preferredWidth ?? 200;
        let height = 20;
        
        // Add padding
        width += self.padding.left + self.padding.right;
        height += self.padding.top + self.padding.bottom;
        
        // Apply constraints
        width = self.constraints.applyToWidth(width);
        height = self.constraints.applyToHeight(height);
        
        return {width, height};
    }
    
    override def draw(context: RenderContext) {
        if (!self.visible) {
            return;
        }
        
        let contentBounds = self.getContentBounds();
        
        // Draw background track
        context.setFillColor(self.trackColor);
        
        if (self.border && self.border.radius > 0) {
            context.beginPath();
            context.roundRect(
                contentBounds.x, 
                contentBounds.y, 
                contentBounds.width, 
                contentBounds.height, 
                self.border.radius
            );
            context.fill();
        } else {
            context.beginPath();
            context.rect(
                contentBounds.x, 
                contentBounds.y, 
                contentBounds.width, 
                contentBounds.height
            );
            context.fill();
        }
        
        // Calculate fill width
        let range = self.max - self.min;
        let percentage = (self.value - self.min) / range;
        let fillWidth = contentBounds.width * percentage;
        
        // Draw fill
        context.setFillColor(self.fillColor);
        
        if (self.border && self.border.radius > 0 && fillWidth >= self.border.radius * 2) {
            context.beginPath();
            context.roundRect(
                contentBounds.x, 
                contentBounds.y, 
                fillWidth, 
                contentBounds.height, 
                self.border.radius
            );
            context.fill();
        } else {
            context.beginPath();
            context.rect(
                contentBounds.x, 
                contentBounds.y, 
                fillWidth, 
                contentBounds.height
            );
            context.fill();
        }
        
        // Draw percentage text if enabled
        if (self.showText) {
            let percentText = `${math.round(percentage * 100)}%`;
            
            context.setFillColor(self.textColor);
            context.setFont(self.font);
            
            let textSize = context.measureText(percentText);
            let textX = contentBounds.x + (contentBounds.width - textSize.width) / 2;
            let textY = contentBounds.y + contentBounds.height / 2 + 5;
            
            context.fillText(percentText, textX, textY);
        }
        
        // Draw border if specified
        if (self.border && self.border.width > 0) {
            context.setStrokeColor(self.border.color);
            context.setLineWidth(self.border.width);
            
            if (self.border.radius > 0) {
                context.beginPath();
                context.roundRect(
                    contentBounds.x, 
                    contentBounds.y, 
                    contentBounds.width, 
                    contentBounds.height, 
                    self.border.radius
                );
                context.stroke();
            } else {
                context.beginPath();
                context.rect(
                    contentBounds.x, 
                    contentBounds.y, 
                    contentBounds.width, 
                    contentBounds.height
                );
                context.stroke();
            }
        }
    }
}

export {
    Button,
    Label,
    TextField,
    Checkbox,
    RadioButton,
    Slider,
    ProgressBar
} 
