// Example Tocin program demonstrating web development capabilities

// Import necessary web modules
import net.http;
import net.server;
import net.advanced.rest;
import system.io;
import system.json;
import system.time;

/**
 * A simple REST API server for a user management system
 */
class UserApiServer {
    property server: server.HttpServer;
    property users: Array<{id: int, name: string, email: string, createdAt: string}>;
    property nextId: int;
    
    def initialize(port: int = 3000) {
        // Create HTTP server
        self.server = new server.HttpServer({
            port: port,
            cors: true  // Enable CORS for browser access
        });
        
        // Initialize users data
        self.users = [];
        self.nextId = 1;
        
        // Add some sample users
        self.addSampleUsers();
        
        // Set up routes
        self.setupRoutes();
    }
    
    def addSampleUsers() -> void {
        self.users.push({
            id: self.nextId++,
            name: "Alice Johnson",
            email: "alice@example.com",
            createdAt: time.now().toISOString()
        });
        
        self.users.push({
            id: self.nextId++,
            name: "Bob Smith",
            email: "bob@example.com",
            createdAt: time.now().toISOString()
        });
        
        self.users.push({
            id: self.nextId++,
            name: "Charlie Davis",
            email: "charlie@example.com",
            createdAt: time.now().toISOString()
        });
    }
    
    def setupRoutes() -> void {
        // GET /api/users - Get all users
        self.server.get("/api/users", self.getAllUsers.bind(self));
        
        // GET /api/users/:id - Get user by ID
        self.server.get("/api/users/:id", self.getUserById.bind(self));
        
        // POST /api/users - Create new user
        self.server.post("/api/users", self.createUser.bind(self));
        
        // PUT /api/users/:id - Update user
        self.server.put("/api/users/:id", self.updateUser.bind(self));
        
        // DELETE /api/users/:id - Delete user
        self.server.delete("/api/users/:id", self.deleteUser.bind(self));
        
        // Serve static files from the public directory
        self.server.static("/", "./public");
    }
    
    def start() -> void {
        println("Starting user API server on port " + self.server.port.toString());
        println("Available routes:");
        println("  GET    /api/users");
        println("  GET    /api/users/:id");
        println("  POST   /api/users");
        println("  PUT    /api/users/:id");
        println("  DELETE /api/users/:id");
        
        self.server.start();
    }
    
    // Route handlers
    
    def getAllUsers(req: server.Request, res: server.Response) -> void {
        // Return all users
        res.json(self.users);
    }
    
    def getUserById(req: server.Request, res: server.Response) -> void {
        let id = parseInt(req.params.get("id"));
        
        if (isNaN(id)) {
            res.status(400).json({
                error: "Invalid ID format"
            });
            return;
        }
        
        let user = self.users.find(u => u.id == id);
        
        if (!user) {
            res.status(404).json({
                error: "User not found"
            });
            return;
        }
        
        res.json(user);
    }
    
    def createUser(req: server.Request, res: server.Response) -> void {
        let data = req.body;
        
        // Validate required fields
        if (!data.name || !data.email) {
            res.status(400).json({
                error: "Name and email are required"
            });
            return;
        }
        
        // Create new user
        let newUser = {
            id: self.nextId++,
            name: data.name,
            email: data.email,
            createdAt: time.now().toISOString()
        };
        
        self.users.push(newUser);
        
        res.status(201).json(newUser);
    }
    
    def updateUser(req: server.Request, res: server.Response) -> void {
        let id = parseInt(req.params.get("id"));
        
        if (isNaN(id)) {
            res.status(400).json({
                error: "Invalid ID format"
            });
            return;
        }
        
        let userIndex = self.users.findIndex(u => u.id == id);
        
        if (userIndex == -1) {
            res.status(404).json({
                error: "User not found"
            });
            return;
        }
        
        let data = req.body;
        let user = self.users[userIndex];
        
        // Update user fields
        if (data.name) user.name = data.name;
        if (data.email) user.email = data.email;
        
        res.json(user);
    }
    
    def deleteUser(req: server.Request, res: server.Response) -> void {
        let id = parseInt(req.params.get("id"));
        
        if (isNaN(id)) {
            res.status(400).json({
                error: "Invalid ID format"
            });
            return;
        }
        
        let userIndex = self.users.findIndex(u => u.id == id);
        
        if (userIndex == -1) {
            res.status(404).json({
                error: "User not found"
            });
            return;
        }
        
        // Remove user
        let deletedUser = self.users[userIndex];
        self.users.splice(userIndex, 1);
        
        res.json({
            message: "User deleted successfully",
            user: deletedUser
        });
    }
}

/**
 * Create an HTML file for the front-end
 */
def createFrontendFiles() -> void {
    // Create public directory if it doesn't exist
    if (!io.directoryExists("./public")) {
        io.createDirectory("./public");
    }
    
    // Create HTML file
    let htmlContent = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tocin User Management</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            color: #2c3e50;
        }
        .user-form {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 10px;
        }
        label {
            display: block;
            margin-bottom: 5px;
        }
        input[type="text"],
        input[type="email"] {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #2980b9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
        .actions {
            display: flex;
            gap: 5px;
        }
        .edit-btn {
            background-color: #2ecc71;
        }
        .edit-btn:hover {
            background-color: #27ae60;
        }
        .delete-btn {
            background-color: #e74c3c;
        }
        .delete-btn:hover {
            background-color: #c0392b;
        }
    </style>
</head>
<body>
    <h1>Tocin User Management</h1>
    
    <div class="user-form">
        <h2 id="form-title">Add New User</h2>
        <form id="user-form">
            <input type="hidden" id="user-id">
            <div class="form-group">
                <label for="name">Name:</label>
                <input type="text" id="name" required>
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" required>
            </div>
            <button type="submit">Save User</button>
            <button type="button" id="cancel-btn" style="display:none">Cancel</button>
        </form>
    </div>
    
    <h2>Users</h2>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Created At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="users-table">
            <!-- User data will be inserted here -->
        </tbody>
    </table>
    
    <script>
        // API URL
        const API_URL = '/api/users';
        let editMode = false;
        
        // DOM elements
        const userForm = document.getElementById('user-form');
        const formTitle = document.getElementById('form-title');
        const userIdInput = document.getElementById('user-id');
        const nameInput = document.getElementById('name');
        const emailInput = document.getElementById('email');
        const usersTable = document.getElementById('users-table');
        const cancelBtn = document.getElementById('cancel-btn');
        
        // Load users on page load
        document.addEventListener('DOMContentLoaded', loadUsers);
        
        // Form submission
        userForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const userData = {
                name: nameInput.value,
                email: emailInput.value
            };
            
            if (editMode) {
                // Update existing user
                updateUser(userIdInput.value, userData);
            } else {
                // Create new user
                createUser(userData);
            }
        });
        
        // Cancel button
        cancelBtn.addEventListener('click', resetForm);
        
        // Load all users
        async function loadUsers() {
            try {
                const response = await fetch(API_URL);
                const users = await response.json();
                
                // Clear the table
                usersTable.innerHTML = '';
                
                // Add each user to the table
                users.forEach(user => {
                    const row = createUserRow(user);
                    usersTable.appendChild(row);
                });
            } catch (error) {
                console.error('Error loading users:', error);
            }
        }
        
        // Create user row
        function createUserRow(user) {
            const row = document.createElement('tr');
            const createdDate = new Date(user.createdAt).toLocaleDateString();
            
            row.innerHTML = `
                <td>${user.id}</td>
                <td>${user.name}</td>
                <td>${user.email}</td>
                <td>${createdDate}</td>
                <td class="actions">
                    <button class="edit-btn" data-id="${user.id}">Edit</button>
                    <button class="delete-btn" data-id="${user.id}">Delete</button>
                </td>
            `;
            
            // Add event listeners for buttons
            row.querySelector('.edit-btn').addEventListener('click', () => editUser(user));
            row.querySelector('.delete-btn').addEventListener('click', () => deleteUser(user.id));
            
            return row;
        }
        
        // Create new user
        async function createUser(userData) {
            try {
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(userData)
                });
                
                if (response.ok) {
                    resetForm();
                    loadUsers();
                }
            } catch (error) {
                console.error('Error creating user:', error);
            }
        }
        
        // Update existing user
        async function updateUser(id, userData) {
            try {
                const response = await fetch(`${API_URL}/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(userData)
                });
                
                if (response.ok) {
                    resetForm();
                    loadUsers();
                }
            } catch (error) {
                console.error('Error updating user:', error);
            }
        }
        
        // Delete user
        async function deleteUser(id) {
            if (confirm('Are you sure you want to delete this user?')) {
                try {
                    const response = await fetch(`${API_URL}/${id}`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        loadUsers();
                    }
                } catch (error) {
                    console.error('Error deleting user:', error);
                }
            }
        }
        
        // Edit user
        function editUser(user) {
            editMode = true;
            formTitle.textContent = 'Edit User';
            userIdInput.value = user.id;
            nameInput.value = user.name;
            emailInput.value = user.email;
            cancelBtn.style.display = 'inline-block';
        }
        
        // Reset form
        function resetForm() {
            editMode = false;
            formTitle.textContent = 'Add New User';
            userForm.reset();
            userIdInput.value = '';
            cancelBtn.style.display = 'none';
        }
    </script>
</body>
</html>`;
    
    // Write HTML file
    io.writeFile("./public/index.html", htmlContent);
    
    println("Frontend files created successfully in the 'public' directory");
}

def main() -> int {
    println("Tocin Web Development Demo - User Management API");
    
    // Create frontend files
    createFrontendFiles();
    
    // Create and start the server
    let server = new UserApiServer(3000);
    server.start();
    
    return 0;
} 
