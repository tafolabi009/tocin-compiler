#ifndef ERROR_HANDLER_H
#define ERROR_HANDLER_H

#include <string>
#include <vector>
#include <mutex>
#include <variant>          // For optional data
#include "../lexer/token.h" // Include token.h for Token definition

namespace error
{

    // Define specific error codes
    enum class ErrorCode
    {
        // Lexical Errors (L001-L099)
        L001_INVALID_CHARACTER,
        L002_UNTERMINATED_STRING,
        L003_INVALID_NUMBER_FORMAT,
        L004_TOO_MANY_ERRORS,
        L005_INVALID_ESCAPE_SEQUENCE,
        L006_INVALID_UNICODE_ESCAPE,
        L007_INVALID_TEMPLATE_LITERAL,

        // Syntax Errors (S001-S099)
        S001_UNEXPECTED_TOKEN,
        S002_MISSING_EXPECTED_TOKEN, // e.g., missing semicolon
        S003_INVALID_EXPRESSION,
        S004_INVALID_STATEMENT,
        S005_INVALID_ASSIGNMENT_TARGET,
        S006_INVALID_FUNCTION_DECLARATION,
        S007_INVALID_CLASS_DECLARATION,
        S008_INVALID_IMPORT_STATEMENT,
        S009_INVALID_MATCH_STATEMENT,
        S010_INVALID_TRY_CATCH_BLOCK,
        S011_INVALID_LOOP_STATEMENT,
        S012_INVALID_SWITCH_STATEMENT,
        S013_INVALID_ENUM_DECLARATION,
        S014_INVALID_STRUCT_DECLARATION,
        S015_INVALID_INTERFACE_DECLARATION,
        S016_INVALID_TRAIT_DECLARATION,
        S017_INVALID_IMPL_BLOCK,
        S018_INVALID_MODULE_DECLARATION,
        S019_INVALID_NAMESPACE_DECLARATION,
        S020_INVALID_DEFER_STATEMENT,

        // Type Errors (T001-T099)
        T001_TYPE_MISMATCH,
        T002_UNDEFINED_VARIABLE,
        T003_UNDEFINED_FUNCTION,
        T004_UNDEFINED_CLASS,
        T005_UNDEFINED_METHOD,
        T006_INVALID_OPERATOR_FOR_TYPE,
        T007_INVALID_FUNCTION_CALL,
        T008_INVALID_METHOD_CALL,
        T009_INVALID_CONSTRUCTOR_CALL,
        T010_INVALID_DESTRUCTOR_CALL,
        T011_INVALID_CAST,
        T012_INVALID_CONVERSION,
        T013_INVALID_ASSIGNMENT,
        T014_INVALID_RETURN_TYPE,
        T015_INVALID_PARAMETER_TYPE,
        T016_INVALID_GENERIC_TYPE,
        T017_INVALID_TRAIT_IMPLEMENTATION,
        T018_INVALID_INTERFACE_IMPLEMENTATION,
        T019_INVALID_INHERITANCE,
        T020_INVALID_OVERRIDE,
        T021_INVALID_ABSTRACT_METHOD,
        T022_INVALID_FINAL_OVERRIDE,
        T023_INVALID_STATIC_METHOD,
        T024_INVALID_VIRTUAL_METHOD,
        T025_INVALID_CONST_METHOD,
        T026_INVALID_MUTABLE_REFERENCE,
        T027_INVALID_IMMUTABLE_REFERENCE,
        T028_INVALID_MOVE_SEMANTICS,
        T029_INVALID_OWNERSHIP_TRANSFER,
        T030_INVALID_BORROW_CHECK,
        T031_UNDEFINED_TYPE,
        T032_CANNOT_INFER_TYPE,
        T033_INCORRECT_ARGUMENT_COUNT,
        T034_INCORRECT_ARGUMENT_TYPE,

        // Module Errors (M001-M099)
        M001_DUPLICATE_DEFINITION,
        M002_CIRCULAR_DEPENDENCY,
        M003_INVALID_MODULE_PATH,
        M004_MODULE_NOT_FOUND,
        M005_INVALID_MODULE_FORMAT,
        M006_MODULE_NOT_FOUND,
        M007_INVALID_PACKAGE_NAME,
        M008_INVALID_NAMESPACE_NAME,
        M009_INVALID_IMPORT_PATH,
        M010_INVALID_EXPORT_STATEMENT,
        M011_INVALID_MODULE_STRUCTURE,
        M012_INVALID_PACKAGE_STRUCTURE,
        M013_INVALID_NAMESPACE_STRUCTURE,
        M014_INVALID_DEPENDENCY_DECLARATION,
        M015_INVALID_VERSION_SPECIFICATION,

        // FFI Errors (F001-F099)
        F001_FFI_CALL_FAILED,
        F002_INVALID_FFI_SIGNATURE,
        F003_INVALID_FFI_TYPE,
        F004_INVALID_FFI_LIBRARY,
        F005_INVALID_FFI_FUNCTION,
        F006_INVALID_FFI_PARAMETER,
        F007_INVALID_FFI_RETURN_TYPE,
        F008_INVALID_FFI_CALLING_CONVENTION,
        F009_INVALID_FFI_MARSHALING,
        F010_INVALID_FFI_UNMARSHALING,
        F011_INVALID_FFI_MEMORY_MANAGEMENT,
        F012_INVALID_FFI_ERROR_HANDLING,
        F013_INVALID_FFI_THREAD_SAFETY,
        F014_INVALID_FFI_EXCEPTION_HANDLING,
        F015_INVALID_FFI_RESOURCE_MANAGEMENT,

        // Concurrency Errors (C001-C099)
        C001_CONCURRENCY_ERROR,
        C002_DEADLOCK_DETECTED,
        C003_RACE_CONDITION_DETECTED,
        C004_INVALID_THREAD_OPERATION,
        C005_INVALID_MUTEX_OPERATION,
        C006_INVALID_CONDITION_VARIABLE_OPERATION,
        C007_INVALID_SEMAPHORE_OPERATION,
        C008_INVALID_BARRIER_OPERATION,
        C009_INVALID_FUTURE_OPERATION,
        C010_INVALID_PROMISE_OPERATION,
        C011_INVALID_CHANNEL_OPERATION,
        C012_INVALID_SELECT_OPERATION,
        C013_INVALID_SPAWN_OPERATION,
        C014_INVALID_JOIN_OPERATION,
        C015_INVALID_YIELD_OPERATION,
        C016_INVALID_COROUTINE_OPERATION,
        C017_INVALID_GENERATOR_OPERATION,
        C018_INVALID_ASYNC_OPERATION,
        C019_INVALID_AWAIT_OPERATION,
        C020_INVALID_ATOMIC_OPERATION,
        C021_INVALID_MEMORY_ORDERING,
        C022_INVALID_FENCE_OPERATION,
        C023_INVALID_COMPARE_EXCHANGE_OPERATION,
        C024_INVALID_FETCH_OPERATION,
        C025_INVALID_STORE_OPERATION,
        C026_INVALID_LOAD_OPERATION,
        C027_INVALID_EXCHANGE_OPERATION,
        C028_INVALID_TEST_AND_SET_OPERATION,
        C029_INVALID_CLEAR_OPERATION,
        C030_INVALID_NOTIFY_OPERATION,

        // Runtime Errors (R001-R099)
        R001_RUNTIME_ERROR,
        R002_NULL_POINTER_DEREFERENCE,
        R003_DIVISION_BY_ZERO,
        R004_ARRAY_INDEX_OUT_OF_BOUNDS,
        R005_STACK_OVERFLOW,
        R006_HEAP_OVERFLOW,
        R007_MEMORY_LEAK_DETECTED,
        R008_DOUBLE_FREE_DETECTED,
        R009_USE_AFTER_FREE_DETECTED,
        R010_BUFFER_OVERFLOW_DETECTED,
        R011_INTEGER_OVERFLOW_DETECTED,
        R012_FLOATING_POINT_EXCEPTION,
        R013_INVALID_MEMORY_ACCESS,
        R014_INVALID_MEMORY_ALIGNMENT,
        R015_INVALID_MEMORY_SIZE,
        R016_INVALID_MEMORY_ADDRESS,
        R017_INVALID_MEMORY_MAPPING,
        R018_INVALID_MEMORY_PROTECTION,
        R019_INVALID_MEMORY_PERMISSION,
        R020_INVALID_MEMORY_REGION,
        R021_INVALID_MEMORY_OPERATION,
        R022_INVALID_MEMORY_STATE,
        R023_INVALID_MEMORY_CONSISTENCY,
        R024_INVALID_MEMORY_ORDERING,
        R025_INVALID_MEMORY_FENCE,
        R026_INVALID_MEMORY_BARRIER,
        R027_INVALID_MEMORY_SYNCHRONIZATION,
        R028_INVALID_MEMORY_COHERENCE,
        R029_INVALID_MEMORY_VISIBILITY,
        R030_INVALID_MEMORY_PERSISTENCE,

        // Input/Output Errors (I001-I099)
        I001_FILE_NOT_FOUND,
        I002_FILE_ACCESS_DENIED,
        I003_READ_ERROR,
        I004_WRITE_ERROR,
        I005_FILE_ALREADY_EXISTS,
        I006_INVALID_FILE_PATH,
        I007_INVALID_FILE_FORMAT,
        I008_INVALID_FILE_ENCODING,
        I009_INVALID_FILE_PERMISSION,
        I010_INVALID_FILE_MODE,
        I011_INVALID_FILE_DESCRIPTOR,
        I012_INVALID_FILE_OPERATION,
        I013_INVALID_FILE_STATE,
        I014_INVALID_FILE_POSITION,
        I015_INVALID_FILE_SIZE,
        I016_INVALID_FILE_TIMESTAMP,
        I017_INVALID_FILE_ATTRIBUTE,
        I018_INVALID_FILE_METADATA,
        I019_INVALID_FILE_CONTENT,
        I020_INVALID_FILE_STRUCTURE,
        I021_INVALID_FILE_VERSION,
        I022_INVALID_FILE_CHECKSUM,
        I023_INVALID_FILE_SIGNATURE,
        I024_INVALID_FILE_HEADER,
        I025_INVALID_FILE_FOOTER,
        I026_INVALID_FILE_SECTION,
        I027_INVALID_FILE_SEGMENT,
        I028_INVALID_FILE_BLOCK,
        I029_INVALID_FILE_RECORD,
        I030_INVALID_FILE_ENTRY,

        // Compiler Errors (C001-C099)
        C001_UNIMPLEMENTED_FEATURE,
        C002_CODEGEN_ERROR,
        C003_OPTIMIZATION_ERROR,
        C004_INTERNAL_ASSERTION_FAILED,
        C005_INVALID_IR_GENERATION,
        C006_INVALID_OPTIMIZATION_PASS,
        C007_INVALID_CODE_GENERATION,
        C008_INVALID_LINKING,
        C009_INVALID_ASSEMBLY_GENERATION,
        C010_INVALID_OBJECT_FILE_GENERATION,
        C011_INVALID_EXECUTABLE_GENERATION,
        C012_INVALID_LIBRARY_GENERATION,
        C013_INVALID_MODULE_GENERATION,
        C014_INVALID_PACKAGE_GENERATION,
        C015_INVALID_DISTRIBUTION_GENERATION,
        C016_INVALID_INSTALLER_GENERATION,
        C017_INVALID_DEPLOYMENT_GENERATION,
        C018_INVALID_PACKAGING,
        C019_INVALID_SIGNING,
        C020_INVALID_VERIFICATION,
        C021_INVALID_VALIDATION,
        C022_INVALID_SANITIZATION,
        C023_INVALID_TRANSFORMATION,
        C024_INVALID_EMISSION,
        C025_INVALID_SERIALIZATION,
        C026_INVALID_DESERIALIZATION,
        C027_INVALID_MARSHALING,
        C028_INVALID_UNMARSHALING,
        C029_INVALID_ENCODING,
        C030_INVALID_DECODING,
        C031_TYPECHECK_ERROR,

        // Pattern Matching Errors (P001-P099)
        P001_NON_EXHAUSTIVE_PATTERNS,
        P002_INVALID_PATTERN,
        P003_INVALID_PATTERN_BINDING,
        P004_INVALID_PATTERN_GUARD,
        P005_INVALID_PATTERN_TYPE,

        // Borrowing/Ownership Errors (B001-B099)
        B001_USE_AFTER_MOVE,
        B002_BORROW_CONFLICT,
        B003_MUTABILITY_ERROR,
        B004_MOVE_BORROWED_VALUE,
        B005_INVALID_BORROW,
        B006_INVALID_MOVE,
        B007_INVALID_REFERENCE,
        B008_INVALID_LIFETIME,
        B009_INVALID_OWNERSHIP,
        B010_INVALID_BORROW_CHECK,

        // Generic/Unknown Errors (G001-G099)
        G001_GENERIC_ERROR,
        G002_UNKNOWN_ERROR,
        G003_UNEXPECTED_ERROR,
        G004_SYSTEM_ERROR,
        G005_PLATFORM_ERROR,
        G006_ENVIRONMENT_ERROR,
        G007_CONFIGURATION_ERROR,
        G008_INITIALIZATION_ERROR,
        G009_TERMINATION_ERROR,
        G010_CLEANUP_ERROR,
        G011_RESOURCE_ERROR,
        G012_MEMORY_ERROR,
        G013_THREAD_ERROR,
        G014_PROCESS_ERROR,
        G015_SIGNAL_ERROR,
        G016_INTERRUPT_ERROR,
        G017_EXCEPTION_ERROR,
        G018_ABORT_ERROR,
        G019_PANIC_ERROR,
        G020_ASSERTION_ERROR,
        G021_DEBUG_ERROR,
        G022_TRACE_ERROR,
        G023_LOG_ERROR,
        G024_WARN_ERROR,
        G025_ERROR_ERROR,
        G026_FATAL_ERROR,
        G027_CRITICAL_ERROR,
        G028_SEVERE_ERROR,
        G029_EMERGENCY_ERROR,
        G030_DISASTER_ERROR,
    };

    // Function to convert ErrorCode to string (optional but helpful)
    std::string errorCodeToString(ErrorCode code);

    enum class ErrorSeverity
    {
        WARNING,
        ERROR,
        FATAL
    };

    struct Error
    {
        ErrorCode code; // Added ErrorCode
        std::string message;
        std::string filename;
        int line;
        int column;
        ErrorSeverity severity;
        // Optional: std::variant<...> contextData; // Could hold expected token, type names etc.

        Error(ErrorCode errCode, std::string msg, std::string file, int l, int c, ErrorSeverity sev)
            : code(errCode), message(std::move(msg)), filename(std::move(file)), line(l), column(c), severity(sev) {}
    };

    // Create an alias to fix compatibility issues
    using e = Error;

    class ErrorHandler
    {
    public:
        ErrorHandler() = default;
        explicit ErrorHandler(const std::string &filename) : defaultFilename(filename) {}

        // Updated reportError methods
        void reportError(ErrorCode code, const std::string &message, const std::string &filename, int line, int column,
                         ErrorSeverity severity = ErrorSeverity::ERROR);

        void reportError(ErrorCode code, const std::string &message, const lexer::Token &token,
                         ErrorSeverity severity = ErrorSeverity::ERROR);

        // For general errors without specific location info (use sparingly)
        void reportError(ErrorCode code, const std::string &message,
                         ErrorSeverity severity = ErrorSeverity::ERROR);

        const std::vector<e> &getErrors() const;
        bool hasErrors() const;
        bool hasFatalErrors() const;
        void setFatal(bool fatal); // Maybe remove if FATAL severity is used consistently
        bool isFatal() const;      // Maybe remove if FATAL severity is used consistently
        void clearErrors();        // Useful for REPL or interactive modes

    private:
        std::vector<e> errors;
        mutable std::mutex mutex;
        bool fatalErrorFound = false; // Consider relying solely on severity in the errors vector
        std::string defaultFilename = "<unknown>";
    };

} // namespace error

#endif // ERROR_HANDLER_H
