/**
 * Tocin Standard Library - Shader Module
 * Provides support for GLSL shaders and GPU-accelerated rendering.
 */

import math.basic;
import math.geometry;
import math.linear;
import game.engine;

/**
 * Shader types
 */
enum ShaderType {
    VERTEX,
    FRAGMENT,
    COMPUTE
}

/**
 * Shader variable types
 */
enum ShaderVarType {
    FLOAT,
    VEC2,
    VEC3,
    VEC4,
    MAT2,
    MAT3,
    MAT4,
    INT,
    IVEC2,
    IVEC3,
    IVEC4,
    BOOL,
    SAMPLER_2D,
    SAMPLER_CUBE
}

/**
 * Shader uniform value
 */
class ShaderUniform {
    property name: string;
    property type: ShaderVarType;
    property value: any;
    
    def initialize(name: string, type: ShaderVarType, value: any) {
        self.name = name;
        self.type = type;
        self.value = value;
    }
}

/**
 * Shader attribute (input vertex data)
 */
class ShaderAttribute {
    property name: string;
    property type: ShaderVarType;
    property size: int;
    property location: int;
    
    def initialize(name: string, type: ShaderVarType, location: int = -1) {
        self.name = name;
        self.type = type;
        self.location = location;
        
        // Determine size based on type
        switch (type) {
            case ShaderVarType.FLOAT:
            case ShaderVarType.INT:
            case ShaderVarType.BOOL:
                self.size = 1;
                break;
            case ShaderVarType.VEC2:
            case ShaderVarType.IVEC2:
                self.size = 2;
                break;
            case ShaderVarType.VEC3:
            case ShaderVarType.IVEC3:
                self.size = 3;
                break;
            case ShaderVarType.VEC4:
            case ShaderVarType.IVEC4:
                self.size = 4;
                break;
            case ShaderVarType.MAT2:
                self.size = 4;
                break;
            case ShaderVarType.MAT3:
                self.size = 9;
                break;
            case ShaderVarType.MAT4:
                self.size = 16;
                break;
            default:
                self.size = 0;
                break;
        }
    }
}

/**
 * Shader class for handling GLSL shader programs
 */
class Shader {
    property vertexSource: string;
    property fragmentSource: string;
    property programId: any;
    property uniforms: Map<string, ShaderUniform>;
    property attributes: Map<string, ShaderAttribute>;
    
    def initialize(vertexSource: string, fragmentSource: string) {
        self.vertexSource = vertexSource;
        self.fragmentSource = fragmentSource;
        self.programId = null;
        self.uniforms = new Map();
        self.attributes = new Map();
    }
    
    /**
     * Compile and link the shader program
     */
    def compile(gl: WebGLRenderingContext) -> bool {
        // Create shader objects
        let vertexShader = self._createShader(gl, gl.VERTEX_SHADER, self.vertexSource);
        let fragmentShader = self._createShader(gl, gl.FRAGMENT_SHADER, self.fragmentSource);
        
        if (!vertexShader || !fragmentShader) {
            return false;
        }
        
        // Create program and attach shaders
        let program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        
        // Link program
        gl.linkProgram(program);
        
        // Check if linking succeeded
        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.error(`Failed to link shader program: ${gl.getProgramInfoLog(program)}`);
            gl.deleteProgram(program);
            return false;
        }
        
        // Store program ID
        self.programId = program;
        
        // Extract uniforms and attributes
        self._extractUniforms(gl);
        self._extractAttributes(gl);
        
        return true;
    }
    
    /**
     * Use this shader program for rendering
     */
    def use(gl: WebGLRenderingContext) -> void {
        if (self.programId) {
            gl.useProgram(self.programId);
        }
    }
    
    /**
     * Set a uniform value
     */
    def setUniform(gl: WebGLRenderingContext, name: string, value: any) -> bool {
        if (!self.programId) {
            return false;
        }
        
        let location = gl.getUniformLocation(self.programId, name);
        if (!location) {
            console.warn(`Uniform '${name}' not found in shader program`);
            return false;
        }
        
        let uniform = self.uniforms.get(name);
        if (!uniform) {
            console.warn(`Uniform '${name}' not found in registered uniforms`);
            return false;
        }
        
        // Update uniform value
        uniform.value = value;
        
        // Set uniform value based on type
        switch (uniform.type) {
            case ShaderVarType.FLOAT:
                gl.uniform1f(location, value);
                break;
            case ShaderVarType.VEC2:
                gl.uniform2f(location, value[0], value[1]);
                break;
            case ShaderVarType.VEC3:
                gl.uniform3f(location, value[0], value[1], value[2]);
                break;
            case ShaderVarType.VEC4:
                gl.uniform4f(location, value[0], value[1], value[2], value[3]);
                break;
            case ShaderVarType.MAT2:
                gl.uniformMatrix2fv(location, false, value);
                break;
            case ShaderVarType.MAT3:
                gl.uniformMatrix3fv(location, false, value);
                break;
            case ShaderVarType.MAT4:
                gl.uniformMatrix4fv(location, false, value);
                break;
            case ShaderVarType.INT:
            case ShaderVarType.SAMPLER_2D:
            case ShaderVarType.SAMPLER_CUBE:
                gl.uniform1i(location, value);
                break;
            case ShaderVarType.IVEC2:
                gl.uniform2i(location, value[0], value[1]);
                break;
            case ShaderVarType.IVEC3:
                gl.uniform3i(location, value[0], value[1], value[2]);
                break;
            case ShaderVarType.IVEC4:
                gl.uniform4i(location, value[0], value[1], value[2], value[3]);
                break;
            case ShaderVarType.BOOL:
                gl.uniform1i(location, value ? 1 : 0);
                break;
            default:
                console.warn(`Unsupported uniform type for '${name}'`);
                return false;
        }
        
        return true;
    }
    
    /**
     * Set the attribute pointer for vertex data
     */
    def setAttribute(gl: WebGLRenderingContext, name: string, size: int, type: int, 
                     normalized: bool, stride: int, offset: int) -> bool {
        if (!self.programId) {
            return false;
        }
        
        let attribute = self.attributes.get(name);
        if (!attribute) {
            console.warn(`Attribute '${name}' not found in shader program`);
            return false;
        }
        
        gl.enableVertexAttribArray(attribute.location);
        gl.vertexAttribPointer(attribute.location, size, type, normalized, stride, offset);
        
        return true;
    }
    
    /**
     * Dispose shader resources
     */
    def dispose(gl: WebGLRenderingContext) -> void {
        if (self.programId) {
            gl.deleteProgram(self.programId);
            self.programId = null;
        }
    }
    
    /**
     * Create and compile an individual shader
     */
    private def _createShader(gl: WebGLRenderingContext, type: int, source: string) -> WebGLShader? {
        let shader = gl.createShader(type);
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        
        // Check if compilation succeeded
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            console.error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}`);
            gl.deleteShader(shader);
            return null;
        }
        
        return shader;
    }
    
    /**
     * Extract uniform information from the shader program
     */
    private def _extractUniforms(gl: WebGLRenderingContext) -> void {
        if (!self.programId) {
            return;
        }
        
        let numUniforms = gl.getProgramParameter(self.programId, gl.ACTIVE_UNIFORMS);
        
        for (let i = 0; i < numUniforms; i++) {
            let uniformInfo = gl.getActiveUniform(self.programId, i);
            if (!uniformInfo) continue;
            
            let type = self._glTypeToShaderVarType(uniformInfo.type);
            let uniform = new ShaderUniform(uniformInfo.name, type, null);
            
            // Initialize with default value based on type
            switch (type) {
                case ShaderVarType.FLOAT:
                    uniform.value = 0.0;
                    break;
                case ShaderVarType.VEC2:
                    uniform.value = [0, 0];
                    break;
                case ShaderVarType.VEC3:
                    uniform.value = [0, 0, 0];
                    break;
                case ShaderVarType.VEC4:
                    uniform.value = [0, 0, 0, 0];
                    break;
                case ShaderVarType.MAT2:
                    uniform.value = [1, 0, 0, 1];
                    break;
                case ShaderVarType.MAT3:
                    uniform.value = [1, 0, 0, 0, 1, 0, 0, 0, 1];
                    break;
                case ShaderVarType.MAT4:
                    uniform.value = [
                        1, 0, 0, 0,
                        0, 1, 0, 0,
                        0, 0, 1, 0,
                        0, 0, 0, 1
                    ];
                    break;
                case ShaderVarType.INT:
                case ShaderVarType.SAMPLER_2D:
                case ShaderVarType.SAMPLER_CUBE:
                    uniform.value = 0;
                    break;
                case ShaderVarType.IVEC2:
                    uniform.value = [0, 0];
                    break;
                case ShaderVarType.IVEC3:
                    uniform.value = [0, 0, 0];
                    break;
                case ShaderVarType.IVEC4:
                    uniform.value = [0, 0, 0, 0];
                    break;
                case ShaderVarType.BOOL:
                    uniform.value = false;
                    break;
            }
            
            self.uniforms.set(uniformInfo.name, uniform);
        }
    }
    
    /**
     * Extract attribute information from the shader program
     */
    private def _extractAttributes(gl: WebGLRenderingContext) -> void {
        if (!self.programId) {
            return;
        }
        
        let numAttributes = gl.getProgramParameter(self.programId, gl.ACTIVE_ATTRIBUTES);
        
        for (let i = 0; i < numAttributes; i++) {
            let attributeInfo = gl.getActiveAttrib(self.programId, i);
            if (!attributeInfo) continue;
            
            let type = self._glTypeToShaderVarType(attributeInfo.type);
            let location = gl.getAttribLocation(self.programId, attributeInfo.name);
            
            let attribute = new ShaderAttribute(attributeInfo.name, type, location);
            self.attributes.set(attributeInfo.name, attribute);
        }
    }
    
    /**
     * Convert WebGL type to ShaderVarType
     */
    private def _glTypeToShaderVarType(glType: int) -> ShaderVarType {
        // WebGL constants
        let GL_FLOAT = 0x1406;
        let GL_FLOAT_VEC2 = 0x8B50;
        let GL_FLOAT_VEC3 = 0x8B51;
        let GL_FLOAT_VEC4 = 0x8B52;
        let GL_INT = 0x1404;
        let GL_INT_VEC2 = 0x8B53;
        let GL_INT_VEC3 = 0x8B54;
        let GL_INT_VEC4 = 0x8B55;
        let GL_BOOL = 0x8B56;
        let GL_BOOL_VEC2 = 0x8B57;
        let GL_BOOL_VEC3 = 0x8B58;
        let GL_BOOL_VEC4 = 0x8B59;
        let GL_FLOAT_MAT2 = 0x8B5A;
        let GL_FLOAT_MAT3 = 0x8B5B;
        let GL_FLOAT_MAT4 = 0x8B5C;
        let GL_SAMPLER_2D = 0x8B5E;
        let GL_SAMPLER_CUBE = 0x8B60;
        
        switch (glType) {
            case GL_FLOAT:
                return ShaderVarType.FLOAT;
            case GL_FLOAT_VEC2:
                return ShaderVarType.VEC2;
            case GL_FLOAT_VEC3:
                return ShaderVarType.VEC3;
            case GL_FLOAT_VEC4:
                return ShaderVarType.VEC4;
            case GL_INT:
                return ShaderVarType.INT;
            case GL_INT_VEC2:
                return ShaderVarType.IVEC2;
            case GL_INT_VEC3:
                return ShaderVarType.IVEC3;
            case GL_INT_VEC4:
                return ShaderVarType.IVEC4;
            case GL_BOOL:
            case GL_BOOL_VEC2:
            case GL_BOOL_VEC3:
            case GL_BOOL_VEC4:
                return ShaderVarType.BOOL;
            case GL_FLOAT_MAT2:
                return ShaderVarType.MAT2;
            case GL_FLOAT_MAT3:
                return ShaderVarType.MAT3;
            case GL_FLOAT_MAT4:
                return ShaderVarType.MAT4;
            case GL_SAMPLER_2D:
                return ShaderVarType.SAMPLER_2D;
            case GL_SAMPLER_CUBE:
                return ShaderVarType.SAMPLER_CUBE;
            default:
                return ShaderVarType.FLOAT;
        }
    }
}

/**
 * ShaderMaterial class for rendering with shaders
 */
class ShaderMaterial {
    property shader: Shader;
    property uniforms: Map<string, any>;
    property textures: Map<string, any>;
    
    def initialize(shader: Shader) {
        self.shader = shader;
        self.uniforms = new Map();
        self.textures = new Map();
    }
    
    /**
     * Set a uniform value
     */
    def setUniform(name: string, value: any) -> ShaderMaterial {
        self.uniforms.set(name, value);
        return self;
    }
    
    /**
     * Set a texture
     */
    def setTexture(name: string, texture: any) -> ShaderMaterial {
        self.textures.set(name, texture);
        return self;
    }
    
    /**
     * Apply the material for rendering
     */
    def apply(gl: WebGLRenderingContext) -> void {
        self.shader.use(gl);
        
        // Set uniforms
        for (let [name, value] of self.uniforms) {
            self.shader.setUniform(gl, name, value);
        }
        
        // Bind textures
        let textureUnit = 0;
        for (let [name, texture] of self.textures) {
            gl.activeTexture(gl.TEXTURE0 + textureUnit);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            self.shader.setUniform(gl, name, textureUnit);
            textureUnit++;
        }
    }
}

/**
 * Common shader library with predefined shaders
 */
class ShaderLibrary {
    /**
     * Basic vertex shader for 2D rendering
     */
    static def basicVertexShader() -> string {
        return `
            attribute vec2 aPosition;
            attribute vec2 aTexCoord;
            
            uniform mat4 uProjection;
            uniform mat4 uModel;
            
            varying vec2 vTexCoord;
            
            void main() {
                gl_Position = uProjection * uModel * vec4(aPosition, 0.0, 1.0);
                vTexCoord = aTexCoord;
            }
        `;
    }
    
    /**
     * Basic fragment shader for 2D texture rendering
     */
    static def basicFragmentShader() -> string {
        return `
            precision mediump float;
            
            varying vec2 vTexCoord;
            
            uniform sampler2D uTexture;
            uniform vec4 uColor;
            
            void main() {
                vec4 texColor = texture2D(uTexture, vTexCoord);
                gl_FragColor = texColor * uColor;
            }
        `;
    }
    
    /**
     * Colored vertex shader (no texture)
     */
    static def colorVertexShader() -> string {
        return `
            attribute vec2 aPosition;
            attribute vec4 aColor;
            
            uniform mat4 uProjection;
            uniform mat4 uModel;
            
            varying vec4 vColor;
            
            void main() {
                gl_Position = uProjection * uModel * vec4(aPosition, 0.0, 1.0);
                vColor = aColor;
            }
        `;
    }
    
    /**
     * Colored fragment shader (no texture)
     */
    static def colorFragmentShader() -> string {
        return `
            precision mediump float;
            
            varying vec4 vColor;
            
            void main() {
                gl_FragColor = vColor;
            }
        `;
    }
    
    /**
     * Vertex shader with lighting
     */
    static def lightingVertexShader() -> string {
        return `
            attribute vec3 aPosition;
            attribute vec3 aNormal;
            attribute vec2 aTexCoord;
            
            uniform mat4 uProjection;
            uniform mat4 uView;
            uniform mat4 uModel;
            uniform mat3 uNormalMatrix;
            
            varying vec3 vNormal;
            varying vec3 vFragPos;
            varying vec2 vTexCoord;
            
            void main() {
                vec4 worldPos = uModel * vec4(aPosition, 1.0);
                gl_Position = uProjection * uView * worldPos;
                vFragPos = worldPos.xyz;
                vNormal = uNormalMatrix * aNormal;
                vTexCoord = aTexCoord;
            }
        `;
    }
    
    /**
     * Fragment shader with lighting
     */
    static def lightingFragmentShader() -> string {
        return `
            precision mediump float;
            
            varying vec3 vNormal;
            varying vec3 vFragPos;
            varying vec2 vTexCoord;
            
            uniform vec3 uLightPos;
            uniform vec3 uViewPos;
            uniform vec3 uLightColor;
            uniform sampler2D uTexture;
            
            void main() {
                // Ambient
                float ambientStrength = 0.1;
                vec3 ambient = ambientStrength * uLightColor;
                
                // Diffuse
                vec3 norm = normalize(vNormal);
                vec3 lightDir = normalize(uLightPos - vFragPos);
                float diff = max(dot(norm, lightDir), 0.0);
                vec3 diffuse = diff * uLightColor;
                
                // Specular
                float specularStrength = 0.5;
                vec3 viewDir = normalize(uViewPos - vFragPos);
                vec3 reflectDir = reflect(-lightDir, norm);
                float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
                vec3 specular = specularStrength * spec * uLightColor;
                
                // Combine lighting with texture
                vec4 texColor = texture2D(uTexture, vTexCoord);
                vec3 result = (ambient + diffuse + specular) * texColor.rgb;
                gl_FragColor = vec4(result, texColor.a);
            }
        `;
    }
    
    /**
     * Post-processing vertex shader
     */
    static def postProcessVertexShader() -> string {
        return `
            attribute vec2 aPosition;
            attribute vec2 aTexCoord;
            
            varying vec2 vTexCoord;
            
            void main() {
                gl_Position = vec4(aPosition, 0.0, 1.0);
                vTexCoord = aTexCoord;
            }
        `;
    }
    
    /**
     * Grayscale post-processing effect
     */
    static def grayscaleFragmentShader() -> string {
        return `
            precision mediump float;
            
            varying vec2 vTexCoord;
            
            uniform sampler2D uTexture;
            uniform float uIntensity;
            
            void main() {
                vec4 color = texture2D(uTexture, vTexCoord);
                float gray = dot(color.rgb, vec3(0.299, 0.587, 0.114));
                vec3 grayscale = vec3(gray);
                gl_FragColor = vec4(mix(color.rgb, grayscale, uIntensity), color.a);
            }
        `;
    }
    
    /**
     * Blur post-processing effect
     */
    static def blurFragmentShader() -> string {
        return `
            precision mediump float;
            
            varying vec2 vTexCoord;
            
            uniform sampler2D uTexture;
            uniform vec2 uResolution;
            uniform float uRadius;
            
            void main() {
                vec4 color = vec4(0.0);
                float total = 0.0;
                
                for (float x = -uRadius; x <= uRadius; x += 1.0) {
                    for (float y = -uRadius; y <= uRadius; y += 1.0) {
                        vec2 offset = vec2(x, y) / uResolution;
                        color += texture2D(uTexture, vTexCoord + offset);
                        total += 1.0;
                    }
                }
                
                gl_FragColor = color / total;
            }
        `;
    }
}

/**
 * WebGL renderer for shader-based rendering
 */
class ShaderRenderer {
    property gl: WebGLRenderingContext;
    property canvas: HTMLCanvasElement;
    property width: int;
    property height: int;
    property clearColor: Vector4;
    property projectionMatrix: Matrix4;
    property viewMatrix: Matrix4;
    
    def initialize(canvas: HTMLCanvasElement, options: any = {}) {
        self.canvas = canvas;
        self.width = canvas.width;
        self.height = canvas.height;
        self.clearColor = new Vector4(0, 0, 0, 1);
        
        // Initialize WebGL context
        let contextOptions = {
            alpha: options.alpha ?? true,
            antialias: options.antialias ?? true,
            depth: options.depth ?? true,
            stencil: options.stencil ?? false,
            preserveDrawingBuffer: options.preserveDrawingBuffer ?? false
        };
        
        let gl = canvas.getContext("webgl", contextOptions) || 
                 canvas.getContext("experimental-webgl", contextOptions);
        
        if (!gl) {
            throw Error("WebGL is not supported");
        }
        
        self.gl = gl;
        
        // Initialize matrices
        self.projectionMatrix = Matrix4.orthographic(
            0, self.width, 
            self.height, 0, 
            -1000, 1000
        );
        
        self.viewMatrix = Matrix4.identity();
        
        // Set initial GL state
        gl.enable(gl.BLEND);
        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
    }
    
    /**
     * Resize the renderer
     */
    def resize(width: int, height: int) -> void {
        self.width = width;
        self.height = height;
        self.canvas.width = width;
        self.canvas.height = height;
        self.gl.viewport(0, 0, width, height);
        
        // Update projection matrix
        self.projectionMatrix = Matrix4.orthographic(
            0, width, height, 0, -1000, 1000
        );
    }
    
    /**
     * Clear the screen
     */
    def clear() -> void {
        let gl = self.gl;
        gl.clearColor(
            self.clearColor.x,
            self.clearColor.y,
            self.clearColor.z,
            self.clearColor.w
        );
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    }
    
    /**
     * Set clear color
     */
    def setClearColor(r: float, g: float, b: float, a: float = 1.0) -> void {
        self.clearColor.x = r;
        self.clearColor.y = g;
        self.clearColor.z = b;
        self.clearColor.w = a;
    }
    
    /**
     * Create a shader from source code
     */
    def createShader(vertexSource: string, fragmentSource: string) -> Shader {
        let shader = new Shader(vertexSource, fragmentSource);
        shader.compile(self.gl);
        return shader;
    }
    
    /**
     * Create a texture from an image
     */
    def createTexture(image: any) -> any {
        let gl = self.gl;
        let texture = gl.createTexture();
        
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
        
        // Set texture parameters
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        
        gl.bindTexture(gl.TEXTURE_2D, null);
        
        return texture;
    }
    
    /**
     * Create a buffer for vertex data
     */
    def createBuffer(data: ArrayBuffer) -> any {
        let gl = self.gl;
        let buffer = gl.createBuffer();
        
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        
        return buffer;
    }
    
    /**
     * Create an index buffer
     */
    def createIndexBuffer(data: Uint16Array) -> any {
        let gl = self.gl;
        let buffer = gl.createBuffer();
        
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        
        return buffer;
    }
    
    /**
     * Delete a buffer
     */
    def deleteBuffer(buffer: any) -> void {
        if (buffer) {
            self.gl.deleteBuffer(buffer);
        }
    }
    
    /**
     * Delete a texture
     */
    def deleteTexture(texture: any) -> void {
        if (texture) {
            self.gl.deleteTexture(texture);
        }
    }
}

/**
 * WebGL-based rendering context implementation
 */
class GLRenderContext implements RenderContext {
    property renderer: ShaderRenderer;
    property currentShader: Shader?;
    property currentColor: Vector4;
    property modelMatrix: Matrix4;
    property matrixStack: Array<Matrix4>;
    
    def initialize(renderer: ShaderRenderer) {
        self.renderer = renderer;
        self.currentShader = null;
        self.currentColor = new Vector4(1, 1, 1, 1);
        self.modelMatrix = Matrix4.identity();
        self.matrixStack = [];
    }
    
    def clear(color: ColorRGBA) -> void {
        self.renderer.setClearColor(color.r, color.g, color.b, color.a);
        self.renderer.clear();
    }
    
    def setFont(font: Font) -> void {
        // Not directly applicable in WebGL, would need texture-based font rendering
    }
    
    def setFillColor(color: ColorRGBA) -> void {
        self.currentColor.x = color.r;
        self.currentColor.y = color.g;
        self.currentColor.z = color.b;
        self.currentColor.w = color.a;
    }
    
    def setStrokeColor(color: ColorRGBA) -> void {
        // For WebGL, stroke and fill use the same color system
        self.setFillColor(color);
    }
    
    def setLineWidth(width: float) -> void {
        self.renderer.gl.lineWidth(width);
    }
    
    def beginPath() -> void {
        // Path building would be implemented with vertex buffers in actual use
    }
    
    def closePath() -> void {
        // Path closing would be part of the vertex buffer construction
    }
    
    def moveTo(x: float, y: float) -> void {
        // Would be part of vertex buffer construction
    }
    
    def lineTo(x: float, y: float) -> void {
        // Would be part of vertex buffer construction
    }
    
    def rect(x: float, y: float, width: float, height: float) -> void {
        // Would create a rectangle in vertex buffer
    }
    
    def roundRect(x: float, y: float, width: float, height: float, radius: float) -> void {
        // Would create a rounded rectangle in vertex buffer
    }
    
    def circle(x: float, y: float, radius: float) -> void {
        // Would create a circle in vertex buffer
    }
    
    def ellipse(x: float, y: float, radiusX: float, radiusY: float) -> void {
        // Would create an ellipse in vertex buffer
    }
    
    def arc(x: float, y: float, radius: float, startAngle: float, endAngle: float, anticlockwise: bool = false) -> void {
        // Would create an arc in vertex buffer
    }
    
    def fill() -> void {
        // Would render filled shape using the current shader
    }
    
    def stroke() -> void {
        // Would render stroked shape using the current shader
    }
    
    def fillText(text: string, x: float, y: float, maxWidth: float? = null) -> void {
        // Would render text using texture-based font rendering
    }
    
    def strokeText(text: string, x: float, y: float, maxWidth: float? = null) -> void {
        // Would render stroked text using texture-based font rendering
    }
    
    def measureText(text: string) -> {width: float, height: float} {
        // Would calculate text dimensions based on the font texture
        return {width: text.length * 10, height: 20}; // Placeholder
    }
    
    def drawImage(image: any, dx: float, dy: float, dWidth: float? = null, dHeight: float? = null) -> void {
        // Would render an image texture
    }
    
    def save() -> void {
        self.matrixStack.push(self.modelMatrix.clone());
    }
    
    def restore() -> void {
        if (self.matrixStack.length > 0) {
            self.modelMatrix = self.matrixStack.pop();
        }
    }
    
    def translate(x: float, y: float) -> void {
        self.modelMatrix = Matrix4.translate(self.modelMatrix, new Vector3(x, y, 0));
    }
    
    def rotate(angle: float) -> void {
        self.modelMatrix = Matrix4.rotate(self.modelMatrix, angle, new Vector3(0, 0, 1));
    }
    
    def scale(x: float, y: float) -> void {
        self.modelMatrix = Matrix4.scale(self.modelMatrix, new Vector3(x, y, 1));
    }
}

/**
 * Post-processing effect base class
 */
class PostEffect {
    property shader: Shader;
    property uniforms: Map<string, any>;
    
    def initialize(shader: Shader) {
        self.shader = shader;
        self.uniforms = new Map();
    }
    
    /**
     * Set a uniform value
     */
    def setUniform(name: string, value: any) -> PostEffect {
        self.uniforms.set(name, value);
        return self;
    }
    
    /**
     * Apply the effect
     */
    def apply(renderer: ShaderRenderer, inputTexture: any, outputFramebuffer: any?) -> void {
        // This would be implemented by derived classes
    }
}

/**
 * Bloom post-processing effect
 */
class BloomEffect extends PostEffect {
    property threshold: float;
    property intensity: float;
    
    def initialize(renderer: ShaderRenderer) {
        // Create bloom shaders (simplified here)
        let shader = renderer.createShader(
            ShaderLibrary.postProcessVertexShader(),
            `
                precision mediump float;
                
                varying vec2 vTexCoord;
                
                uniform sampler2D uTexture;
                uniform float uThreshold;
                uniform float uIntensity;
                
                void main() {
                    vec4 color = texture2D(uTexture, vTexCoord);
                    float brightness = dot(color.rgb, vec3(0.2126, 0.7152, 0.0722));
                    
                    if (brightness > uThreshold) {
                        gl_FragColor = color * uIntensity;
                    } else {
                        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
                    }
                }
            `
        );
        
        super.initialize(shader);
        
        self.threshold = 0.8;
        self.intensity = 1.5;
        
        // Set default uniforms
        self.setUniform("uThreshold", self.threshold);
        self.setUniform("uIntensity", self.intensity);
    }
    
    override def apply(renderer: ShaderRenderer, inputTexture: any, outputFramebuffer: any?) -> void {
        let gl = renderer.gl;
        
        // Bind output framebuffer if provided
        if (outputFramebuffer) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, outputFramebuffer);
        } else {
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        }
        
        // Use the bloom shader
        self.shader.use(gl);
        
        // Update uniforms
        for (let [name, value] of self.uniforms) {
            self.shader.setUniform(gl, name, value);
        }
        
        // Bind input texture
        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(gl.TEXTURE_2D, inputTexture);
        self.shader.setUniform(gl, "uTexture", 0);
        
        // Draw fullscreen quad
        // In a real implementation, this would use a vertex buffer for the quad
    }
}

export {
    ShaderType,
    ShaderVarType,
    ShaderUniform,
    ShaderAttribute,
    Shader,
    ShaderMaterial,
    ShaderLibrary,
    ShaderRenderer,
    GLRenderContext,
    PostEffect,
    BloomEffect
} 
