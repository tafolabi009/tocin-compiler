/**
 * Tocin Standard Library - Advanced Math Module (Statistics)
 * Provides statistical functions and probability distributions.
 */

import math.linear;

// Basic statistical functions
class Statistics {
    // Calculate mean of a data set
    static def mean(data: Array<float>) -> float {
        if (data.length == 0) {
            throw ValueError("Cannot calculate mean of empty array");
        }
        
        let sum = 0.0;
        for (let value in data) {
            sum += value;
        }
        
        return sum / data.length;
    }
    
    // Calculate median of a data set
    static def median(data: Array<float>) -> float {
        if (data.length == 0) {
            throw ValueError("Cannot calculate median of empty array");
        }
        
        // Make a copy to avoid modifying the original
        let sorted = [...data].sort((a, b) => a - b);
        
        if (sorted.length % 2 == 0) {
            let mid = sorted.length / 2;
            return (sorted[mid - 1] + sorted[mid]) / 2;
        } else {
            return sorted[math.floor(sorted.length / 2)];
        }
    }
    
    // Calculate mode of a data set
    static def mode(data: Array<float>) -> Array<float> {
        if (data.length == 0) {
            throw ValueError("Cannot calculate mode of empty array");
        }
        
        let counts = {};
        let maxCount = 0;
        
        for (let value in data) {
            let key = value.toString();
            counts[key] = (counts[key] || 0) + 1;
            if (counts[key] > maxCount) {
                maxCount = counts[key];
            }
        }
        
        let modes = [];
        for (let key in counts) {
            if (counts[key] == maxCount) {
                modes.push(float.parse(key));
            }
        }
        
        return modes;
    }
    
    // Calculate sample variance
    static def variance(data: Array<float>, population: bool = false) -> float {
        if (data.length <= 1) {
            throw ValueError("Variance requires at least two data points");
        }
        
        let mu = Statistics.mean(data);
        let sum_squared_diff = 0.0;
        
        for (let value in data) {
            sum_squared_diff += (value - mu) * (value - mu);
        }
        
        return sum_squared_diff / (data.length - (population ? 0 : 1));
    }
    
    // Calculate standard deviation
    static def std_dev(data: Array<float>, population: bool = false) -> float {
        return math.sqrt(Statistics.variance(data, population));
    }
    
    // Calculate covariance between two data sets
    static def covariance(x: Array<float>, y: Array<float>, population: bool = false) -> float {
        if (x.length != y.length) {
            throw ValueError("Data sets must have the same length");
        }
        
        if (x.length <= 1) {
            throw ValueError("Covariance requires at least two data points");
        }
        
        let mean_x = Statistics.mean(x);
        let mean_y = Statistics.mean(y);
        let sum_coproduct = 0.0;
        
        for (let i = 0; i < x.length; i++) {
            sum_coproduct += (x[i] - mean_x) * (y[i] - mean_y);
        }
        
        return sum_coproduct / (x.length - (population ? 0 : 1));
    }
    
    // Calculate correlation coefficient
    static def correlation(x: Array<float>, y: Array<float>) -> float {
        if (x.length != y.length) {
            throw ValueError("Data sets must have the same length");
        }
        
        if (x.length <= 1) {
            throw ValueError("Correlation requires at least two data points");
        }
        
        let covar = Statistics.covariance(x, y);
        let std_x = Statistics.std_dev(x);
        let std_y = Statistics.std_dev(y);
        
        if (std_x == 0 || std_y == 0) {
            throw ValueError("Correlation undefined when standard deviation is zero");
        }
        
        return covar / (std_x * std_y);
    }
    
    // Calculate percentile
    static def percentile(data: Array<float>, p: float) -> float {
        if (data.length == 0) {
            throw ValueError("Cannot calculate percentile of empty array");
        }
        
        if (p < 0 || p > 100) {
            throw ValueError("Percentile must be between 0 and 100");
        }
        
        // Make a copy to avoid modifying the original
        let sorted = [...data].sort((a, b) => a - b);
        
        if (p == 0) {
            return sorted[0];
        }
        
        if (p == 100) {
            return sorted[sorted.length - 1];
        }
        
        let index = (p / 100) * sorted.length;
        let lower = math.floor(index);
        let weight = index - lower;
        
        if (lower + 1 < sorted.length) {
            return sorted[lower] * (1 - weight) + sorted[lower + 1] * weight;
        } else {
            return sorted[lower];
        }
    }
    
    // Calculate quantiles
    static def quantiles(data: Array<float>, n: int = 4) -> Array<float> {
        let result = [];
        for (let i = 1; i < n; i++) {
            result.push(Statistics.percentile(data, (i * 100) / n));
        }
        return result;
    }
    
    // Calculate skewness
    static def skewness(data: Array<float>) -> float {
        if (data.length < 3) {
            throw ValueError("Skewness requires at least three data points");
        }
        
        let mu = Statistics.mean(data);
        let sigma = Statistics.std_dev(data, true);
        let n = data.length;
        
        let sum_cubed_diff = 0.0;
        for (let value in data) {
            sum_cubed_diff += math.pow(value - mu, 3);
        }
        
        return sum_cubed_diff / (n * math.pow(sigma, 3));
    }
    
    // Calculate kurtosis
    static def kurtosis(data: Array<float>) -> float {
        if (data.length < 4) {
            throw ValueError("Kurtosis requires at least four data points");
        }
        
        let mu = Statistics.mean(data);
        let sigma = Statistics.std_dev(data, true);
        let n = data.length;
        
        let sum_fourth_power = 0.0;
        for (let value in data) {
            sum_fourth_power += math.pow(value - mu, 4);
        }
        
        return (sum_fourth_power / (n * math.pow(sigma, 4))) - 3;
    }
}

// Linear regression
class Regression {
    // Simple linear regression
    static def linear_regression(x: Array<float>, y: Array<float>) -> {slope: float, intercept: float, r_squared: float} {
        if (x.length != y.length) {
            throw ValueError("Data sets must have the same length");
        }
        
        if (x.length < 2) {
            throw ValueError("Linear regression requires at least two data points");
        }
        
        let n = x.length;
        let mean_x = Statistics.mean(x);
        let mean_y = Statistics.mean(y);
        
        let ss_xx = 0.0;
        let ss_xy = 0.0;
        let ss_yy = 0.0;
        
        for (let i = 0; i < n; i++) {
            let dx = x[i] - mean_x;
            let dy = y[i] - mean_y;
            
            ss_xx += dx * dx;
            ss_xy += dx * dy;
            ss_yy += dy * dy;
        }
        
        let slope = ss_xy / ss_xx;
        let intercept = mean_y - slope * mean_x;
        let r_squared = (ss_xy * ss_xy) / (ss_xx * ss_yy);
        
        return {slope, intercept, r_squared};
    }
    
    // Multiple linear regression
    static def multiple_linear_regression(X: Array<Array<float>>, y: Array<float>) -> {coefficients: Array<float>, intercept: float} {
        // Check inputs
        if (X.length == 0 || y.length == 0) {
            throw ValueError("Empty input arrays");
        }
        
        let n = X.length; // Number of samples
        let p = X[0].length; // Number of features
        
        if (n != y.length) {
            throw ValueError("Number of samples in X and y must match");
        }
        
        // Convert to matrices
        let X_mat = [];
        for (let i = 0; i < n; i++) {
            let row = [1.0]; // Add intercept term
            for (let j = 0; j < p; j++) {
                row.push(X[i][j]);
            }
            X_mat.push(row);
        }
        
        let X_matrix = Matrix.from_array(X_mat);
        let y_vector = Vector.from_array(y);
        
        // Calculate (X^T X)^(-1) X^T y
        let Xt = X_matrix.transpose();
        let XtX = Xt.multiply(X_matrix);
        let XtX_inv = XtX.inverse();
        let Xty = Xt.multiply(y_vector.to_matrix());
        
        let coef_matrix = XtX_inv.multiply(Xty);
        
        // Extract results
        let intercept = coef_matrix.data[0][0];
        let coefficients = [];
        for (let i = 1; i < p + 1; i++) {
            coefficients.push(coef_matrix.data[i][0]);
        }
        
        return {coefficients, intercept};
    }
}

// Probability distributions
class Distribution {
    // Normal (Gaussian) distribution
    class Normal {
        property mean: float;
        property std_dev: float;
        
        def initialize(mean: float = 0.0, std_dev: float = 1.0) {
            if (std_dev <= 0) {
                throw ValueError("Standard deviation must be positive");
            }
            
            self.mean = mean;
            self.std_dev = std_dev;
        }
        
        // Probability density function (PDF)
        def pdf(x: float) -> float {
            let z = (x - self.mean) / self.std_dev;
            return math.exp(-0.5 * z * z) / (self.std_dev * math.sqrt(2 * math.PI));
        }
        
        // Cumulative distribution function (CDF)
        def cdf(x: float) -> float {
            let z = (x - self.mean) / self.std_dev;
            // Approximation of the error function
            let t = 1.0 / (1.0 + 0.2316419 * math.abs(z));
            let d = 0.3989423 * math.exp(-z * z / 2.0);
            let p = d * t * (0.3193815 + t * (-0.3565638 + t * (1.781478 + t * (-1.821256 + t * 1.330274))));
            
            if (z > 0) {
                return 1.0 - p;
            } else {
                return p;
            }
        }
        
        // Quantile function (inverse CDF)
        def quantile(p: float) -> float {
            if (p < 0 || p > 1) {
                throw ValueError("Probability must be between 0 and 1");
            }
            
            // Approximation of the inverse error function
            let a = [
                -3.969683028665376e+01,
                2.209460984245205e+02,
                -2.759285104469687e+02,
                1.383577518672690e+02,
                -3.066479806614716e+01,
                2.506628277459239e+00
            ];
            
            let b = [
                -5.447609879822406e+01,
                1.615858368580409e+02,
                -1.556989798598866e+02,
                6.680131188771972e+01,
                -1.328068155288572e+01
            ];
            
            let c = [
                -7.784894002430293e-03,
                -3.223964580411365e-01,
                -2.400758277161838e+00,
                -2.549732539343734e+00,
                4.374664141464968e+00,
                2.938163982698783e+00
            ];
            
            let d = [
                7.784695709041462e-03,
                3.224671290700398e-01,
                2.445134137142996e+00,
                3.754408661907416e+00
            ];
            
            let p_low = 0.02425;
            let p_high = 1.0 - p_low;
            
            let q;
            let r;
            let x;
            
            if (p < p_low) {
                // Rational approximation for lower region
                q = math.sqrt(-2.0 * math.log(p));
                x = (((((c[0] * q + c[1]) * q + c[2]) * q + c[3]) * q + c[4]) * q + c[5]) /
                    ((((d[0] * q + d[1]) * q + d[2]) * q + d[3]) * q + 1.0);
            } else if (p <= p_high) {
                // Rational approximation for central region
                q = p - 0.5;
                r = q * q;
                x = (((((a[0] * r + a[1]) * r + a[2]) * r + a[3]) * r + a[4]) * r + a[5]) * q /
                    (((((b[0] * r + b[1]) * r + b[2]) * r + b[3]) * r + b[4]) * r + 1.0);
            } else {
                // Rational approximation for upper region
                q = math.sqrt(-2.0 * math.log(1.0 - p));
                x = -(((((c[0] * q + c[1]) * q + c[2]) * q + c[3]) * q + c[4]) * q + c[5]) /
                     ((((d[0] * q + d[1]) * q + d[2]) * q + d[3]) * q + 1.0);
            }
            
            // Refining step
            let e = 0.5 * math.erfc(-x / math.sqrt(2)) - p;
            let u = e * math.sqrt(2 * math.PI) * math.exp(x * x / 2);
            x = x - u / (1 + x * u / 2);
            
            return self.mean + x * self.std_dev;
        }
        
        // Generate a random sample
        def sample() -> float {
            // Box-Muller transform
            let u1 = math.random();
            let u2 = math.random();
            
            let z = math.sqrt(-2.0 * math.log(u1)) * math.cos(2.0 * math.PI * u2);
            return self.mean + self.std_dev * z;
        }
    }
    
    // Binomial distribution
    class Binomial {
        property n: int;
        property p: float;
        
        def initialize(n: int, p: float) {
            if (n <= 0) {
                throw ValueError("Number of trials must be positive");
            }
            
            if (p < 0 || p > 1) {
                throw ValueError("Probability must be between 0 and 1");
            }
            
            self.n = n;
            self.p = p;
        }
        
        // Probability mass function (PMF)
        def pmf(k: int) -> float {
            if (k < 0 || k > self.n) {
                return 0.0;
            }
            
            let coef = Distribution.comb(self.n, k);
            return coef * math.pow(self.p, k) * math.pow(1 - self.p, self.n - k);
        }
        
        // Cumulative distribution function (CDF)
        def cdf(k: int) -> float {
            if (k < 0) {
                return 0.0;
            }
            
            if (k >= self.n) {
                return 1.0;
            }
            
            let sum = 0.0;
            for (let i = 0; i <= k; i++) {
                sum += self.pmf(i);
            }
            
            return sum;
        }
        
        // Generate a random sample
        def sample() -> int {
            let count = 0;
            for (let i = 0; i < self.n; i++) {
                if (math.random() < self.p) {
                    count++;
                }
            }
            return count;
        }
    }
    
    // Helper functions
    
    // Factorial
    static def factorial(n: int) -> float {
        if (n < 0) {
            throw ValueError("Factorial not defined for negative numbers");
        }
        
        if (n <= 1) {
            return 1;
        }
        
        let result = 1.0;
        for (let i = 2; i <= n; i++) {
            result *= i;
        }
        
        return result;
    }
    
    // Binomial coefficient (n choose k)
    static def comb(n: int, k: int) -> float {
        if (k < 0 || k > n) {
            return 0;
        }
        
        if (k == 0 || k == n) {
            return 1;
        }
        
        // Use logarithms to handle large numbers
        let result = 0;
        for (let i = 1; i <= k; i++) {
            result += math.log(n - k + i) - math.log(i);
        }
        
        return math.exp(result);
    }
} 
