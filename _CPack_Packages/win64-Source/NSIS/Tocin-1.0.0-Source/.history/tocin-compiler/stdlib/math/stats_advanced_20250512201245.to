/**
 * Tocin Standard Library - Advanced Statistics Module
 * Provides statistical distributions, hypothesis testing, and advanced analytics.
 */

import math.basic;

/**
 * Probability Distribution Base Class
 */
class Distribution {
    /**
     * Probability density function (PDF) or probability mass function (PMF)
     */
    def pdf(x: float) -> float {
        throw Error("pdf method not implemented");
    }
    
    /**
     * Cumulative distribution function (CDF)
     */
    def cdf(x: float) -> float {
        throw Error("cdf method not implemented");
    }
    
    /**
     * Inverse cumulative distribution function (Quantile function)
     */
    def quantile(p: float) -> float {
        throw Error("quantile method not implemented");
    }
    
    /**
     * Generate a random sample from the distribution
     */
    def sample() -> float {
        // Default implementation uses inverse transform sampling
        let u = Math.random();
        return self.quantile(u);
    }
    
    /**
     * Generate multiple random samples
     */
    def samples(n: int) -> Array<float> {
        let result = new Array(n);
        for (let i = 0; i < n; i++) {
            result[i] = self.sample();
        }
        return result;
    }
    
    /**
     * Calculate the mean of the distribution
     */
    def mean() -> float {
        throw Error("mean method not implemented");
    }
    
    /**
     * Calculate the variance of the distribution
     */
    def variance() -> float {
        throw Error("variance method not implemented");
    }
    
    /**
     * Calculate the standard deviation of the distribution
     */
    def standardDeviation() -> float {
        return Math.sqrt(self.variance());
    }
}

/**
 * Normal (Gaussian) Distribution
 */
class NormalDistribution extends Distribution {
    property mu: float;    // Mean
    property sigma: float; // Standard deviation
    
    def initialize(mu: float = 0.0, sigma: float = 1.0) {
        if (sigma <= 0) {
            throw Error("Standard deviation must be positive");
        }
        
        self.mu = mu;
        self.sigma = sigma;
    }
    
    override def pdf(x: float) -> float {
        let z = (x - self.mu) / self.sigma;
        return Math.exp(-0.5 * z * z) / (self.sigma * Math.sqrt(2 * Math.PI));
    }
    
    override def cdf(x: float) -> float {
        let z = (x - self.mu) / self.sigma;
        return 0.5 * (1 + math.erf(z / Math.sqrt(2)));
    }
    
    override def quantile(p: float) -> float {
        if (p < 0 || p > 1) {
            throw Error("Probability must be between 0 and 1");
        }
        
        // Approximation of the inverse error function
        function invErf(x: float) -> float {
            let a = 8 * (Math.PI - 3) / (3 * Math.PI * (4 - Math.PI));
            let y = Math.log(1 - x * x);
            let z = 2 / (Math.PI * a) + y / 2;
            return Math.sign(x) * Math.sqrt(Math.sqrt(z * z - y / a) - z);
        }
        
        return self.mu + self.sigma * Math.sqrt(2) * invErf(2 * p - 1);
    }
    
    override def sample() -> float {
        // Box-Muller transform
        let u1 = Math.random();
        let u2 = Math.random();
        
        let z = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);
        return self.mu + self.sigma * z;
    }
    
    override def mean() -> float {
        return self.mu;
    }
    
    override def variance() -> float {
        return self.sigma * self.sigma;
    }
}

/**
 * Student's t-Distribution
 */
class TDistribution extends Distribution {
    property df: float; // Degrees of freedom
    
    def initialize(df: float) {
        if (df <= 0) {
            throw Error("Degrees of freedom must be positive");
        }
        
        self.df = df;
    }
    
    override def pdf(x: float) -> float {
        let n = self.df;
        let c = math.gamma((n + 1) / 2) / (Math.sqrt(n * Math.PI) * math.gamma(n / 2));
        return c * Math.pow(1 + x * x / n, -(n + 1) / 2);
    }
    
    override def mean() -> float {
        return self.df > 1 ? 0 : null; // Undefined for df <= 1
    }
    
    override def variance() -> float {
        if (self.df <= 1) {
            return null; // Undefined
        } else if (self.df <= 2) {
            return Infinity; // Infinite variance
        } else {
            return self.df / (self.df - 2);
        }
    }
}

/**
 * Chi-Square Distribution
 */
class ChiSquareDistribution extends Distribution {
    property df: int; // Degrees of freedom
    
    def initialize(df: int) {
        if (df <= 0) {
            throw Error("Degrees of freedom must be positive");
        }
        
        self.df = df;
    }
    
    override def pdf(x: float) -> float {
        if (x <= 0) {
            return 0;
        }
        
        let k = self.df;
        let c = 1 / (Math.pow(2, k / 2) * math.gamma(k / 2));
        return c * Math.pow(x, k / 2 - 1) * Math.exp(-x / 2);
    }
    
    override def mean() -> float {
        return self.df;
    }
    
    override def variance() -> float {
        return 2 * self.df;
    }
}

/**
 * F-Distribution
 */
class FDistribution extends Distribution {
    property d1: int; // Numerator degrees of freedom
    property d2: int; // Denominator degrees of freedom
    
    def initialize(d1: int, d2: int) {
        if (d1 <= 0 || d2 <= 0) {
            throw Error("Degrees of freedom must be positive");
        }
        
        self.d1 = d1;
        self.d2 = d2;
    }
    
    override def pdf(x: float) -> float {
        if (x <= 0) {
            return 0;
        }
        
        let d1 = self.d1;
        let d2 = self.d2;
        
        let c = Math.sqrt(Math.pow(d1 * x, d1) * Math.pow(d2, d2) / 
                  Math.pow(d1 * x + d2, d1 + d2));
        let b = math.beta(d1 / 2, d2 / 2);
        
        return c / (x * b);
    }
    
    override def mean() -> float {
        return self.d2 > 2 ? self.d2 / (self.d2 - 2) : null;
    }
    
    override def variance() -> float {
        if (self.d2 <= 4) {
            return null; // Undefined or infinite
        }
        
        let d1 = self.d1;
        let d2 = self.d2;
        
        return (2 * d2 * d2 * (d1 + d2 - 2)) / 
               (d1 * (d2 - 2) * (d2 - 2) * (d2 - 4));
    }
}

/**
 * Exponential Distribution
 */
class ExponentialDistribution extends Distribution {
    property lambda: float; // Rate parameter
    
    def initialize(lambda: float) {
        if (lambda <= 0) {
            throw Error("Rate parameter must be positive");
        }
        
        self.lambda = lambda;
    }
    
    override def pdf(x: float) -> float {
        if (x < 0) {
            return 0;
        }
        
        return self.lambda * Math.exp(-self.lambda * x);
    }
    
    override def cdf(x: float) -> float {
        if (x < 0) {
            return 0;
        }
        
        return 1 - Math.exp(-self.lambda * x);
    }
    
    override def quantile(p: float) -> float {
        if (p < 0 || p > 1) {
            throw Error("Probability must be between 0 and 1");
        }
        
        return -Math.log(1 - p) / self.lambda;
    }
    
    override def mean() -> float {
        return 1 / self.lambda;
    }
    
    override def variance() -> float {
        return 1 / (self.lambda * self.lambda);
    }
}

/**
 * Hypothesis Test Result
 */
class TestResult {
    property statistic: float;     // Test statistic
    property pValue: float;        // p-value
    property rejected: bool;       // Null hypothesis rejected
    property alpha: float;         // Significance level
    property testName: string;     // Name of the test
    property confidenceInterval: Array<float>?; // Confidence interval if applicable
    
    def initialize(testName: string, statistic: float, pValue: float, alpha: float = 0.05, 
                  confidenceInterval: Array<float>? = null) {
        self.testName = testName;
        self.statistic = statistic;
        self.pValue = pValue;
        self.alpha = alpha;
        self.rejected = pValue < alpha;
        self.confidenceInterval = confidenceInterval;
    }
    
    def toString() -> string {
        let result = `${self.testName} Result:
Statistic: ${self.statistic}
p-value: ${self.pValue}
Alpha: ${self.alpha}
Null Hypothesis: ${self.rejected ? "Rejected" : "Not Rejected"}`;
        
        if (self.confidenceInterval) {
            result += `
${(1 - self.alpha) * 100}% Confidence Interval: [${self.confidenceInterval[0]}, ${self.confidenceInterval[1]}]`;
        }
        
        return result;
    }
}

/**
 * Hypothesis Testing Functions
 */
class HypothesisTests {
    /**
     * Perform a one-sample t-test
     */
    static def tTest(
        sample: Array<float>,
        mu: float = 0,
        alpha: float = 0.05,
        alternative: string = "two-sided"
    ) -> TestResult {
        let n = sample.length;
        if (n < 2) {
            throw Error("Sample size must be at least 2");
        }
        
        // Calculate sample mean and standard deviation
        let sampleMean = math.mean(sample);
        let sampleStd = math.standardDeviation(sample);
        
        // Calculate t-statistic
        let se = sampleStd / Math.sqrt(n);
        let t = (sampleMean - mu) / se;
        
        // Calculate p-value based on alternative hypothesis
        let pValue;
        let tDist = new TDistribution(n - 1);
        
        if (alternative === "two-sided") {
            pValue = 2 * (1 - tDist.cdf(Math.abs(t)));
        } else if (alternative === "greater") {
            pValue = 1 - tDist.cdf(t);
        } else if (alternative === "less") {
            pValue = tDist.cdf(t);
        } else {
            throw Error("Alternative must be 'two-sided', 'greater', or 'less'");
        }
        
        // Calculate confidence interval
        let tCritical = tDist.quantile(1 - alpha / 2);
        let margin = tCritical * se;
        let ci = [sampleMean - margin, sampleMean + margin];
        
        return new TestResult("One-sample t-test", t, pValue, alpha, ci);
    }
    
    /**
     * Perform a two-sample t-test
     */
    static def tTestTwoSample(
        sample1: Array<float>,
        sample2: Array<float>,
        alpha: float = 0.05,
        alternative: string = "two-sided",
        equalVariance: bool = false
    ) -> TestResult {
        let n1 = sample1.length;
        let n2 = sample2.length;
        
        if (n1 < 2 || n2 < 2) {
            throw Error("Both samples must have at least 2 observations");
        }
        
        // Calculate sample means and standard deviations
        let mean1 = math.mean(sample1);
        let mean2 = math.mean(sample2);
        let var1 = math.variance(sample1);
        let var2 = math.variance(sample2);
        
        let t, df, se;
        
        if (equalVariance) {
            // Pooled variance t-test
            let pooledVar = ((n1 - 1) * var1 + (n2 - 1) * var2) / (n1 + n2 - 2);
            se = Math.sqrt(pooledVar * (1/n1 + 1/n2));
            t = (mean1 - mean2) / se;
            df = n1 + n2 - 2;
        } else {
            // Welch's t-test
            se = Math.sqrt(var1/n1 + var2/n2);
            t = (mean1 - mean2) / se;
            
            // Welch-Satterthwaite equation for degrees of freedom
            let term1 = var1/n1;
            let term2 = var2/n2;
            df = Math.pow(term1 + term2, 2) / 
                 (Math.pow(term1, 2)/(n1-1) + Math.pow(term2, 2)/(n2-1));
        }
        
        // Calculate p-value
        let tDist = new TDistribution(df);
        let pValue;
        
        if (alternative === "two-sided") {
            pValue = 2 * (1 - tDist.cdf(Math.abs(t)));
        } else if (alternative === "greater") {
            pValue = 1 - tDist.cdf(t);
        } else if (alternative === "less") {
            pValue = tDist.cdf(t);
        } else {
            throw Error("Alternative must be 'two-sided', 'greater', or 'less'");
        }
        
        // Calculate confidence interval
        let tCritical = tDist.quantile(1 - alpha / 2);
        let margin = tCritical * se;
        let ci = [(mean1 - mean2) - margin, (mean1 - mean2) + margin];
        
        let testName = equalVariance ? "Two-sample t-test (equal variance)" : 
                                       "Welch's t-test (unequal variance)";
        
        return new TestResult(testName, t, pValue, alpha, ci);
    }
    
    /**
     * Perform a paired t-test
     */
    static def tTestPaired(
        sample1: Array<float>,
        sample2: Array<float>,
        alpha: float = 0.05,
        alternative: string = "two-sided"
    ) -> TestResult {
        let n = sample1.length;
        
        if (n !== sample2.length) {
            throw Error("Samples must have the same length for paired test");
        }
        
        if (n < 2) {
            throw Error("Samples must have at least 2 observations");
        }
        
        // Calculate differences
        let differences = new Array(n);
        for (let i = 0; i < n; i++) {
            differences[i] = sample1[i] - sample2[i];
        }
        
        // Perform one-sample t-test on differences
        return HypothesisTests.tTest(differences, 0, alpha, alternative);
    }
    
    /**
     * Perform a chi-square test for variance
     */
    static def chiSquareVarianceTest(
        sample: Array<float>,
        variance: float,
        alpha: float = 0.05,
        alternative: string = "two-sided"
    ) -> TestResult {
        let n = sample.length;
        
        if (n < 2) {
            throw Error("Sample must have at least 2 observations");
        }
        
        if (variance <= 0) {
            throw Error("Variance must be positive");
        }
        
        // Calculate sample variance
        let sampleVar = math.variance(sample);
        
        // Calculate chi-square statistic
        let chiSq = (n - 1) * sampleVar / variance;
        
        // Calculate p-value
        let chiDist = new ChiSquareDistribution(n - 1);
        let pValue;
        
        if (alternative === "two-sided") {
            pValue = 2 * Math.min(chiDist.cdf(chiSq), 1 - chiDist.cdf(chiSq));
        } else if (alternative === "greater") {
            pValue = 1 - chiDist.cdf(chiSq);
        } else if (alternative === "less") {
            pValue = chiDist.cdf(chiSq);
        } else {
            throw Error("Alternative must be 'two-sided', 'greater', or 'less'");
        }
        
        // Calculate confidence interval for variance
        let chiLower = chiDist.quantile(alpha / 2);
        let chiUpper = chiDist.quantile(1 - alpha / 2);
        
        let ci = [
            (n - 1) * sampleVar / chiUpper,
            (n - 1) * sampleVar / chiLower
        ];
        
        return new TestResult("Chi-square test for variance", chiSq, pValue, alpha, ci);
    }
    
    /**
     * Perform an F-test for equality of variances
     */
    static def fTest(
        sample1: Array<float>,
        sample2: Array<float>,
        alpha: float = 0.05,
        alternative: string = "two-sided"
    ) -> TestResult {
        let n1 = sample1.length;
        let n2 = sample2.length;
        
        if (n1 < 2 || n2 < 2) {
            throw Error("Both samples must have at least 2 observations");
        }
        
        // Calculate sample variances
        let var1 = math.variance(sample1);
        let var2 = math.variance(sample2);
        
        // Ensure F > 1 by convention
        let F, df1, df2;
        
        if (var1 >= var2) {
            F = var1 / var2;
            df1 = n1 - 1;
            df2 = n2 - 1;
        } else {
            F = var2 / var1;
            df1 = n2 - 1;
            df2 = n1 - 1;
            if (alternative === "greater") {
                alternative = "less";
            } else if (alternative === "less") {
                alternative = "greater";
            }
        }
        
        // Calculate p-value
        let fDist = new FDistribution(df1, df2);
        let pValue;
        
        if (alternative === "two-sided") {
            pValue = 2 * (1 - fDist.cdf(F));
        } else if (alternative === "greater") {
            pValue = 1 - fDist.cdf(F);
        } else if (alternative === "less") {
            pValue = fDist.cdf(F);
        } else {
            throw Error("Alternative must be 'two-sided', 'greater', or 'less'");
        }
        
        // Calculate confidence interval for ratio of variances
        let fLower = fDist.quantile(alpha / 2);
        let fUpper = fDist.quantile(1 - alpha / 2);
        
        let ci = [F / fUpper, F / fLower];
        
        return new TestResult("F-test for equality of variances", F, pValue, alpha, ci);
    }
    
    /**
     * Perform a z-test for a proportion
     */
    static def proportionTest(
        successes: int,
        trials: int,
        p0: float = 0.5,
        alpha: float = 0.05,
        alternative: string = "two-sided"
    ) -> TestResult {
        if (trials <= 0) {
            throw Error("Number of trials must be positive");
        }
        
        if (successes < 0 || successes > trials) {
            throw Error("Number of successes must be between 0 and the number of trials");
        }
        
        if (p0 <= 0 || p0 >= 1) {
            throw Error("Null proportion must be between 0 and 1");
        }
        
        // Calculate sample proportion
        let pHat = successes / trials;
        
        // Calculate standard error
        let se = Math.sqrt(p0 * (1 - p0) / trials);
        
        // Calculate z-statistic
        let z = (pHat - p0) / se;
        
        // Calculate p-value
        let normal = new NormalDistribution(0, 1);
        let pValue;
        
        if (alternative === "two-sided") {
            pValue = 2 * (1 - normal.cdf(Math.abs(z)));
        } else if (alternative === "greater") {
            pValue = 1 - normal.cdf(z);
        } else if (alternative === "less") {
            pValue = normal.cdf(z);
        } else {
            throw Error("Alternative must be 'two-sided', 'greater', or 'less'");
        }
        
        // Calculate confidence interval using Wilson score interval
        let zCritical = normal.quantile(1 - alpha / 2);
        let denominator = 1 + zCritical * zCritical / trials;
        let center = (pHat + zCritical * zCritical / (2 * trials)) / denominator;
        let halfWidth = zCritical * Math.sqrt(pHat * (1 - pHat) / trials + zCritical * zCritical / (4 * trials * trials)) / denominator;
        
        let ci = [Math.max(0, center - halfWidth), Math.min(1, center + halfWidth)];
        
        return new TestResult("Z-test for a proportion", z, pValue, alpha, ci);
    }
}

export {
    Distribution,
    NormalDistribution,
    TDistribution,
    ChiSquareDistribution,
    FDistribution,
    ExponentialDistribution,
    TestResult,
    HypothesisTests
} 
