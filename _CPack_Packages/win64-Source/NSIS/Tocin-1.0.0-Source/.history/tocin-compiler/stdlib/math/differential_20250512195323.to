/**
 * Tocin Standard Library - Differential Equations Module
 * Provides algorithms and utilities for solving differential equations.
 */

import math.basic;
import math.linear;

/**
 * Types of ordinary differential equations
 */
enum ODEType {
    FIRST_ORDER,  // dy/dx = f(x, y)
    SECOND_ORDER, // d²y/dx² = f(x, y, dy/dx)
    SYSTEM        // System of first-order ODEs
}

/**
 * Numerical methods for solving ODEs
 */
enum NumericalMethod {
    EULER,
    MIDPOINT,
    RK4,           // 4th order Runge-Kutta
    ADAMS_BASHFORTH
}

/**
 * Result of an ODE solution
 */
class ODESolution {
    property x: Array<float>;      // Independent variable values
    property y: Array<Array<float>>;  // Dependent variable values (can be multiple for systems)
    property method: NumericalMethod;  // Method used to generate solution
    property error: float;         // Estimated error (if available)
    
    def initialize(x: Array<float>, y: Array<Array<float>>, method: NumericalMethod, error: float = 0.0) {
        self.x = x;
        self.y = y;
        self.method = method;
        self.error = error;
    }
    
    /**
     * Interpolate the solution at a specific x value
     */
    def interpolateAt(x: float) -> Array<float> {
        // Find the nearest points
        let i = 0;
        while (i < self.x.length && self.x[i] < x) {
            i++;
        }
        
        if (i == 0) {
            return self.y[0].slice();
        }
        
        if (i >= self.x.length) {
            return self.y[self.y.length - 1].slice();
        }
        
        // Linear interpolation between points
        let x0 = self.x[i - 1];
        let x1 = self.x[i];
        let t = (x - x0) / (x1 - x0);
        
        let result = [];
        for (let j = 0; j < self.y[0].length; j++) {
            let y0 = self.y[i - 1][j];
            let y1 = self.y[i][j];
            result.push(y0 + t * (y1 - y0));
        }
        
        return result;
    }
}

/**
 * Solves a first-order ODE using Euler's method
 * dy/dx = f(x, y)
 */
def eulerMethod(f: fn(x: float, y: float) -> float, 
               x0: float, y0: float, 
               xEnd: float, stepSize: float) -> ODESolution {
    // Validate inputs
    if (stepSize <= 0) {
        throw Error("Step size must be positive");
    }
    
    // Initialize arrays
    let n = math.ceil((xEnd - x0) / stepSize);
    let xValues = [x0];
    let yValues = [[y0]];
    
    // Current values
    let x = x0;
    let y = y0;
    
    // Step through the solution
    for (let i = 0; i < n; i++) {
        // Calculate derivative
        let dy = f(x, y);
        
        // Update values using Euler's method
        x += stepSize;
        y += stepSize * dy;
        
        // Store values
        xValues.push(x);
        yValues.push([y]);
    }
    
    return new ODESolution(xValues, yValues, NumericalMethod.EULER);
}

/**
 * Solves a first-order ODE using the midpoint method (2nd order Runge-Kutta)
 * dy/dx = f(x, y)
 */
def midpointMethod(f: fn(x: float, y: float) -> float, 
                  x0: float, y0: float, 
                  xEnd: float, stepSize: float) -> ODESolution {
    // Validate inputs
    if (stepSize <= 0) {
        throw Error("Step size must be positive");
    }
    
    // Initialize arrays
    let n = math.ceil((xEnd - x0) / stepSize);
    let xValues = [x0];
    let yValues = [[y0]];
    
    // Current values
    let x = x0;
    let y = y0;
    
    // Step through the solution
    for (let i = 0; i < n; i++) {
        // Calculate k1 (slope at the beginning of the interval)
        let k1 = f(x, y);
        
        // Calculate k2 (slope at the midpoint)
        let xMid = x + stepSize / 2;
        let yMid = y + stepSize * k1 / 2;
        let k2 = f(xMid, yMid);
        
        // Update values using midpoint method
        x += stepSize;
        y += stepSize * k2;
        
        // Store values
        xValues.push(x);
        yValues.push([y]);
    }
    
    return new ODESolution(xValues, yValues, NumericalMethod.MIDPOINT);
}

/**
 * Solves a first-order ODE using the 4th order Runge-Kutta method
 * dy/dx = f(x, y)
 */
def rungeKutta4(f: fn(x: float, y: float) -> float, 
               x0: float, y0: float, 
               xEnd: float, stepSize: float) -> ODESolution {
    // Validate inputs
    if (stepSize <= 0) {
        throw Error("Step size must be positive");
    }
    
    // Initialize arrays
    let n = math.ceil((xEnd - x0) / stepSize);
    let xValues = [x0];
    let yValues = [[y0]];
    
    // Current values
    let x = x0;
    let y = y0;
    
    // Step through the solution
    for (let i = 0; i < n; i++) {
        // Calculate k1 (slope at the beginning of the interval)
        let k1 = f(x, y);
        
        // Calculate k2 (slope at the midpoint using k1)
        let xMid1 = x + stepSize / 2;
        let yMid1 = y + stepSize * k1 / 2;
        let k2 = f(xMid1, yMid1);
        
        // Calculate k3 (slope at the midpoint using k2)
        let xMid2 = x + stepSize / 2;
        let yMid2 = y + stepSize * k2 / 2;
        let k3 = f(xMid2, yMid2);
        
        // Calculate k4 (slope at the end using k3)
        let xEnd = x + stepSize;
        let yEnd = y + stepSize * k3;
        let k4 = f(xEnd, yEnd);
        
        // Update values using 4th order Runge-Kutta
        x += stepSize;
        y += stepSize * (k1 + 2*k2 + 2*k3 + k4) / 6;
        
        // Store values
        xValues.push(x);
        yValues.push([y]);
    }
    
    return new ODESolution(xValues, yValues, NumericalMethod.RK4);
}

/**
 * Solves a system of first-order ODEs using the 4th order Runge-Kutta method
 * dY/dx = F(x, Y) where Y and F are vectors
 */
def solveSystemRK4(f: fn(x: float, y: Array<float>) -> Array<float>, 
                  x0: float, y0: Array<float>, 
                  xEnd: float, stepSize: float) -> ODESolution {
    // Validate inputs
    if (stepSize <= 0) {
        throw Error("Step size must be positive");
    }
    
    // Initialize arrays
    let n = math.ceil((xEnd - x0) / stepSize);
    let xValues = [x0];
    let yValues = [y0.slice()];
    
    // Current values
    let x = x0;
    let y = y0.slice();
    
    // Step through the solution
    for (let i = 0; i < n; i++) {
        // Calculate k1 (slopes at the beginning of the interval)
        let k1 = f(x, y);
        
        // Calculate k2 (slopes at the midpoint using k1)
        let xMid1 = x + stepSize / 2;
        let yMid1 = [];
        for (let j = 0; j < y.length; j++) {
            yMid1.push(y[j] + stepSize * k1[j] / 2);
        }
        let k2 = f(xMid1, yMid1);
        
        // Calculate k3 (slopes at the midpoint using k2)
        let xMid2 = x + stepSize / 2;
        let yMid2 = [];
        for (let j = 0; j < y.length; j++) {
            yMid2.push(y[j] + stepSize * k2[j] / 2);
        }
        let k3 = f(xMid2, yMid2);
        
        // Calculate k4 (slopes at the end using k3)
        let xEnd = x + stepSize;
        let yEnd = [];
        for (let j = 0; j < y.length; j++) {
            yEnd.push(y[j] + stepSize * k3[j]);
        }
        let k4 = f(xEnd, yEnd);
        
        // Update values using 4th order Runge-Kutta
        x += stepSize;
        for (let j = 0; j < y.length; j++) {
            y[j] += stepSize * (k1[j] + 2*k2[j] + 2*k3[j] + k4[j]) / 6;
        }
        
        // Store values
        xValues.push(x);
        yValues.push(y.slice());
    }
    
    return new ODESolution(xValues, yValues, NumericalMethod.RK4);
}

/**
 * Solves a second-order ODE by converting to a system of first-order ODEs
 * d²y/dx² = f(x, y, dy/dx)
 */
def solveSecondOrderODE(f: fn(x: float, y: float, dyDx: float) -> float,
                       x0: float, y0: float, dyDx0: float,
                       xEnd: float, stepSize: float) -> ODESolution {
    // Convert to a system of first-order ODEs
    // Let y1 = y and y2 = dy/dx
    // Then dy1/dx = y2 and dy2/dx = f(x, y1, y2)
    
    function systemFunction(x: float, y: Array<float>) -> Array<float> {
        let y1 = y[0]; // y
        let y2 = y[1]; // dy/dx
        
        return [
            y2,               // dy1/dx = y2
            f(x, y1, y2)      // dy2/dx = f(x, y1, y2)
        ];
    }
    
    // Solve the system
    let solution = solveSystemRK4(systemFunction, x0, [y0, dyDx0], xEnd, stepSize);
    
    // The solution contains both y and dy/dx
    return solution;
}

/**
 * Adaptive step size control using the Runge-Kutta-Fehlberg method (RKF45)
 * dy/dx = f(x, y)
 */
def adaptiveRK45(f: fn(x: float, y: float) -> float,
                x0: float, y0: float,
                xEnd: float,
                relTol: float = 1e-6, 
                absTol: float = 1e-6,
                initialStepSize: float = 0.1,
                maxStepSize: float = 1.0) -> ODESolution {
    // Butcher tableau coefficients for RKF45
    let a2 = 1/4, a3 = 3/8, a4 = 12/13, a5 = 1, a6 = 1/2;
    let b21 = 1/4;
    let b31 = 3/32, b32 = 9/32;
    let b41 = 1932/2197, b42 = -7200/2197, b43 = 7296/2197;
    let b51 = 439/216, b52 = -8, b53 = 3680/513, b54 = -845/4104;
    let b61 = -8/27, b62 = 2, b63 = -3544/2565, b64 = 1859/4104, b65 = -11/40;
    
    // 4th order coefficients
    let c41 = 25/216, c43 = 1408/2565, c44 = 2197/4104, c45 = -1/5;
    
    // 5th order coefficients
    let c51 = 16/135, c53 = 6656/12825, c54 = 28561/56430, c55 = -9/50, c56 = 2/55;
    
    // Initialize arrays
    let xValues = [x0];
    let yValues = [[y0]];
    
    // Current values
    let x = x0;
    let y = y0;
    let h = initialStepSize;
    let totalError = 0.0;
    
    while (x < xEnd) {
        // Ensure we don't go beyond xEnd
        if (x + h > xEnd) {
            h = xEnd - x;
        }
        
        // Calculate k values
        let k1 = f(x, y);
        let k2 = f(x + a2*h, y + h*b21*k1);
        let k3 = f(x + a3*h, y + h*(b31*k1 + b32*k2));
        let k4 = f(x + a4*h, y + h*(b41*k1 + b42*k2 + b43*k3));
        let k5 = f(x + a5*h, y + h*(b51*k1 + b52*k2 + b53*k3 + b54*k4));
        let k6 = f(x + a6*h, y + h*(b61*k1 + b62*k2 + b63*k3 + b64*k4 + b65*k5));
        
        // Calculate 4th order solution
        let y4 = y + h*(c41*k1 + c43*k3 + c44*k4 + c45*k5);
        
        // Calculate 5th order solution
        let y5 = y + h*(c51*k1 + c53*k3 + c54*k4 + c55*k5 + c56*k6);
        
        // Calculate error
        let error = math.abs(y5 - y4);
        
        // Calculate scale (combining relative and absolute tolerance)
        let scale = absTol + relTol * math.max(math.abs(y), math.abs(y5));
        
        // Check if error is acceptable
        if (error <= scale) {
            // Accept this step
            x += h;
            y = y5; // Use the more accurate solution
            
            // Store values
            xValues.push(x);
            yValues.push([y]);
            
            // Accumulate error estimate
            totalError += error;
        }
        
        // Calculate new step size using error control formula
        let factor = 0.84 * math.pow(scale / (error + 1e-15), 0.2);
        
        // Limit change in step size
        factor = math.clamp(factor, 0.1, 4.0);
        
        // Update step size
        h *= factor;
        
        // Enforce maximum step size
        h = math.min(h, maxStepSize);
    }
    
    return new ODESolution(xValues, yValues, NumericalMethod.RK4, totalError);
}

/**
 * Boundary Value Problem (BVP) solver using the shooting method
 * y'' = f(x, y, y') with boundary conditions y(a) = alpha and y(b) = beta
 */
def shootingMethod(f: fn(x: float, y: float, dyDx: float) -> float,
                  a: float, alpha: float,
                  b: float, beta: float,
                  guess1: float, guess2: float,
                  stepSize: float,
                  tolerance: float = 1e-6,
                  maxIterations: int = 20) -> ODESolution {
    
    // Function to determine the error in the boundary condition at x = b
    function solveToBoundary(initialSlope: float) -> {error: float, solution: ODESolution} {
        let solution = solveSecondOrderODE(f, a, alpha, initialSlope, b, stepSize);
        let yb = solution.y[solution.y.length - 1][0]; // value at x = b
        return {
            error: yb - beta,
            solution: solution
        };
    }
    
    // Initialize
    let slope1 = guess1;
    let slope2 = guess2;
    let result1 = solveToBoundary(slope1);
    let result2 = solveToBoundary(slope2);
    
    // Iterate using secant method
    for (let i = 0; i < maxIterations; i++) {
        // Check if we're close enough
        if (math.abs(result2.error) < tolerance) {
            return result2.solution;
        }
        
        // Calculate next guess
        let denominator = result2.error - result1.error;
        if (math.abs(denominator) < 1e-10) {
            // Avoid division by near zero
            slope1 = slope2 + 0.1 * (1.0 + math.abs(slope2));
        } else {
            let slope = slope2 - result2.error * (slope2 - slope1) / denominator;
            slope1 = slope2;
            slope2 = slope;
        }
        
        // Solve with new guess
        result1 = result2;
        result2 = solveToBoundary(slope2);
    }
    
    // If we get here, we didn't converge in maxIterations
    console.warn("Shooting method didn't converge to the specified tolerance.");
    return result2.solution;
}

/**
 * Partial Differential Equation (PDE) types
 */
enum PDEType {
    PARABOLIC,   // Heat equation: ∂u/∂t = α∇²u
    HYPERBOLIC,  // Wave equation: ∂²u/∂t² = c²∇²u
    ELLIPTIC     // Laplace/Poisson equation: ∇²u = f
}

/**
 * Solve 1D heat equation using explicit finite difference method
 * ∂u/∂t = α∂²u/∂x²
 */
def solve1DHeatEquation(
    alpha: float,                       // Thermal diffusivity
    length: float,                      // Domain length
    timeEnd: float,                     // End time
    numX: int,                          // Number of spatial points
    numT: int,                          // Number of time points
    initialCondition: fn(x: float) -> float,  // Initial temperature distribution
    boundaryCondition: {
        left: fn(t: float) -> float,     // Left boundary condition (x = 0)
        right: fn(t: float) -> float     // Right boundary condition (x = L)
    }
) -> {
    x: Array<float>,                    // Spatial grid
    t: Array<float>,                    // Time grid
    u: Array<Array<float>>              // Solution u(x,t)
} {
    // Check stability condition
    let dx = length / (numX - 1);
    let dt = timeEnd / (numT - 1);
    let r = alpha * dt / (dx * dx);
    
    if (r > 0.5) {
        console.warn(`Stability condition violated: r = ${r} > 0.5. Results may be inaccurate.`);
    }
    
    // Initialize grids
    let x = [];
    for (let i = 0; i < numX; i++) {
        x.push(i * dx);
    }
    
    let t = [];
    for (let j = 0; j < numT; j++) {
        t.push(j * dt);
    }
    
    // Initialize solution with initial condition
    let u = [];
    let uCurrent = [];
    
    for (let i = 0; i < numX; i++) {
        uCurrent.push(initialCondition(x[i]));
    }
    
    u.push(uCurrent.slice());
    
    // Time stepping using explicit scheme
    for (let j = 1; j < numT; j++) {
        let uNext = [];
        let time = t[j];
        
        // Set boundary conditions
        uNext.push(boundaryCondition.left(time));
        
        // Interior points
        for (let i = 1; i < numX - 1; i++) {
            uNext.push(uCurrent[i] + r * (uCurrent[i+1] - 2*uCurrent[i] + uCurrent[i-1]));
        }
        
        // Set right boundary condition
        uNext.push(boundaryCondition.right(time));
        
        // Store solution
        u.push(uNext.slice());
        uCurrent = uNext;
    }
    
    return {x, t, u};
}

/**
 * Solve 2D Laplace equation using finite difference method
 * ∇²u = ∂²u/∂x² + ∂²u/∂y² = 0
 */
def solve2DLaplaceEquation(
    width: float,                      // Domain width
    height: float,                     // Domain height
    numX: int,                         // Number of points in x direction
    numY: int,                         // Number of points in y direction
    boundaryCondition: fn(x: float, y: float, edge: string) -> float,  // Boundary value
    tolerance: float = 1e-6,           // Convergence tolerance
    maxIterations: int = 1000          // Maximum number of iterations
) -> {
    x: Array<float>,                   // x grid
    y: Array<float>,                   // y grid
    u: Array<Array<float>>             // Solution u(x,y)
} {
    let dx = width / (numX - 1);
    let dy = height / (numY - 1);
    
    // Initialize grids
    let x = [];
    for (let i = 0; i < numX; i++) {
        x.push(i * dx);
    }
    
    let y = [];
    for (let j = 0; j < numY; j++) {
        y.push(j * dy);
    }
    
    // Initialize solution with boundary conditions
    let u = [];
    for (let j = 0; j < numY; j++) {
        let row = [];
        for (let i = 0; i < numX; i++) {
            // Default interior points to 0
            let value = 0;
            
            // Set boundary values
            if (i == 0) {
                // Left edge
                value = boundaryCondition(x[i], y[j], "left");
            } else if (i == numX - 1) {
                // Right edge
                value = boundaryCondition(x[i], y[j], "right");
            } else if (j == 0) {
                // Bottom edge
                value = boundaryCondition(x[i], y[j], "bottom");
            } else if (j == numY - 1) {
                // Top edge
                value = boundaryCondition(x[i], y[j], "top");
            }
            
            row.push(value);
        }
        u.push(row);
    }
    
    // Iterative solution using Gauss-Seidel method
    let error = 1.0;
    let iteration = 0;
    
    while (error > tolerance && iteration < maxIterations) {
        error = 0;
        
        // Update interior points
        for (let j = 1; j < numY - 1; j++) {
            for (let i = 1; i < numX - 1; i++) {
                let uOld = u[j][i];
                
                // Gauss-Seidel update
                u[j][i] = 0.25 * (u[j][i+1] + u[j][i-1] + u[j+1][i] + u[j-1][i]);
                
                // Update error
                error = math.max(error, math.abs(u[j][i] - uOld));
            }
        }
        
        iteration++;
    }
    
    if (iteration >= maxIterations) {
        console.warn(`Laplace solver did not converge to tolerance ${tolerance}`);
    }
    
    return {x, y, u};
}

export {
    ODEType,
    NumericalMethod,
    ODESolution,
    eulerMethod,
    midpointMethod,
    rungeKutta4,
    solveSystemRK4,
    solveSecondOrderODE,
    adaptiveRK45,
    shootingMethod,
    PDEType,
    solve1DHeatEquation,
    solve2DLaplaceEquation
} 
