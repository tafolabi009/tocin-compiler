/**
 * Tocin Standard Library - Differential Equations Module
 * Provides algorithms and utilities for solving differential equations.
 */

import math.basic;
import math.linear;

/**
 * Types of ordinary differential equations
 */
enum ODEType {
    FIRST_ORDER,  // dy/dx = f(x, y)
    SECOND_ORDER, // d²y/dx² = f(x, y, dy/dx)
    SYSTEM        // System of first-order ODEs
}

/**
 * Numerical methods for solving ODEs
 */
enum NumericalMethod {
    EULER,
    MIDPOINT,
    RK4,           // 4th order Runge-Kutta
    ADAMS_BASHFORTH
}

/**
 * Result of an ODE solution
 */
class ODESolution {
    property x: Array<float>;      // Independent variable values
    property y: Array<Array<float>>;  // Dependent variable values (can be multiple for systems)
    property method: NumericalMethod;
    property stepCount: int;
    property error: float?;
    
    def initialize(x: Array<float>, y: Array<Array<float>>, method: NumericalMethod) {
        self.x = x;
        self.y = y;
        self.method = method;
        self.stepCount = x.length;
        self.error = null;
    }
    
    /**
     * Interpolate the solution at a specific point
     */
    def interpolate(xValue: float) -> Array<float> {
        // Find the two points that bracket xValue
        let i = 0;
        while (i < self.x.length - 1 && self.x[i + 1] < xValue) {
            i++;
        }
        
        // If xValue is outside the range, return the boundary value
        if (i >= self.x.length - 1) {
            return self.y[self.y.length - 1];
        }
        
        if (i < 0 || xValue <= self.x[0]) {
            return self.y[0];
        }
        
        // Linear interpolation
        let x0 = self.x[i];
        let x1 = self.x[i + 1];
        let t = (xValue - x0) / (x1 - x0);
        
        let result = [];
        for (let j = 0; j < self.y[0].length; j++) {
            let y0 = self.y[i][j];
            let y1 = self.y[i + 1][j];
            result.push(y0 + t * (y1 - y0));
        }
        
        return result;
    }
}

/**
 * ODE Solver class for numerically solving ordinary differential equations
 */
class ODESolver {
    /**
     * Solve a first-order ODE: dy/dx = f(x, y)
     */
    static def solveFirstOrder(
        f: fn(x: float, y: float) -> float,
        x0: float,
        y0: float,
        xEnd: float,
        stepSize: float,
        method: NumericalMethod = NumericalMethod.RK4
    ) -> ODESolution {
        // Convert to system form with one equation
        let system = (x: float, y: Array<float>) => [f(x, y[0])];
        let initialValues = [y0];
        
        return ODESolver.solveSystem(
            system,
            x0,
            initialValues,
            xEnd,
            stepSize,
            method
        );
    }
    
    /**
     * Solve a second-order ODE: d²y/dx² = f(x, y, dy/dx)
     * by converting to a system of first-order ODEs
     */
    static def solveSecondOrder(
        f: fn(x: float, y: float, yPrime: float) -> float,
        x0: float,
        y0: float,
        yPrime0: float,
        xEnd: float,
        stepSize: float,
        method: NumericalMethod = NumericalMethod.RK4
    ) -> ODESolution {
        // Convert to system of first-order ODEs
        // Let y[0] = y and y[1] = dy/dx
        let system = (x: float, y: Array<float>) => [
            y[1],                      // dy/dx = y'
            f(x, y[0], y[1])           // d²y/dx² = f(x, y, y')
        ];
        
        let initialValues = [y0, yPrime0];
        
        return ODESolver.solveSystem(
            system,
            x0,
            initialValues,
            xEnd,
            stepSize,
            method
        );
    }
    
    /**
     * Solve a system of first-order ODEs: dy/dx = f(x, y)
     * where y and f are vectors
     */
    static def solveSystem(
        f: fn(x: float, y: Array<float>) -> Array<float>,
        x0: float,
        y0: Array<float>,
        xEnd: float,
        stepSize: float,
        method: NumericalMethod = NumericalMethod.RK4
    ) -> ODESolution {
        // Ensure step size is positive
        let h = Math.abs(stepSize);
        let sign = xEnd >= x0 ? 1 : -1;
        h *= sign;
        
        // Initialize arrays for the solution
        let n = Math.ceil(Math.abs(xEnd - x0) / Math.abs(h)) + 1;
        let x = new Array(n);
        let y = new Array(n);
        
        // Set initial values
        x[0] = x0;
        y[0] = [...y0]; // Copy the initial values
        
        // Choose the appropriate numerical method
        let stepFunction;
        
        switch (method) {
            case NumericalMethod.EULER:
                stepFunction = ODESolver._eulerStep;
                break;
            case NumericalMethod.MIDPOINT:
                stepFunction = ODESolver._midpointStep;
                break;
            case NumericalMethod.RK4:
                stepFunction = ODESolver._rk4Step;
                break;
            case NumericalMethod.ADAMS_BASHFORTH:
                // For Adams-Bashforth, we need to initialize with RK4 first
                // Since it's a multi-step method
                stepFunction = ODESolver._adamsBashforthStep;
                // Store the previous derivatives (needed for Adams-Bashforth)
                let prevDerivatives = [f(x[0], y[0])];
                
                // Initialize the first few steps with RK4
                for (let i = 1; i < Math.min(4, n); i++) {
                    x[i] = x[i - 1] + h;
                    y[i] = ODESolver._rk4Step(f, x[i - 1], y[i - 1], h);
                    prevDerivatives.push(f(x[i], y[i]));
                }
                
                // Continue with Adams-Bashforth
                for (let i = 4; i < n; i++) {
                    x[i] = x[i - 1] + h;
                    y[i] = ODESolver._adamsBashforthStep(
                        f, x[i - 1], y[i - 1], h, prevDerivatives
                    );
                    prevDerivatives.shift(); // Remove oldest
                    prevDerivatives.push(f(x[i], y[i])); // Add newest
                }
                
                return new ODESolution(x, y, method);
            default:
                throw new Error("Unsupported numerical method");
        }
        
        // Solve using the selected method
        for (let i = 1; i < n; i++) {
            x[i] = x[i - 1] + h;
            y[i] = stepFunction(f, x[i - 1], y[i - 1], h);
            
            // Check if we've reached or passed the end point
            if ((sign > 0 && x[i] >= xEnd) || (sign < 0 && x[i] <= xEnd)) {
                x[i] = xEnd; // Ensure the last point is exactly xEnd
                
                // Recalculate the last step with adjusted step size
                let lastH = xEnd - x[i - 1];
                y[i] = stepFunction(f, x[i - 1], y[i - 1], lastH);
                
                // Truncate the arrays to the actual number of points
                x = x.slice(0, i + 1);
                y = y.slice(0, i + 1);
                break;
            }
        }
        
        return new ODESolution(x, y, method);
    }
    
    /**
     * Euler method step
     */
    private static def _eulerStep(
        f: fn(x: float, y: Array<float>) -> Array<float>,
        x: float,
        y: Array<float>,
        h: float
    ) -> Array<float> {
        let k1 = f(x, y);
        let result = new Array(y.length);
        
        for (let i = 0; i < y.length; i++) {
            result[i] = y[i] + h * k1[i];
        }
        
        return result;
    }
    
    /**
     * Midpoint method step
     */
    private static def _midpointStep(
        f: fn(x: float, y: Array<float>) -> Array<float>,
        x: float,
        y: Array<float>,
        h: float
    ) -> Array<float> {
        let k1 = f(x, y);
        let yMid = new Array(y.length);
        
        for (let i = 0; i < y.length; i++) {
            yMid[i] = y[i] + (h / 2) * k1[i];
        }
        
        let k2 = f(x + h / 2, yMid);
        let result = new Array(y.length);
        
        for (let i = 0; i < y.length; i++) {
            result[i] = y[i] + h * k2[i];
        }
        
        return result;
    }
    
    /**
     * 4th order Runge-Kutta method step
     */
    private static def _rk4Step(
        f: fn(x: float, y: Array<float>) -> Array<float>,
        x: float,
        y: Array<float>,
        h: float
    ) -> Array<float> {
        let k1 = f(x, y);
        
        let yTemp = new Array(y.length);
        for (let i = 0; i < y.length; i++) {
            yTemp[i] = y[i] + (h / 2) * k1[i];
        }
        let k2 = f(x + h / 2, yTemp);
        
        for (let i = 0; i < y.length; i++) {
            yTemp[i] = y[i] + (h / 2) * k2[i];
        }
        let k3 = f(x + h / 2, yTemp);
        
        for (let i = 0; i < y.length; i++) {
            yTemp[i] = y[i] + h * k3[i];
        }
        let k4 = f(x + h, yTemp);
        
        let result = new Array(y.length);
        for (let i = 0; i < y.length; i++) {
            result[i] = y[i] + (h / 6) * (k1[i] + 2 * k2[i] + 2 * k3[i] + k4[i]);
        }
        
        return result;
    }
    
    /**
     * Adams-Bashforth 4-step method step
     */
    private static def _adamsBashforthStep(
        f: fn(x: float, y: Array<float>) -> Array<float>,
        x: float,
        y: Array<float>,
        h: float,
        prevDerivatives: Array<Array<float>>
    ) -> Array<float> {
        let result = new Array(y.length);
        
        // 4-step Adams-Bashforth coefficients
        let c0 = 55 / 24;
        let c1 = -59 / 24;
        let c2 = 37 / 24;
        let c3 = -9 / 24;
        
        for (let i = 0; i < y.length; i++) {
            result[i] = y[i] + h * (
                c0 * prevDerivatives[3][i] +
                c1 * prevDerivatives[2][i] +
                c2 * prevDerivatives[1][i] +
                c3 * prevDerivatives[0][i]
            );
        }
        
        return result;
    }
}

/**
 * Boundary Value Problem (BVP) Solver
 * For problems like y'' = f(x, y, y') with boundary conditions
 */
class BVPSolver {
    /**
     * Solve a second-order BVP using the shooting method
     * y'' = f(x, y, y')
     * with boundary conditions y(a) = alpha, y(b) = beta
     */
    static def shootingMethod(
        f: fn(x: float, y: float, yPrime: float) -> float,
        a: float,
        b: float,
        alpha: float,
        beta: float,
        stepSize: float,
        tolerance: float = 1e-6,
        maxIterations: int = 100
    ) -> ODESolution {
        // Initial guesses for y'(a)
        let slope1 = 0.0;
        let slope2 = 1.0;
        
        // Solve with first guess
        let solution1 = ODESolver.solveSecondOrder(
            f, a, alpha, slope1, b, stepSize, NumericalMethod.RK4
        );
        
        let endValue1 = solution1.y[solution1.y.length - 1][0];
        let error1 = endValue1 - beta;
        
        if (Math.abs(error1) < tolerance) {
            return solution1;
        }
        
        // Solve with second guess
        let solution2 = ODESolver.solveSecondOrder(
            f, a, alpha, slope2, b, stepSize, NumericalMethod.RK4
        );
        
        let endValue2 = solution2.y[solution2.y.length - 1][0];
        let error2 = endValue2 - beta;
        
        if (Math.abs(error2) < tolerance) {
            return solution2;
        }
        
        // Iterative improvement using secant method
        let slope = slope1;
        let solution = solution1;
        
        for (let i = 0; i < maxIterations; i++) {
            // Secant method to find better slope
            slope = slope2 - error2 * (slope2 - slope1) / (error2 - error1);
            
            // Solve with new slope
            solution = ODESolver.solveSecondOrder(
                f, a, alpha, slope, b, stepSize, NumericalMethod.RK4
            );
            
            let endValue = solution.y[solution.y.length - 1][0];
            let error = endValue - beta;
            
            // Check convergence
            if (Math.abs(error) < tolerance) {
                solution.error = error;
                return solution;
            }
            
            // Update for next iteration
            slope1 = slope2;
            error1 = error2;
            slope2 = slope;
            error2 = error;
        }
        
        // Return best solution even if tolerance not met
        solution.error = error2;
        return solution;
    }
    
    /**
     * Solve a second-order BVP using the finite difference method
     */
    static def finiteDifferenceMethod(
        f: fn(x: float, y: float, yPrime: float) -> float,
        a: float,
        b: float,
        alpha: float,
        beta: float,
        numPoints: int
    ) -> ODESolution {
        // Step size
        let h = (b - a) / (numPoints - 1);
        
        // Initialize the mesh points
        let x = new Array(numPoints);
        for (let i = 0; i < numPoints; i++) {
            x[i] = a + i * h;
        }
        
        // Initialize the coefficient matrix A and right-hand side b
        // We will solve Ay = b for the interior points
        let n = numPoints - 2; // number of interior points
        let A = new Array(n);
        let rhs = new Array(n);
        
        for (let i = 0; i < n; i++) {
            A[i] = new Array(n).fill(0);
            rhs[i] = 0;
        }
        
        // Set up the linear system using finite difference approximation
        // y''(x) ≈ (y(x+h) - 2y(x) + y(x-h)) / h²
        for (let i = 0; i < n; i++) {
            let xi = x[i + 1]; // Interior point x[i+1]
            
            // Main diagonal: -2/h²
            A[i][i] = -2 / (h * h);
            
            // Set lower diagonal: 1/h²
            if (i > 0) {
                A[i][i - 1] = 1 / (h * h);
            }
            
            // Set upper diagonal: 1/h²
            if (i < n - 1) {
                A[i][i + 1] = 1 / (h * h);
            }
            
            // Set right-hand side
            // For first interior point, account for boundary condition y(a) = alpha
            if (i === 0) {
                rhs[i] = f(xi, 0, 0) - alpha / (h * h); // will be updated in iterations
            } 
            // For last interior point, account for boundary condition y(b) = beta
            else if (i === n - 1) {
                rhs[i] = f(xi, 0, 0) - beta / (h * h); // will be updated in iterations
            } 
            else {
                rhs[i] = f(xi, 0, 0); // will be updated in iterations
            }
        }
        
        // Initial guess for solution
        let y = new Array(numPoints);
        y[0] = alpha;
        y[numPoints - 1] = beta;
        
        // Linear interpolation for initial interior points
        for (let i = 1; i < numPoints - 1; i++) {
            y[i] = alpha + (beta - alpha) * (x[i] - a) / (b - a);
        }
        
        // Iterative solution (linearize and solve repeatedly)
        let maxIterations = 100;
        let tolerance = 1e-6;
        
        for (let iter = 0; iter < maxIterations; iter++) {
            // Update right-hand side with current approximation
            for (let i = 0; i < n; i++) {
                let xi = x[i + 1];
                let yi = y[i + 1];
                
                // Approximate y' using central difference
                let yPrime = i > 0 && i < n - 1 ? 
                    (y[i + 2] - y[i]) / (2 * h) : 
                    (y[i + 2] - y[i]) / (2 * h);
                
                // Set right-hand side, including boundary conditions
                if (i === 0) {
                    rhs[i] = f(xi, yi, yPrime) - alpha / (h * h);
                } else if (i === n - 1) {
                    rhs[i] = f(xi, yi, yPrime) - beta / (h * h);
                } else {
                    rhs[i] = f(xi, yi, yPrime);
                }
            }
            
            // Solve the linear system Ay = rhs
            let solution = linear.solveLinearSystem(A, rhs);
            
            // Copy solution to interior points
            let maxDiff = 0;
            for (let i = 0; i < n; i++) {
                let diff = Math.abs(solution[i] - y[i + 1]);
                maxDiff = Math.max(maxDiff, diff);
                y[i + 1] = solution[i];
            }
            
            // Check for convergence
            if (maxDiff < tolerance) {
                break;
            }
        }
        
        // Format the solution as ODESolution
        let result = new Array(numPoints);
        for (let i = 0; i < numPoints; i++) {
            result[i] = [y[i]];
        }
        
        return new ODESolution(x, result, NumericalMethod.RK4);
    }
}

/**
 * Partial Differential Equation Solver
 */
class PDESolver {
    /**
     * Solve a 1D heat equation using explicit finite difference method
     * u_t = alpha * u_xx
     */
    static def solveHeatEquation(
        initialCondition: fn(x: float) -> float,
        leftBoundary: fn(t: float) -> float,
        rightBoundary: fn(t: float) -> float,
        xMin: float,
        xMax: float,
        tMax: float,
        alpha: float,
        numX: int,
        numT: int
    ) -> {
        x: Array<float>,
        t: Array<float>,
        u: Array<Array<float>>
    } {
        // Grid spacing
        let dx = (xMax - xMin) / (numX - 1);
        let dt = tMax / (numT - 1);
        
        // Check stability condition for explicit method
        let r = alpha * dt / (dx * dx);
        if (r > 0.5) {
            console.warn("Warning: Stability condition not satisfied. " +
                         "Reduce dt or increase dx for stability.");
        }
        
        // Initialize grid
        let x = new Array(numX);
        let t = new Array(numT);
        let u = new Array(numT);
        
        for (let i = 0; i < numX; i++) {
            x[i] = xMin + i * dx;
        }
        
        for (let j = 0; j < numT; j++) {
            t[j] = j * dt;
            u[j] = new Array(numX);
        }
        
        // Set initial condition
        for (let i = 0; i < numX; i++) {
            u[0][i] = initialCondition(x[i]);
        }
        
        // Time stepping
        for (let j = 0; j < numT - 1; j++) {
            // Set boundary conditions
            u[j + 1][0] = leftBoundary(t[j + 1]);
            u[j + 1][numX - 1] = rightBoundary(t[j + 1]);
            
            // Update interior points
            for (let i = 1; i < numX - 1; i++) {
                u[j + 1][i] = u[j][i] + 
                    r * (u[j][i + 1] - 2 * u[j][i] + u[j][i - 1]);
            }
        }
        
        return { x, t, u };
    }
    
    /**
     * Solve a 1D wave equation using explicit finite difference method
     * u_tt = c^2 * u_xx
     */
    static def solveWaveEquation(
        initialPosition: fn(x: float) -> float,
        initialVelocity: fn(x: float) -> float,
        leftBoundary: fn(t: float) -> float,
        rightBoundary: fn(t: float) -> float,
        xMin: float,
        xMax: float,
        tMax: float,
        c: float,
        numX: int,
        numT: int
    ) -> {
        x: Array<float>,
        t: Array<float>,
        u: Array<Array<float>>
    } {
        // Grid spacing
        let dx = (xMax - xMin) / (numX - 1);
        let dt = tMax / (numT - 1);
        
        // Check stability condition (CFL)
        let cfl = c * dt / dx;
        if (cfl > 1) {
            console.warn("Warning: CFL condition not satisfied. " +
                         "Reduce dt or increase dx for stability.");
        }
        
        // Initialize grid
        let x = new Array(numX);
        let t = new Array(numT);
        let u = new Array(numT);
        
        for (let i = 0; i < numX; i++) {
            x[i] = xMin + i * dx;
        }
        
        for (let j = 0; j < numT; j++) {
            t[j] = j * dt;
            u[j] = new Array(numX);
        }
        
        // Set initial position
        for (let i = 0; i < numX; i++) {
            u[0][i] = initialPosition(x[i]);
        }
        
        // Set boundary conditions for first time step
        u[0][0] = leftBoundary(t[0]);
        u[0][numX - 1] = rightBoundary(t[0]);
        
        // Compute second time step using initial velocity
        for (let i = 1; i < numX - 1; i++) {
            u[1][i] = u[0][i] + dt * initialVelocity(x[i]) + 
                      0.5 * c * c * (dt * dt / (dx * dx)) * 
                      (u[0][i + 1] - 2 * u[0][i] + u[0][i - 1]);
        }
        
        // Set boundary conditions for second time step
        u[1][0] = leftBoundary(t[1]);
        u[1][numX - 1] = rightBoundary(t[1]);
        
        // Time stepping using central difference
        let r = c * c * dt * dt / (dx * dx);
        
        for (let j = 1; j < numT - 1; j++) {
            // Set boundary conditions
            u[j + 1][0] = leftBoundary(t[j + 1]);
            u[j + 1][numX - 1] = rightBoundary(t[j + 1]);
            
            // Update interior points
            for (let i = 1; i < numX - 1; i++) {
                u[j + 1][i] = 2 * u[j][i] - u[j - 1][i] + 
                               r * (u[j][i + 1] - 2 * u[j][i] + u[j][i - 1]);
            }
        }
        
        return { x, t, u };
    }
    
    /**
     * Solve a 2D Laplace equation using Jacobi iteration
     * u_xx + u_yy = 0
     */
    static def solveLaplace(
        boundaryCondition: fn(x: float, y: float) -> float,
        xMin: float,
        xMax: float,
        yMin: float,
        yMax: float,
        numX: int,
        numY: int,
        tolerance: float = 1e-6,
        maxIterations: int = 1000
    ) -> {
        x: Array<float>,
        y: Array<float>,
        u: Array<Array<float>>
    } {
        // Grid spacing
        let dx = (xMax - xMin) / (numX - 1);
        let dy = (yMax - yMin) / (numY - 1);
        
        // Initialize grid
        let x = new Array(numX);
        let y = new Array(numY);
        let u = new Array(numX);
        let uNew = new Array(numX);
        
        for (let i = 0; i < numX; i++) {
            x[i] = xMin + i * dx;
            u[i] = new Array(numY).fill(0);
            uNew[i] = new Array(numY).fill(0);
        }
        
        for (let j = 0; j < numY; j++) {
            y[j] = yMin + j * dy;
        }
        
        // Set boundary conditions
        for (let i = 0; i < numX; i++) {
            u[i][0] = boundaryCondition(x[i], y[0]);
            u[i][numY - 1] = boundaryCondition(x[i], y[numY - 1]);
            uNew[i][0] = u[i][0];
            uNew[i][numY - 1] = u[i][numY - 1];
        }
        
        for (let j = 0; j < numY; j++) {
            u[0][j] = boundaryCondition(x[0], y[j]);
            u[numX - 1][j] = boundaryCondition(x[numX - 1], y[j]);
            uNew[0][j] = u[0][j];
            uNew[numX - 1][j] = u[numX - 1][j];
        }
        
        // Iterative solution
        let error = 1.0;
        let iter = 0;
        
        while (error > tolerance && iter < maxIterations) {
            error = 0;
            
            // Update interior points
            for (let i = 1; i < numX - 1; i++) {
                for (let j = 1; j < numY - 1; j++) {
                    uNew[i][j] = 0.25 * (u[i + 1][j] + u[i - 1][j] + 
                                         u[i][j + 1] + u[i][j - 1]);
                    
                    let diff = Math.abs(uNew[i][j] - u[i][j]);
                    error = Math.max(error, diff);
                }
            }
            
            // Copy new solution to u
            for (let i = 1; i < numX - 1; i++) {
                for (let j = 1; j < numY - 1; j++) {
                    u[i][j] = uNew[i][j];
                }
            }
            
            iter++;
        }
        
        if (iter >= maxIterations) {
            console.warn("Warning: Maximum iterations reached without convergence.");
        }
        
        return { x, y, u };
    }
}

export {
    ODEType,
    NumericalMethod,
    ODESolution,
    ODESolver,
    BVPSolver,
    PDESolver
} 
