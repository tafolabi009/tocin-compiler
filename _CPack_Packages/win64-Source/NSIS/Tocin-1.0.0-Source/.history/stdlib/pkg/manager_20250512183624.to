/**
 * Package Manager Module for Tocin
 * Provides functionality for dependency management, package installation, and version resolution
 */

module pkg.manager {
    import fs;
    import web.http;
    
    // Version class for semantic versioning
    export class Version {
        major: int;
        minor: int;
        patch: int;
        prerelease: string = "";
        build: string = "";
        
        constructor(version: string) {
            // Parse version string (e.g., "1.2.3-beta.1+build.123")
            let parts = version.split("+");
            let versionPart = parts[0];
            
            if parts.length > 1 {
                this.build = parts[1];
            }
            
            let versionParts = versionPart.split("-");
            let numericPart = versionParts[0];
            
            if versionParts.length > 1 {
                this.prerelease = versionParts[1];
            }
            
            let numericComponents = numericPart.split(".");
            
            if numericComponents.length >= 1 {
                this.major = parseInt(numericComponents[0]);
            } else {
                this.major = 0;
            }
            
            if numericComponents.length >= 2 {
                this.minor = parseInt(numericComponents[1]);
            } else {
                this.minor = 0;
            }
            
            if numericComponents.length >= 3 {
                this.patch = parseInt(numericComponents[2]);
            } else {
                this.patch = 0;
            }
        }
        
        // Convert version to string
        def toString() -> string {
            let result = f"{this.major}.{this.minor}.{this.patch}";
            
            if this.prerelease != "" {
                result += "-" + this.prerelease;
            }
            
            if this.build != "" {
                result += "+" + this.build;
            }
            
            return result;
        }
        
        // Compare versions
        def compare(other: Version) -> int {
            // Compare major version
            if this.major != other.major {
                return this.major - other.major;
            }
            
            // Compare minor version
            if this.minor != other.minor {
                return this.minor - other.minor;
            }
            
            // Compare patch version
            if this.patch != other.patch {
                return this.patch - other.patch;
            }
            
            // Compare prerelease (no prerelease > prerelease)
            if this.prerelease == "" && other.prerelease != "" {
                return 1;
            }
            
            if this.prerelease != "" && other.prerelease == "" {
                return -1;
            }
            
            if this.prerelease != other.prerelease {
                // Lexicographic comparison of prerelease strings
                return this.prerelease < other.prerelease ? -1 : 1;
            }
            
            return 0;
        }
        
        // Overloaded operators
        def ==(other: Version) -> bool {
            return this.compare(other) == 0;
        }
        
        def !=(other: Version) -> bool {
            return this.compare(other) != 0;
        }
        
        def <(other: Version) -> bool {
            return this.compare(other) < 0;
        }
        
        def <=(other: Version) -> bool {
            return this.compare(other) <= 0;
        }
        
        def >(other: Version) -> bool {
            return this.compare(other) > 0;
        }
        
        def >=(other: Version) -> bool {
            return this.compare(other) >= 0;
        }
    }
    
    // Version range for dependency constraints
    export class VersionRange {
        private ranges: list<tuple<string, Version>>;
        
        constructor(rangeStr: string) {
            this.ranges = [];
            
            // Parse version range string
            // Examples: ">=1.0.0", ">=1.0.0 <2.0.0", "^1.2.3", "~2.3.4"
            let parts = rangeStr.trim().split(" ");
            
            for part in parts {
                if part == "" {
                    continue;
                }
                
                if part.startsWith("^") {
                    // Caret range: compatible with version
                    // ^1.2.3 := >=1.2.3 <2.0.0
                    let version = new Version(part.substring(1));
                    this.ranges.push((">=", version));
                    
                    let upperBound = new Version(f"{version.major + 1}.0.0");
                    this.ranges.push(("<", upperBound));
                }
                else if part.startsWith("~") {
                    // Tilde range: patch-level changes allowed
                    // ~1.2.3 := >=1.2.3 <1.3.0
                    let version = new Version(part.substring(1));
                    this.ranges.push((">=", version));
                    
                    let upperBound = new Version(f"{version.major}.{version.minor + 1}.0");
                    this.ranges.push(("<", upperBound));
                }
                else if part.startsWith(">=") {
                    let version = new Version(part.substring(2));
                    this.ranges.push((">=", version));
                }
                else if part.startsWith(">") {
                    let version = new Version(part.substring(1));
                    this.ranges.push((">", version));
                }
                else if part.startsWith("<=") {
                    let version = new Version(part.substring(2));
                    this.ranges.push(("<=", version));
                }
                else if part.startsWith("<") {
                    let version = new Version(part.substring(1));
                    this.ranges.push(("<", version));
                }
                else if part.startsWith("=") {
                    let version = new Version(part.substring(1));
                    this.ranges.push(("=", version));
                }
                else {
                    // Exact version match
                    let version = new Version(part);
                    this.ranges.push(("=", version));
                }
            }
        }
        
        // Check if a version satisfies this range
        def satisfies(version: Version) -> bool {
            if this.ranges.length() == 0 {
                return true;
            }
            
            for op, rangeVersion in this.ranges {
                if op == "=" && !(version == rangeVersion) {
                    return false;
                }
                else if op == ">" && !(version > rangeVersion) {
                    return false;
                }
                else if op == ">=" && !(version >= rangeVersion) {
                    return false;
                }
                else if op == "<" && !(version < rangeVersion) {
                    return false;
                }
                else if op == "<=" && !(version <= rangeVersion) {
                    return false;
                }
            }
            
            return true;
        }
        
        // Convert range to string
        def toString() -> string {
            let parts = [];
            
            for op, version in this.ranges {
                parts.push(op + version.toString());
            }
            
            return parts.join(" ");
        }
    }
    
    // Dependency class
    export class Dependency {
        name: string;
        range: VersionRange;
        
        constructor(name: string, versionRange: string) {
            this.name = name;
            this.range = new VersionRange(versionRange);
        }
        
        def toString() -> string {
            return f"{this.name} {this.range.toString()}";
        }
    }
    
    // Package class
    export class Package {
        name: string;
        version: Version;
        description: string = "";
        author: string = "";
        license: string = "";
        dependencies: list<Dependency> = [];
        devDependencies: list<Dependency> = [];
        main: string = "";
        repository: string = "";
        
        constructor(name: string, version: string) {
            this.name = name;
            this.version = new Version(version);
        }
        
        // Parse package from JSON
        static def fromJSON(json: string) -> Package {
            @extern("json", "parse")
            def _json_parse(json: string) -> dict<string, any>;
            
            let data = _json_parse(json);
            
            if !("name" in data) || !("version" in data) {
                throw "Invalid package.json: missing name or version";
            }
            
            let pkg = new Package(data["name"] as string, data["version"] as string);
            
            if "description" in data {
                pkg.description = data["description"] as string;
            }
            
            if "author" in data {
                pkg.author = data["author"] as string;
            }
            
            if "license" in data {
                pkg.license = data["license"] as string;
            }
            
            if "main" in data {
                pkg.main = data["main"] as string;
            }
            
            if "repository" in data {
                pkg.repository = data["repository"] as string;
            }
            
            if "dependencies" in data {
                let deps = data["dependencies"] as dict<string, string>;
                for name, range in deps {
                    pkg.dependencies.push(new Dependency(name, range));
                }
            }
            
            if "devDependencies" in data {
                let devDeps = data["devDependencies"] as dict<string, string>;
                for name, range in devDeps {
                    pkg.devDependencies.push(new Dependency(name, range));
                }
            }
            
            return pkg;
        }
        
        // Convert package to JSON
        def toJSON() -> string {
            @extern("json", "stringify")
            def _json_stringify(obj: any) -> string;
            
            let data = new dict<string, any>();
            
            data["name"] = this.name;
            data["version"] = this.version.toString();
            
            if this.description != "" {
                data["description"] = this.description;
            }
            
            if this.author != "" {
                data["author"] = this.author;
            }
            
            if this.license != "" {
                data["license"] = this.license;
            }
            
            if this.main != "" {
                data["main"] = this.main;
            }
            
            if this.repository != "" {
                data["repository"] = this.repository;
            }
            
            if this.dependencies.length() > 0 {
                let deps = new dict<string, string>();
                for dep in this.dependencies {
                    deps[dep.name] = dep.range.toString();
                }
                data["dependencies"] = deps;
            }
            
            if this.devDependencies.length() > 0 {
                let devDeps = new dict<string, string>();
                for dep in this.devDependencies {
                    devDeps[dep.name] = dep.range.toString();
                }
                data["devDependencies"] = devDeps;
            }
            
            return _json_stringify(data);
        }
    }
    
    // Repository configuration
    export class RepositoryConfig {
        name: string;
        url: string;
        
        constructor(name: string, url: string) {
            this.name = name;
            this.url = url;
        }
    }
    
    // Package manager class
    export class PackageManager {
        private repositories: list<RepositoryConfig> = [];
        private cacheDir: string;
        
        constructor(cacheDir: string = "") {
            if cacheDir == "" {
                // Default to home directory
                @extern("os", "homedir")
                def _get_home_dir() -> string;
                
                let home = _get_home_dir();
                this.cacheDir = fs.path.join(home, ".tocin", "cache");
            } else {
                this.cacheDir = cacheDir;
            }
            
            // Create cache directory if it doesn't exist
            if !fs.exists(this.cacheDir) {
                fs.dir.createAll(this.cacheDir);
            }
            
            // Add default repository
            this.addRepository("default", "https://registry.tocin.io");
        }
        
        // Add a package repository
        def addRepository(name: string, url: string) {
            this.repositories.push(new RepositoryConfig(name, url));
        }
        
        // Install a package
        def install(packageName: string, versionRange: string = "latest", dev: bool = false) -> bool {
            // Check for latest version
            let version = versionRange;
            
            if version == "latest" {
                version = this.getLatestVersion(packageName);
                if version == "" {
                    return false;
                }
            }
            
            // Download and install the package
            let packageDir = this.downloadPackage(packageName, version);
            if packageDir == "" {
                return false;
            }
            
            // Update the current project's package.json
            let currentPackage = this.loadCurrentPackage();
            if currentPackage != nil {
                if dev {
                    currentPackage.devDependencies.push(new Dependency(packageName, version));
                } else {
                    currentPackage.dependencies.push(new Dependency(packageName, version));
                }
                
                fs.writeFile("package.json", currentPackage.toJSON());
            }
            
            return true;
        }
        
        // Uninstall a package
        def uninstall(packageName: string) -> bool {
            // Remove from package.json
            let currentPackage = this.loadCurrentPackage();
            if currentPackage == nil {
                return false;
            }
            
            // Filter out the package from dependencies and devDependencies
            let newDeps = [];
            for dep in currentPackage.dependencies {
                if dep.name != packageName {
                    newDeps.push(dep);
                }
            }
            currentPackage.dependencies = newDeps;
            
            let newDevDeps = [];
            for dep in currentPackage.devDependencies {
                if dep.name != packageName {
                    newDevDeps.push(dep);
                }
            }
            currentPackage.devDependencies = newDevDeps;
            
            // Save updated package.json
            fs.writeFile("package.json", currentPackage.toJSON());
            
            return true;
        }
        
        // Update packages to their latest versions
        def update() -> bool {
            let currentPackage = this.loadCurrentPackage();
            if currentPackage == nil {
                return false;
            }
            
            // Update regular dependencies
            for dep in currentPackage.dependencies {
                let latestVersion = this.getLatestCompatibleVersion(dep.name, dep.range.toString());
                if latestVersion != "" {
                    this.install(dep.name, latestVersion);
                }
            }
            
            // Update dev dependencies
            for dep in currentPackage.devDependencies {
                let latestVersion = this.getLatestCompatibleVersion(dep.name, dep.range.toString());
                if latestVersion != "" {
                    this.install(dep.name, latestVersion, true);
                }
            }
            
            return true;
        }
        
        // List installed packages
        def list() -> list<tuple<string, string, bool>> {
            let result = [];
            let currentPackage = this.loadCurrentPackage();
            
            if currentPackage == nil {
                return result;
            }
            
            // Add regular dependencies
            for dep in currentPackage.dependencies {
                result.push((dep.name, dep.range.toString(), false));
            }
            
            // Add dev dependencies
            for dep in currentPackage.devDependencies {
                result.push((dep.name, dep.range.toString(), true));
            }
            
            return result;
        }
        
        // Initialize a new package
        def init(name: string, version: string = "0.1.0") -> bool {
            if fs.exists("package.json") {
                throw "package.json already exists";
            }
            
            let pkg = new Package(name, version);
            fs.writeFile("package.json", pkg.toJSON());
            
            return true;
        }
        
        // Get the latest version of a package
        private def getLatestVersion(packageName: string) -> string {
            for repo in this.repositories {
                let url = repo.url + "/packages/" + packageName + "/latest";
                
                try {
                    let response = web.http.get(url);
                    
                    if response.isOk() {
                        let data = response.json<dict<string, any>>();
                        
                        if "version" in data {
                            return data["version"] as string;
                        }
                    }
                } catch (e) {
                    // Continue to next repository
                }
            }
            
            return "";
        }
        
        // Get the latest compatible version of a package
        private def getLatestCompatibleVersion(packageName: string, versionRange: string) -> string {
            let range = new VersionRange(versionRange);
            
            for repo in this.repositories {
                let url = repo.url + "/packages/" + packageName + "/versions";
                
                try {
                    let response = web.http.get(url);
                    
                    if response.isOk() {
                        let data = response.json<dict<string, any>>();
                        
                        if "versions" in data {
                            let versions = data["versions"] as list<string>;
                            let maxVersion = "";
                            let maxVersionObj = nil;
                            
                            for v in versions {
                                let vObj = new Version(v);
                                
                                if range.satisfies(vObj) {
                                    if maxVersionObj == nil || vObj > maxVersionObj {
                                        maxVersion = v;
                                        maxVersionObj = vObj;
                                    }
                                }
                            }
                            
                            return maxVersion;
                        }
                    }
                } catch (e) {
                    // Continue to next repository
                }
            }
            
            return "";
        }
        
        // Download a package from a repository
        private def downloadPackage(packageName: string, version: string) -> string {
            let cacheDir = fs.path.join(this.cacheDir, packageName, version);
            
            // Check if package is already cached
            if fs.exists(cacheDir) {
                return cacheDir;
            }
            
            // Create cache directory
            fs.dir.createAll(cacheDir);
            
            // Download the package
            for repo in this.repositories {
                let url = repo.url + "/packages/" + packageName + "/" + version + ".tar.gz";
                
                try {
                    let response = web.http.get(url);
                    
                    if response.isOk() {
                        // Save the package to the cache
                        let tarballPath = fs.path.join(cacheDir, packageName + "-" + version + ".tar.gz");
                        fs.writeFile(tarballPath, response.body);
                        
                        // Extract the package
                        @extern("os", "extract_tarball")
                        def _extract_tarball(tarballPath: string, extractDir: string) -> bool;
                        
                        _extract_tarball(tarballPath, cacheDir);
                        
                        return cacheDir;
                    }
                } catch (e) {
                    // Continue to next repository
                }
            }
            
            // Failed to download package
            fs.dir.removeAll(cacheDir);
            return "";
        }
        
        // Load the current package.json if it exists
        private def loadCurrentPackage() -> Package? {
            if !fs.exists("package.json") {
                return nil;
            }
            
            let json = fs.readFile("package.json");
            return Package.fromJSON(json);
        }
    }
    
    // Global package manager instance
    private let _defaultManager = new PackageManager();
    
    // Global functions that use the default package manager
    
    // Install a package
    export def install(packageName: string, versionRange: string = "latest", dev: bool = false) -> bool {
        return _defaultManager.install(packageName, versionRange, dev);
    }
    
    // Uninstall a package
    export def uninstall(packageName: string) -> bool {
        return _defaultManager.uninstall(packageName);
    }
    
    // Update packages
    export def update() -> bool {
        return _defaultManager.update();
    }
    
    // List installed packages
    export def list() -> list<tuple<string, string, bool>> {
        return _defaultManager.list();
    }
    
    // Initialize a new package
    export def init(name: string, version: string = "0.1.0") -> bool {
        return _defaultManager.init(name, version);
    }
} 
