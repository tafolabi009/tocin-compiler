/**
 * Tocin Standard Library - Web Module (HTTP)
 * Provides HTTP client and server functionality.
 */

import net.socket;
import net.tls;

/**
 * HTTP Request class
 */
class Request {
    property method: string;
    property url: string;
    property headers: Map<string, string>;
    property body: string?;
    property query: Map<string, string>;
    property params: Map<string, string>;
    
    def initialize(method: string, url: string, headers: Map<string, string>? = null, body: string? = null) {
        self.method = method.toUpperCase();
        self.url = url;
        self.headers = headers ?? {};
        self.body = body;
        self.query = {};
        self.params = {};
        
        // Parse query parameters from URL
        let queryIndex = url.indexOf("?");
        if (queryIndex >= 0) {
            let queryString = url.substring(queryIndex + 1);
            self.url = url.substring(0, queryIndex);
            
            let pairs = queryString.split("&");
            for (let pair in pairs) {
                let [key, value] = pair.split("=");
                if (key && value) {
                    self.query[decodeURIComponent(key)] = decodeURIComponent(value);
                }
            }
        }
    }
    
    static def fromString(rawRequest: string) -> Request {
        let lines = rawRequest.split("\r\n");
        if (lines.length < 1) {
            throw ValueError("Invalid HTTP request: empty request");
        }
        
        // Parse request line
        let [method, path, _] = lines[0].split(" ");
        
        // Parse headers
        let headers = {};
        let bodyStart = 0;
        
        for (let i = 1; i < lines.length; i++) {
            if (lines[i] == "") {
                bodyStart = i + 1;
                break;
            }
            
            let colonIndex = lines[i].indexOf(":");
            if (colonIndex >= 0) {
                let name = lines[i].substring(0, colonIndex).trim();
                let value = lines[i].substring(colonIndex + 1).trim();
                headers[name] = value;
            }
        }
        
        // Parse body
        let body = null;
        if (bodyStart > 0 && bodyStart < lines.length) {
            body = lines.slice(bodyStart).join("\r\n");
        }
        
        return Request(method, path, headers, body);
    }
    
    def toString() -> string {
        let result = self.method + " " + self.url + " HTTP/1.1\r\n";
        
        for (let name in self.headers) {
            result += name + ": " + self.headers[name] + "\r\n";
        }
        
        result += "\r\n";
        
        if (self.body != null) {
            result += self.body;
        }
        
        return result;
    }
}

/**
 * HTTP Response class
 */
class Response {
    property statusCode: int;
    property statusMessage: string;
    property headers: Map<string, string>;
    property body: string?;
    
    def initialize(statusCode: int = 200, statusMessage: string? = null, headers: Map<string, string>? = null, body: string? = null) {
        self.statusCode = statusCode;
        self.statusMessage = statusMessage ?? getStatusMessage(statusCode);
        self.headers = headers ?? {};
        self.body = body;
        
        // Set content length if body is provided
        if (self.body != null && !self.headers["Content-Length"]) {
            self.headers["Content-Length"] = self.body.length.toString();
        }
    }
    
    static def fromString(rawResponse: string) -> Response {
        let lines = rawResponse.split("\r\n");
        if (lines.length < 1) {
            throw ValueError("Invalid HTTP response: empty response");
        }
        
        // Parse status line
        let statusLine = lines[0];
        let match = statusLine.match(/HTTP\/\d\.\d (\d+) (.*)/);
        if (!match) {
            throw ValueError("Invalid HTTP response: invalid status line");
        }
        
        let statusCode = int.parse(match[1]);
        let statusMessage = match[2];
        
        // Parse headers
        let headers = {};
        let bodyStart = 0;
        
        for (let i = 1; i < lines.length; i++) {
            if (lines[i] == "") {
                bodyStart = i + 1;
                break;
            }
            
            let colonIndex = lines[i].indexOf(":");
            if (colonIndex >= 0) {
                let name = lines[i].substring(0, colonIndex).trim();
                let value = lines[i].substring(colonIndex + 1).trim();
                headers[name] = value;
            }
        }
        
        // Parse body
        let body = null;
        if (bodyStart > 0 && bodyStart < lines.length) {
            body = lines.slice(bodyStart).join("\r\n");
        }
        
        return Response(statusCode, statusMessage, headers, body);
    }
    
    def toString() -> string {
        let result = "HTTP/1.1 " + self.statusCode.toString() + " " + self.statusMessage + "\r\n";
        
        for (let name in self.headers) {
            result += name + ": " + self.headers[name] + "\r\n";
        }
        
        result += "\r\n";
        
        if (self.body != null) {
            result += self.body;
        }
        
        return result;
    }
    
    // Helper method to set content type
    def setContentType(contentType: string) -> Response {
        self.headers["Content-Type"] = contentType;
        return self;
    }
    
    // Helper method to set JSON content
    def json(data: any) -> Response {
        self.body = JSON.stringify(data);
        self.headers["Content-Type"] = "application/json";
        self.headers["Content-Length"] = self.body.length.toString();
        return self;
    }
    
    // Helper method to send HTML content
    def html(content: string) -> Response {
        self.body = content;
        self.headers["Content-Type"] = "text/html";
        self.headers["Content-Length"] = content.length.toString();
        return self;
    }
    
    // Helper method to send text content
    def text(content: string) -> Response {
        self.body = content;
        self.headers["Content-Type"] = "text/plain";
        self.headers["Content-Length"] = content.length.toString();
        return self;
    }
}

/**
 * HTTP client for making requests
 */
class Client {
    property baseUrl: string?;
    property defaultHeaders: Map<string, string>;
    property timeout: int;
    
    def initialize(baseUrl: string? = null, defaultHeaders: Map<string, string>? = null, timeout: int = 30000) {
        self.baseUrl = baseUrl;
        self.defaultHeaders = defaultHeaders ?? {
            "User-Agent": "Tocin HTTP Client/1.0"
        };
        self.timeout = timeout;
    }
    
    async def request(method: string, url: string, headers: Map<string, string>? = null, body: string? = null) -> Response {
        let fullUrl = url;
        if (self.baseUrl && !url.startsWith("http://") && !url.startsWith("https://")) {
            fullUrl = self.baseUrl + (self.baseUrl.endsWith("/") || url.startsWith("/") ? "" : "/") + url;
        }
        
        // Parse URL
        let urlObj = URL.parse(fullUrl);
        let isHttps = urlObj.protocol == "https:";
        let host = urlObj.hostname;
        let port = urlObj.port ? int.parse(urlObj.port) : (isHttps ? 443 : 80);
        let path = urlObj.pathname + (urlObj.search || "");
        
        // Merge headers
        let mergedHeaders = { ...self.defaultHeaders };
        if (headers) {
            for (let key in headers) {
                mergedHeaders[key] = headers[key];
            }
        }
        
        // Ensure Host header is set
        mergedHeaders["Host"] = host + (
            (isHttps && port != 443) || (!isHttps && port != 80) ? ":" + port.toString() : ""
        );
        
        // Create request
        let request = Request(method, path, mergedHeaders, body);
        
        // Create socket
        let socket;
        if (isHttps) {
            socket = await TLSSocket.connect(host, port);
        } else {
            socket = await Socket.connect(host, port);
        }
        
        try {
            // Set timeout
            socket.setTimeout(self.timeout);
            
            // Send request
            await socket.write(request.toString());
            
            // Read response
            let responseText = await socket.readUntil("\r\n\r\n");
            
            // Check if there's a body to read
            let contentLength = 0;
            let transferEncoding = "";
            
            // Parse headers to get Content-Length
            let headerLines = responseText.split("\r\n");
            for (let i = 1; i < headerLines.length; i++) {
                if (headerLines[i] == "") break;
                
                let colonIndex = headerLines[i].indexOf(":");
                if (colonIndex >= 0) {
                    let name = headerLines[i].substring(0, colonIndex).trim().toLowerCase();
                    let value = headerLines[i].substring(colonIndex + 1).trim();
                    
                    if (name == "content-length") {
                        contentLength = int.parse(value);
                    } else if (name == "transfer-encoding" && value.toLowerCase().indexOf("chunked") >= 0) {
                        transferEncoding = "chunked";
                    }
                }
            }
            
            // Read body if needed
            if (contentLength > 0) {
                let body = await socket.read(contentLength);
                responseText += body;
            } else if (transferEncoding == "chunked") {
                // Read chunked data
                let body = "";
                while (true) {
                    let chunkSizeLine = await socket.readLine();
                    let chunkSize = int.parse(chunkSizeLine.trim(), 16);
                    
                    if (chunkSize == 0) {
                        await socket.readLine(); // Read final CRLF
                        break;
                    }
                    
                    let chunk = await socket.read(chunkSize);
                    body += chunk;
                    await socket.readLine(); // Read CRLF after chunk
                }
                
                responseText += "\r\n" + body;
            }
            
            return Response.fromString(responseText);
        } finally {
            socket.close();
        }
    }
    
    // Helper methods for common HTTP methods
    async def get(url: string, headers: Map<string, string>? = null) -> Response {
        return await self.request("GET", url, headers);
    }
    
    async def post(url: string, body: string, headers: Map<string, string>? = null) -> Response {
        let mergedHeaders = headers ?? {};
        if (body && !mergedHeaders["Content-Type"]) {
            mergedHeaders["Content-Type"] = "application/x-www-form-urlencoded";
        }
        return await self.request("POST", url, mergedHeaders, body);
    }
    
    async def put(url: string, body: string, headers: Map<string, string>? = null) -> Response {
        return await self.request("PUT", url, headers, body);
    }
    
    async def delete(url: string, headers: Map<string, string>? = null) -> Response {
        return await self.request("DELETE", url, headers);
    }
    
    // Helper method for posting JSON data
    async def postJson(url: string, data: any, headers: Map<string, string>? = null) -> Response {
        let body = JSON.stringify(data);
        let mergedHeaders = headers ?? {};
        mergedHeaders["Content-Type"] = "application/json";
        return await self.request("POST", url, mergedHeaders, body);
    }
}

/**
 * HTTP server for handling requests
 */
class Server {
    property handlers: Map<string, fn(Request, Response) -> Response>;
    property middleware: Array<fn(Request, Response, fn() -> void) -> void>;
    property errorHandler: fn(Error, Request, Response) -> Response;
    
    def initialize() {
        self.handlers = {};
        self.middleware = [];
        self.errorHandler = defaultErrorHandler;
    }
    
    def route(method: string, path: string, handler: fn(Request, Response) -> Response) {
        let key = method.toUpperCase() + " " + path;
        self.handlers[key] = handler;
    }
    
    def get(path: string, handler: fn(Request, Response) -> Response) {
        self.route("GET", path, handler);
    }
    
    def post(path: string, handler: fn(Request, Response) -> Response) {
        self.route("POST", path, handler);
    }
    
    def put(path: string, handler: fn(Request, Response) -> Response) {
        self.route("PUT", path, handler);
    }
    
    def delete(path: string, handler: fn(Request, Response) -> Response) {
        self.route("DELETE", path, handler);
    }
    
    def use(middleware: fn(Request, Response, fn() -> void) -> void) {
        self.middleware.push(middleware);
    }
    
    def setErrorHandler(handler: fn(Error, Request, Response) -> Response) {
        self.errorHandler = handler;
    }
    
    async def handleRequest(request: Request) -> Response {
        let response = Response();
        
        try {
            // Find matching route
            let handled = false;
            for (let pattern in self.handlers) {
                let [method, path] = pattern.split(" ", 2);
                
                if (request.method == method) {
                    let params = matchPath(path, request.url);
                    if (params) {
                        request.params = params;
                        
                        // Apply middleware
                        for (let mw in self.middleware) {
                            await mw(request, response, () => {
                                // Middleware will call next() when done
                            });
                        }
                        
                        // Call handler
                        response = await self.handlers[pattern](request, response);
                        handled = true;
                        break;
                    }
                }
            }
            
            if (!handled) {
                return Response(404, "Not Found", null, "404 Not Found: " + request.url);
            }
        } catch (err) {
            return self.errorHandler(err, request, response);
        }
        
        return response;
    }
    
    async def listen(port: int = 8080, host: string = "127.0.0.1") {
        let server = net.createServer(async (socket) => {
            try {
                while (socket.isConnected()) {
                    let requestText = await socket.readUntil("\r\n\r\n");
                    if (!requestText) break;
                    
                    // Parse headers to get Content-Length
                    let contentLength = 0;
                    let headerLines = requestText.split("\r\n");
                    for (let i = 1; i < headerLines.length; i++) {
                        if (headerLines[i] == "") break;
                        
                        let colonIndex = headerLines[i].indexOf(":");
                        if (colonIndex >= 0) {
                            let name = headerLines[i].substring(0, colonIndex).trim().toLowerCase();
                            let value = headerLines[i].substring(colonIndex + 1).trim();
                            
                            if (name == "content-length") {
                                contentLength = int.parse(value);
                            }
                        }
                    }
                    
                    // Read body if needed
                    if (contentLength > 0) {
                        let body = await socket.read(contentLength);
                        requestText += body;
                    }
                    
                    let request = Request.fromString(requestText);
                    let response = await self.handleRequest(request);
                    
                    await socket.write(response.toString());
                    
                    // Check for keep-alive
                    let connection = request.headers["Connection"] || "";
                    if (connection.toLowerCase() != "keep-alive") {
                        break;
                    }
                }
            } catch (err) {
                console.error("Error handling connection:", err);
            } finally {
                socket.close();
            }
        });
        
        await server.listen(port, host);
        console.log("HTTP server listening on http://" + host + ":" + port);
        
        return server;
    }
}

/**
 * Helper Functions
 */

// Get standard HTTP status message for a given code
def getStatusMessage(code: int) -> string {
    let messages = {
        100: "Continue",
        101: "Switching Protocols",
        200: "OK",
        201: "Created",
        202: "Accepted",
        204: "No Content",
        206: "Partial Content",
        300: "Multiple Choices",
        301: "Moved Permanently",
        302: "Found",
        303: "See Other",
        304: "Not Modified",
        307: "Temporary Redirect",
        308: "Permanent Redirect",
        400: "Bad Request",
        401: "Unauthorized",
        403: "Forbidden",
        404: "Not Found",
        405: "Method Not Allowed",
        406: "Not Acceptable",
        409: "Conflict",
        410: "Gone",
        413: "Payload Too Large",
        414: "URI Too Long",
        415: "Unsupported Media Type",
        429: "Too Many Requests",
        500: "Internal Server Error",
        501: "Not Implemented",
        502: "Bad Gateway",
        503: "Service Unavailable",
        504: "Gateway Timeout"
    };
    
    return messages[code] || "Unknown";
}

// Match URL path against a pattern (e.g., "/users/:id")
def matchPath(pattern: string, path: string) -> Map<string, string>? {
    let patternParts = pattern.split("/");
    let pathParts = path.split("/");
    
    if (patternParts.length != pathParts.length) {
        return null;
    }
    
    let params = {};
    
    for (let i = 0; i < patternParts.length; i++) {
        if (patternParts[i].startsWith(":")) {
            // Parameter
            let paramName = patternParts[i].substring(1);
            params[paramName] = pathParts[i];
        } else if (patternParts[i] != pathParts[i]) {
            // Mismatch
            return null;
        }
    }
    
    return params;
}

// Default error handler for HTTP server
def defaultErrorHandler(err: Error, request: Request, response: Response) -> Response {
    console.error("Error processing request:", err);
    return Response(500, "Internal Server Error", null, "500 Internal Server Error");
}

// Parse URL
class URL {
    property protocol: string;
    property hostname: string;
    property port: string?;
    property pathname: string;
    property search: string?;
    property hash: string?;
    
    static def parse(url: string) -> URL {
        // URL parsing implementation
        let result = URL();
        
        // Protocol
        let protocolEnd = url.indexOf("://");
        if (protocolEnd >= 0) {
            result.protocol = url.substring(0, protocolEnd + 1);
            url = url.substring(protocolEnd + 3);
        } else {
            result.protocol = "http:";
        }
        
        // Hash
        let hashIndex = url.indexOf("#");
        if (hashIndex >= 0) {
            result.hash = url.substring(hashIndex);
            url = url.substring(0, hashIndex);
        }
        
        // Search
        let searchIndex = url.indexOf("?");
        if (searchIndex >= 0) {
            result.search = url.substring(searchIndex);
            url = url.substring(0, searchIndex);
        }
        
        // Hostname and port
        let pathIndex = url.indexOf("/");
        let hostPart = pathIndex >= 0 ? url.substring(0, pathIndex) : url;
        
        let portIndex = hostPart.indexOf(":");
        if (portIndex >= 0) {
            result.hostname = hostPart.substring(0, portIndex);
            result.port = hostPart.substring(portIndex + 1);
        } else {
            result.hostname = hostPart;
        }
        
        // Pathname
        if (pathIndex >= 0) {
            result.pathname = url.substring(pathIndex);
        } else {
            result.pathname = "/";
        }
        
        return result;
    }
} 
