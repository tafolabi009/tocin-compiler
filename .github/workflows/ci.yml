name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  LLVM_VERSION: 18

jobs:
  build-test:
    name: Build & Test (${{ matrix.os }}, ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.25.0'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: |
            build/
            ~/.cache/
          key: ${{ runner.os }}-${{ matrix.build_type }}-cmake-${{ hashFiles('**/CMakeLists.txt') }}

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            llvm-${{ env.LLVM_VERSION }}-dev \
            libclang-${{ env.LLVM_VERSION }}-dev \
            clang-${{ env.LLVM_VERSION }} \
            lld-${{ env.LLVM_VERSION }} \
            libzstd-dev \
            libxml2-dev \
            zlib1g-dev \
            libffi-dev \
            libssl-dev \
            libreadline-dev \
            ninja-build

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install llvm@${{ env.LLVM_VERSION }} zstd libxml2 cmake ninja libffi openssl readline
          echo "LLVM_DIR=$(brew --prefix llvm@${{ env.LLVM_VERSION }})/lib/cmake/llvm" >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install llvm --version=${{ env.LLVM_VERSION }} -y
          echo "LLVM_DIR=C:\Program Files\LLVM\lib\cmake\llvm" >> $env:GITHUB_ENV

      - name: Configure CMake
        run: |
          cmake -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DWITH_PYTHON=ON \
            -DWITH_V8=ON \
            -DWITH_ZSTD=ON \
            -DWITH_XML=ON \
            -DENABLE_TESTING=ON \
            -DENABLE_SANITIZERS=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }}
        shell: bash

      - name: Build
        run: cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Run Unit Tests
        run: |
          cd build
          ctest --output-on-failure --parallel $(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || echo 4)
        shell: bash

      - name: Run Integration Tests
        run: |
          cd build
          if [ -f ./tocin ] || [ -f ./tocin.exe ]; then
            TOCIN_BIN=$(find . -name "tocin" -o -name "tocin.exe" | head -1)
            for f in ../tests/*.to; do
              if [ -f "$f" ]; then
                echo "Running test: $f"
                $TOCIN_BIN "$f" || exit 1
              fi
            done
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/Testing/

      - name: Job summary
        run: echo "âœ… Build and tests completed for ${{ matrix.os }} (${{ matrix.build_type }})"

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy-${{ env.LLVM_VERSION }} cppcheck

      - name: Configure for analysis
        run: |
          cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy
        run: |
          find src -name "*.cpp" | xargs clang-tidy-${{ env.LLVM_VERSION }} -p build || true

      - name: Run cppcheck
        run: |
          cppcheck --enable=warning,performance,portability --suppress=missingIncludeSystem src/
 